
max30102v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001794  2000005c  080060c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017f0  080060c4  000217f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8d4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e4  00000000  00000000  0002e9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00030a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a01  00000000  00000000  00031778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026824  00000000  00000000  00032179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d9f  00000000  00000000  0005899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb45f  00000000  00000000  0006973c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a1c  00000000  00000000  00154b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001585b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ea4 	.word	0x08005ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ea4 	.word	0x08005ea4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Max30102_Write_Reg>:
	MAX30102_STATE_COLLECT_NEXT_PORTION
}MAX30102_STATE;
	MAX30102_STATE StateMachine;


void Max30102_Write_Reg(uint8_t uch_addr, uint8_t uch_data){
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af04      	add	r7, sp, #16
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <Max30102_Write_Reg+0x34>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	b29a      	uxth	r2, r3
 8000594:	2301      	movs	r3, #1
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	21ae      	movs	r1, #174	; 0xae
 80005a4:	f002 f996 	bl	80028d4 <HAL_I2C_Mem_Write>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000078 	.word	0x20000078

080005b4 <Max30102_Read_Reg>:

void Max30102_Read_Reg(uint8_t uch_addr, uint8_t *puch_data){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <Max30102_Read_Reg+0x30>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	2301      	movs	r3, #1
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	21ae      	movs	r1, #174	; 0xae
 80005d8:	f002 fa90 	bl	8002afc <HAL_I2C_Mem_Read>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000078 	.word	0x20000078

080005e8 <Max30102_WriteRegisterBit>:

void Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]

	uint8_t tmp;
    Max30102_Read_Reg(Register, &tmp);
 80005fa:	f107 020f 	add.w	r2, r7, #15
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffd6 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(1<<Bit);
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2201      	movs	r2, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	b25b      	sxtb	r3, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	b25a      	sxtb	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b25b      	sxtb	r3, r3
 800061a:	4013      	ands	r3, r2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	f003 0201 	and.w	r2, r3, #1
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b25a      	sxtb	r2, r3
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(Register, tmp);
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff9a 	bl	800057c <Max30102_Write_Reg>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Max30102_FifoWritePointer>:

void Max30102_FifoWritePointer(uint8_t Address){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(FIFO_WRITE_POINTER,(Address & 0x1F));  //FIFO_WR_PTR[4:0]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 031f 	and.w	r3, r3, #31
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	2004      	movs	r0, #4
 8000666:	f7ff ff89 	bl	800057c <Max30102_Write_Reg>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <Max30102_FifoOverflowCounter>:

void Max30102_FifoOverflowCounter(uint8_t Address){
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(OVERFLOW_COUNTER,(Address & 0x1F));  //OVF_COUNTER[4:0]
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2005      	movs	r0, #5
 8000688:	f7ff ff78 	bl	800057c <Max30102_Write_Reg>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <Max30102_FifoReadPointer>:

void Max30102_FifoReadPointer(uint8_t Address){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(FIFO_READ_POINTER,(Address & 0x1F));  //FIFO_RD_PTR[4:0]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 031f 	and.w	r3, r3, #31
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	2006      	movs	r0, #6
 80006aa:	f7ff ff67 	bl	800057c <Max30102_Write_Reg>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Max30102_FifoSampleAveraging>:

void Max30102_FifoSampleAveraging(uint8_t Value) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b084      	sub	sp, #16
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(FIFO_CONFIGURATION, &tmp);
 80006c0:	f107 030f 	add.w	r3, r7, #15
 80006c4:	4619      	mov	r1, r3
 80006c6:	2008      	movs	r0, #8
 80006c8:	f7ff ff74 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x07);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f023 0307 	bic.w	r3, r3, #7
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(FIFO_CONFIGURATION, tmp);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2008      	movs	r0, #8
 80006ee:	f7ff ff45 	bl	800057c <Max30102_Write_Reg>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <Max30102_FifoRolloverEnable>:

void Max30102_FifoRolloverEnable(uint8_t Enable){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	71fb      	strb	r3, [r7, #7]

	Max30102_WriteRegisterBit(FIFO_CONFIGURATION, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2104      	movs	r1, #4
 8000710:	2008      	movs	r0, #8
 8000712:	f7ff ff69 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Max30102_FifoAlmostFullValue>:

void  Max30102_FifoAlmostFullValue(uint8_t Value){
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]

	if(Value < 17) Value = 17;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b10      	cmp	r3, #16
 800072c:	d801      	bhi.n	8000732 <Max30102_FifoAlmostFullValue+0x14>
 800072e:	2311      	movs	r3, #17
 8000730:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b20      	cmp	r3, #32
 8000736:	d901      	bls.n	800073c <Max30102_FifoAlmostFullValue+0x1e>
 8000738:	2320      	movs	r3, #32
 800073a:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f1c3 0320 	rsb	r3, r3, #32
 8000742:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	Max30102_Read_Reg(FIFO_CONFIGURATION, &tmp);
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	4619      	mov	r1, r3
 800074a:	2008      	movs	r0, #8
 800074c:	f7ff ff32 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x0F);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f023 030f 	bic.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	b25a      	sxtb	r2, r3
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b25b      	sxtb	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(FIFO_CONFIGURATION, tmp);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	4619      	mov	r1, r3
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff ff01 	bl	800057c <Max30102_Write_Reg>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <Max30102_SetMode>:

void Max30102_SetMode(uint8_t Mode){
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(MODE_CONFIGURATION, &tmp);
 800078c:	f107 030f 	add.w	r3, r7, #15
 8000790:	4619      	mov	r1, r3
 8000792:	2009      	movs	r0, #9
 8000794:	f7ff ff0e 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x07);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f023 0307 	bic.w	r3, r3, #7
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	b25a      	sxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(MODE_CONFIGURATION, tmp);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4619      	mov	r1, r3
 80007bc:	2009      	movs	r0, #9
 80007be:	f7ff fedd 	bl	800057c <Max30102_Write_Reg>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Max30102_SpO2AdcRange>:

void Max30102_SpO2AdcRange(uint8_t Value){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 80007d4:	f107 030f 	add.w	r3, r7, #15
 80007d8:	4619      	mov	r1, r3
 80007da:	200a      	movs	r0, #10
 80007dc:	f7ff feea 	bl	80005b4 <Max30102_Read_Reg>

	tmp &= ~(0x03);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	015b      	lsls	r3, r3, #5
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
    Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4619      	mov	r1, r3
 8000806:	200a      	movs	r0, #10
 8000808:	f7ff feb8 	bl	800057c <Max30102_Write_Reg>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <Max30102_SpO2SampleRate>:

void Max30102_SpO2SampleRate(uint8_t Value){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 800081e:	f107 030f 	add.w	r3, r7, #15
 8000822:	4619      	mov	r1, r3
 8000824:	200a      	movs	r0, #10
 8000826:	f7ff fec5 	bl	80005b4 <Max30102_Read_Reg>

	tmp &= ~(0x07);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f023 0307 	bic.w	r3, r3, #7
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	f003 031c 	and.w	r3, r3, #28
 800083e:	b25a      	sxtb	r2, r3
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b25b      	sxtb	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4619      	mov	r1, r3
 8000850:	200a      	movs	r0, #10
 8000852:	f7ff fe93 	bl	800057c <Max30102_Write_Reg>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Max30102_SpO2LedPulseWidth>:

void Max30102_SpO2LedPulseWidth(uint8_t Value){
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 8000868:	f107 030f 	add.w	r3, r7, #15
 800086c:	4619      	mov	r1, r3
 800086e:	200a      	movs	r0, #10
 8000870:	f7ff fea0 	bl	80005b4 <Max30102_Read_Reg>
	
	tmp &= ~(0x03);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f023 0303 	bic.w	r3, r3, #3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	b25a      	sxtb	r2, r3
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4619      	mov	r1, r3
 8000898:	200a      	movs	r0, #10
 800089a:	f7ff fe6f 	bl	800057c <Max30102_Write_Reg>
		
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <Max30102_SetIntAlmostFullEnabled>:

void Max30102_SetIntAlmostFullEnabled(uint8_t Enable){
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(INTERRUPT_ENABLE_1, INT_A_FULL_BIT, Enable);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2107      	movs	r1, #7
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fe96 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <Max30102_SetIntFifoDataReadyEnabled>:

void Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable){
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(INTERRUPT_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2106      	movs	r1, #6
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fe88 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af04      	add	r7, sp, #16
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, FIFO_DATA_REGISTER, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <Max30102_ReadFifo+0xd8>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2306      	movs	r3, #6
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	2207      	movs	r2, #7
 800090c:	21ae      	movs	r1, #174	; 0xae
 800090e:	f002 f8f5 	bl	8002afc <HAL_I2C_Mem_Read>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 8000918:	2300      	movs	r3, #0
 800091a:	e048      	b.n	80009ae <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 800091c:	7b3b      	ldrb	r3, [r7, #12]
 800091e:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	041b      	lsls	r3, r3, #16
 8000924:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	441a      	add	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 8000932:	7b7b      	ldrb	r3, [r7, #13]
 8000934:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	441a      	add	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	441a      	add	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	441a      	add	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 800096e:	7c3b      	ldrb	r3, [r7, #16]
 8000970:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	441a      	add	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 8000984:	7c7b      	ldrb	r3, [r7, #17]
 8000986:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	441a      	add	r2, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000078 	.word	0x20000078

080009bc <Max30102_ReadInterruptStatus>:
// 	return Max30102_WriteRegisterBit(INTERRUPT_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
// }
// #endif

MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]

	Max30102_Read_Reg(INTERRUPT_STATUS_1, &tmp);
 80009ca:	f107 030f 	add.w	r3, r7, #15
 80009ce:	4619      	mov	r1, r3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fdef 	bl	80005b4 <Max30102_Read_Reg>
	
	*Status |= tmp & 0xE1; // 3 highest bits
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b25a      	sxtb	r2, r3
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	f023 031e 	bic.w	r3, r3, #30
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	701a      	strb	r2, [r3, #0]
// #ifdef MAX30102_USE_INTERNAL_TEMPERATURE
// 	if(MAX30102_OK != Max30102_ReadReg(INTERRUPT_STATUS_2, &tmp))
// 		return MAX30102_ERROR;
// 	*Status |= tmp & 0x02;
// #endif
	return MAX30102_OK;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <Max30102_InterruptCallback>:


void Max30102_InterruptCallback(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint8_t Status;
	while(MAX30102_OK != Max30102_ReadInterruptStatus(&Status));
 8000a02:	bf00      	nop
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffd8 	bl	80009bc <Max30102_ReadInterruptStatus>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d1f8      	bne.n	8000a04 <Max30102_InterruptCallback+0x8>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da4a      	bge.n	8000ab0 <Max30102_InterruptCallback+0xb4>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	e044      	b.n	8000aaa <Max30102_InterruptCallback+0xae>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000a20:	bf00      	nop
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4a48      	ldr	r2, [pc, #288]	; (8000b4c <Max30102_InterruptCallback+0x150>)
 8000a2a:	441a      	add	r2, r3
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4947      	ldr	r1, [pc, #284]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000a34:	440b      	add	r3, r1
 8000a36:	4619      	mov	r1, r3
 8000a38:	4610      	mov	r0, r2
 8000a3a:	f7ff ff51 	bl	80008e0 <Max30102_ReadFifo>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d1ee      	bne.n	8000a22 <Max30102_InterruptCallback+0x26>
			if(IsFingerOnScreen)
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00c      	beq.n	8000a68 <Max30102_InterruptCallback+0x6c>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d80e      	bhi.n	8000a7e <Max30102_InterruptCallback+0x82>
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e00a      	b.n	8000a7e <Max30102_InterruptCallback+0x82>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8000a68:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a38      	ldr	r2, [pc, #224]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000a76:	d902      	bls.n	8000a7e <Max30102_InterruptCallback+0x82>
 8000a78:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <Max30102_InterruptCallback+0x15c>)
 8000a86:	fba3 1302 	umull	r1, r3, r3, r2
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a90:	fb01 f303 	mul.w	r3, r1, r3
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000a98:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <Max30102_InterruptCallback+0x160>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <Max30102_InterruptCallback+0x160>)
 8000aa2:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b10      	cmp	r3, #16
 8000aae:	d9b7      	bls.n	8000a20 <Max30102_InterruptCallback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d041      	beq.n	8000b3e <Max30102_InterruptCallback+0x142>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000aba:	bf00      	nop
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <Max30102_InterruptCallback+0x150>)
 8000ac4:	441a      	add	r2, r3
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4920      	ldr	r1, [pc, #128]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000ace:	440b      	add	r3, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	f7ff ff04 	bl	80008e0 <Max30102_ReadFifo>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d1ee      	bne.n	8000abc <Max30102_InterruptCallback+0xc0>
		if(IsFingerOnScreen)
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00c      	beq.n	8000b02 <Max30102_InterruptCallback+0x106>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d80e      	bhi.n	8000b18 <Max30102_InterruptCallback+0x11c>
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e00a      	b.n	8000b18 <Max30102_InterruptCallback+0x11c>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <Max30102_InterruptCallback+0x154>)
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b10:	d902      	bls.n	8000b18 <Max30102_InterruptCallback+0x11c>
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <Max30102_InterruptCallback+0x158>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <Max30102_InterruptCallback+0x15c>)
 8000b20:	fba3 1302 	umull	r1, r3, r3, r2
 8000b24:	095b      	lsrs	r3, r3, #5
 8000b26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <Max30102_InterruptCallback+0x14c>)
 8000b32:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <Max30102_InterruptCallback+0x160>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <Max30102_InterruptCallback+0x160>)
 8000b3c:	6013      	str	r3, [r2, #0]
// 	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
// 	{

// 	}
// #endif
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200009dc 	.word	0x200009dc
 8000b4c:	2000052c 	.word	0x2000052c
 8000b50:	2000007c 	.word	0x2000007c
 8000b54:	200009e8 	.word	0x200009e8
 8000b58:	1b4e81b5 	.word	0x1b4e81b5
 8000b5c:	200009e4 	.word	0x200009e4

08000b60 <Max30102_Led1PulseAmplitude>:


/* LEDs Pulse Amplitute Configuration	LED Current = Value * 0.2 mA */	

void Max30102_Led1PulseAmplitude(uint8_t Value){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(LED_1_PA, Value);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f7ff fd04 	bl	800057c <Max30102_Write_Reg>
	
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Max30102_Led2PulseAmplitude>:

void Max30102_Led2PulseAmplitude(uint8_t Value){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(LED_2_PA, Value);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	200d      	movs	r0, #13
 8000b8c:	f7ff fcf6 	bl	800057c <Max30102_Write_Reg>

}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Max30102_GetHeartRate>:


/* Usage Functions */

int32_t Max30102_GetHeartRate(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	return HeartRate;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <Max30102_GetHeartRate+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200009f4 	.word	0x200009f4

08000bb0 <Max30102_GetSpO2Value>:


int32_t Max30102_GetSpO2Value(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	return Sp02Value;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <Max30102_GetSpO2Value+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200009ec 	.word	0x200009ec

08000bc8 <Max30102_Task>:




void Max30102_Task(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af04      	add	r7, sp, #16
	switch(StateMachine)
 8000bce:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <Max30102_Task+0x138>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	f200 8090 	bhi.w	8000cf8 <Max30102_Task+0x130>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <Max30102_Task+0x18>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000c29 	.word	0x08000c29
 8000be8:	08000c57 	.word	0x08000c57
 8000bec:	08000cc1 	.word	0x08000cc1
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8000bf0:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <Max30102_Task+0x13c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8000bf6:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <Max30102_Task+0x140>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <Max30102_Task+0x144>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d073      	beq.n	8000cee <Max30102_Task+0x126>
			{
				CollectedSamples = 0;
 8000c06:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <Max30102_Task+0x148>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <Max30102_Task+0x14c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <Max30102_Task+0x150>)
 8000c12:	6013      	str	r3, [r2, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8000c14:	2024      	movs	r0, #36	; 0x24
 8000c16:	f7ff ffa3 	bl	8000b60 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8000c1a:	2024      	movs	r0, #36	; 0x24
 8000c1c:	f7ff ffae 	bl	8000b7c <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <Max30102_Task+0x138>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c26:	e062      	b.n	8000cee <Max30102_Task+0x126>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <Max30102_Task+0x144>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <Max30102_Task+0x7a>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8000c32:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <Max30102_Task+0x148>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2bfa      	cmp	r3, #250	; 0xfa
 8000c38:	d95b      	bls.n	8000cf2 <Max30102_Task+0x12a>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <Max30102_Task+0x138>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8000c40:	e057      	b.n	8000cf2 <Max30102_Task+0x12a>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ff8c 	bl	8000b60 <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff97 	bl	8000b7c <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <Max30102_Task+0x138>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			break;
 8000c54:	e04d      	b.n	8000cf2 <Max30102_Task+0x12a>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <Max30102_Task+0x144>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d025      	beq.n	8000cac <Max30102_Task+0xe4>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <Max30102_Task+0x150>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <Max30102_Task+0x154>)
 8000c68:	9203      	str	r2, [sp, #12]
 8000c6a:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <Max30102_Task+0x13c>)
 8000c6c:	9202      	str	r2, [sp, #8]
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <Max30102_Task+0x158>)
 8000c70:	9201      	str	r2, [sp, #4]
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <Max30102_Task+0x140>)
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	22fa      	movs	r2, #250	; 0xfa
 8000c78:	492a      	ldr	r1, [pc, #168]	; (8000d24 <Max30102_Task+0x15c>)
 8000c7a:	482b      	ldr	r0, [pc, #172]	; (8000d28 <Max30102_Task+0x160>)
 8000c7c:	f000 f89e 	bl	8000dbc <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <Max30102_Task+0x150>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <Max30102_Task+0x164>)
 8000c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <Max30102_Task+0x150>)
 8000c9c:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <Max30102_Task+0x148>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <Max30102_Task+0x138>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000caa:	e025      	b.n	8000cf8 <Max30102_Task+0x130>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff57 	bl	8000b60 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff62 	bl	8000b7c <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <Max30102_Task+0x138>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
			break;
 8000cbe:	e01b      	b.n	8000cf8 <Max30102_Task+0x130>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <Max30102_Task+0x144>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d007      	beq.n	8000cda <Max30102_Task+0x112>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <Max30102_Task+0x148>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b32      	cmp	r3, #50	; 0x32
 8000cd0:	d911      	bls.n	8000cf6 <Max30102_Task+0x12e>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <Max30102_Task+0x138>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000cd8:	e00d      	b.n	8000cf6 <Max30102_Task+0x12e>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff40 	bl	8000b60 <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff ff4b 	bl	8000b7c <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <Max30102_Task+0x138>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
			break;
 8000cec:	e003      	b.n	8000cf6 <Max30102_Task+0x12e>
			break;
 8000cee:	bf00      	nop
 8000cf0:	e002      	b.n	8000cf8 <Max30102_Task+0x130>
			break;
 8000cf2:	bf00      	nop
 8000cf4:	e000      	b.n	8000cf8 <Max30102_Task+0x130>
			break;
 8000cf6:	bf00      	nop
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200009f9 	.word	0x200009f9
 8000d04:	200009f4 	.word	0x200009f4
 8000d08:	200009ec 	.word	0x200009ec
 8000d0c:	200009e8 	.word	0x200009e8
 8000d10:	200009e4 	.word	0x200009e4
 8000d14:	200009dc 	.word	0x200009dc
 8000d18:	200009e0 	.word	0x200009e0
 8000d1c:	200009f8 	.word	0x200009f8
 8000d20:	200009f0 	.word	0x200009f0
 8000d24:	2000052c 	.word	0x2000052c
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	1b4e81b5 	.word	0x1b4e81b5

08000d30 <Max30102_Init>:

void Max30102_Init(I2C_HandleTypeDef *i2c){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <Max30102_Init+0x84>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 	Max30102_Write_Reg(MODE_CONFIGURATION,0x40);	/// Reset Register's 		
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	2009      	movs	r0, #9
 8000d42:	f7ff fc1b 	bl	800057c <Max30102_Write_Reg>
	Max30102_Read_Reg(0,&uch_dummy);
 8000d46:	f107 030f 	add.w	r3, r7, #15
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fc31 	bl	80005b4 <Max30102_Read_Reg>
	Max30102_FifoWritePointer(0x00);				
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fc7c 	bl	8000650 <Max30102_FifoWritePointer>

	Max30102_FifoOverflowCounter(0x00);				
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fc8a 	bl	8000672 <Max30102_FifoOverflowCounter>
	
	Max30102_FifoReadPointer(0x00);					
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fc98 	bl	8000694 <Max30102_FifoReadPointer>
	
	Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1);	
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fca6 	bl	80006b6 <Max30102_FifoSampleAveraging>
		
    Max30102_FifoRolloverEnable(0);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fcc5 	bl	80006fa <Max30102_FifoRolloverEnable>

	Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES);
 8000d70:	2011      	movs	r0, #17
 8000d72:	f7ff fcd4 	bl	800071e <Max30102_FifoAlmostFullValue>
	
	Max30102_SetMode(MODE_SPO2_MODE);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f7ff fd03 	bl	8000782 <Max30102_SetMode>
	
	Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fd24 	bl	80007ca <Max30102_SpO2AdcRange>

	Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fd46 	bl	8000814 <Max30102_SpO2SampleRate>

	Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f7ff fd68 	bl	800085e <Max30102_SpO2LedPulseWidth>

    Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fee6 	bl	8000b60 <Max30102_Led1PulseAmplitude>

	Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fef1 	bl	8000b7c <Max30102_Led2PulseAmplitude>
	
	Max30102_SetIntAlmostFullEnabled(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff fd83 	bl	80008a6 <Max30102_SetIntAlmostFullEnabled>
	
	Max30102_SetIntFifoDataReadyEnabled(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fd8e 	bl	80008c2 <Max30102_SetIntFifoDataReadyEnabled>

	StateMachine = MAX30102_STATE_BEGIN;
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <Max30102_Init+0x88>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000078 	.word	0x20000078
 8000db8:	200009f9 	.word	0x200009f9

08000dbc <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b0d3      	sub	sp, #332	; 0x14c
 8000dc0:	af04      	add	r7, sp, #16
 8000dc2:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8000dc6:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8000dca:	6020      	str	r0, [r4, #0]
 8000dcc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8000dd0:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8000dd4:	6001      	str	r1, [r0, #0]
 8000dd6:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000dda:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8000dde:	600a      	str	r2, [r1, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000de6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000dea:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8000dec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000df0:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e06:	e021      	b.n	8000e4c <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8000e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000e12:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000e20:	4413      	add	r3, r2
 8000e22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000e26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4ad3      	ldr	r2, [pc, #844]	; (800117c <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
 8000e2e:	fba2 1203 	umull	r1, r2, r2, r3
 8000e32:	0952      	lsrs	r2, r2, #5
 8000e34:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e38:	fb01 f202 	mul.w	r2, r1, r2
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e46:	3301      	adds	r3, #1
 8000e48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e54:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbd4      	blt.n	8000e08 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8000e5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8000e74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e78:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e88:	e025      	b.n	8000ed6 <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8000e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000e94:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4ab6      	ldr	r2, [pc, #728]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000eb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	4ab1      	ldr	r2, [pc, #708]	; (800117c <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
 8000eb8:	fba2 1203 	umull	r1, r2, r2, r3
 8000ebc:	0952      	lsrs	r2, r2, #5
 8000ebe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ec2:	fb01 f202 	mul.w	r2, r1, r2
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000ed6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000eda:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ede:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbd0      	blt.n	8000e8a <maxim_heart_rate_and_oxygen_saturation+0xce>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000eee:	e02c      	b.n	8000f4a <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8000ef0:	4aa3      	ldr	r2, [pc, #652]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ef6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000efe:	3301      	adds	r3, #1
 8000f00:	499f      	ldr	r1, [pc, #636]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f06:	441a      	add	r2, r3
 8000f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	499c      	ldr	r1, [pc, #624]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f14:	441a      	add	r2, r3
 8000f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	4998      	ldr	r1, [pc, #608]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8000f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da00      	bge.n	8000f32 <maxim_heart_rate_and_oxygen_saturation+0x176>
 8000f30:	3303      	adds	r3, #3
 8000f32:	109b      	asrs	r3, r3, #2
 8000f34:	4619      	mov	r1, r3
 8000f36:	4a92      	ldr	r2, [pc, #584]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f44:	3301      	adds	r3, #1
 8000f46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f4e:	2bf5      	cmp	r3, #245	; 0xf5
 8000f50:	ddce      	ble.n	8000ef0 <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f58:	e015      	b.n	8000f86 <maxim_heart_rate_and_oxygen_saturation+0x1ca>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8000f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a87      	ldr	r2, [pc, #540]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f66:	4986      	ldr	r1, [pc, #536]	; (8001180 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	4984      	ldr	r1, [pc, #528]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f80:	3301      	adds	r3, #1
 8000f82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f8a:	2bf4      	cmp	r3, #244	; 0xf4
 8000f8c:	dde5      	ble.n	8000f5a <maxim_heart_rate_and_oxygen_saturation+0x19e>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f94:	e019      	b.n	8000fca <maxim_heart_rate_and_oxygen_saturation+0x20e>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8000f96:	4a7b      	ldr	r2, [pc, #492]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4977      	ldr	r1, [pc, #476]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fac:	4413      	add	r3, r2
 8000fae:	0fda      	lsrs	r2, r3, #31
 8000fb0:	4413      	add	r3, r2
 8000fb2:	105b      	asrs	r3, r3, #1
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4a73      	ldr	r2, [pc, #460]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fce:	2bf3      	cmp	r3, #243	; 0xf3
 8000fd0:	dde1      	ble.n	8000f96 <maxim_heart_rate_and_oxygen_saturation+0x1da>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fd8:	e039      	b.n	800104e <maxim_heart_rate_and_oxygen_saturation+0x292>
        s= 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000fe0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000fe8:	e018      	b.n	800101c <maxim_heart_rate_and_oxygen_saturation+0x260>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000ff8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ffc:	1a8a      	subs	r2, r1, r2
 8000ffe:	4962      	ldr	r1, [pc, #392]	; (8001188 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001000:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8001012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800101c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001020:	3304      	adds	r3, #4
 8001022:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001026:	429a      	cmp	r2, r3
 8001028:	dddf      	ble.n	8000fea <maxim_heart_rate_and_oxygen_saturation+0x22e>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 800102a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1252      	asrs	r2, r2, #9
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	4952      	ldr	r1, [pc, #328]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800103c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001044:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001048:	3301      	adds	r3, #1
 800104a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800104e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001052:	2bee      	cmp	r3, #238	; 0xee
 8001054:	ddc1      	ble.n	8000fda <maxim_heart_rate_and_oxygen_saturation+0x21e>
    }

 
    n_th1=0; // threshold calculation
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001062:	e011      	b.n	8001088 <maxim_heart_rate_and_oxygen_saturation+0x2cc>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001064:	4a47      	ldr	r2, [pc, #284]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfb8      	it	lt
 8001072:	425b      	neglt	r3, r3
 8001074:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001078:	4413      	add	r3, r2
 800107a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800107e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001082:	3301      	adds	r3, #1
 8001084:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800108c:	2bf4      	cmp	r3, #244	; 0xf4
 800108e:	dde9      	ble.n	8001064 <maxim_heart_rate_and_oxygen_saturation+0x2a8>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8001090:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8001096:	fb82 1203 	smull	r1, r2, r2, r3
 800109a:	1192      	asrs	r2, r2, #6
 800109c:	17db      	asrs	r3, r3, #31
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 80010a4:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80010a8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80010ac:	2305      	movs	r3, #5
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2308      	movs	r3, #8
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	23f5      	movs	r3, #245	; 0xf5
 80010bc:	4a31      	ldr	r2, [pc, #196]	; (8001184 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80010be:	f000 fb91 	bl	80017e4 <maxim_find_peaks>

    n_peak_interval_sum =0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 80010c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	dd48      	ble.n	8001162 <maxim_heart_rate_and_oxygen_saturation+0x3a6>
        for (k=1; k<n_npks; k++)
 80010d0:	2301      	movs	r3, #1
 80010d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80010d6:	e01b      	b.n	8001110 <maxim_heart_rate_and_oxygen_saturation+0x354>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 80010d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010ec:	1e59      	subs	r1, r3, #1
 80010ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001100:	4413      	add	r3, r2
 8001102:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8001106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800110a:	3301      	adds	r3, #1
 800110c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001114:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001118:	429a      	cmp	r2, r3
 800111a:	dbdd      	blt.n	80010d8 <maxim_heart_rate_and_oxygen_saturation+0x31c>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 800111c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001120:	3b01      	subs	r3, #1
 8001122:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001126:	fb92 f3f3 	sdiv	r3, r2, r3
 800112a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 800112e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001194 <maxim_heart_rate_and_oxygen_saturation+0x3d8>
 800113e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001142:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114e:	ee17 2a90 	vmov	r2, s15
 8001152:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001156:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001158:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e007      	b.n	8001172 <maxim_heart_rate_and_oxygen_saturation+0x3b6>
    }
    else  {
        *pn_heart_rate = -999;
 8001162:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001166:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <maxim_heart_rate_and_oxygen_saturation+0x3dc>)
 8001168:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 800116a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001178:	e026      	b.n	80011c8 <maxim_heart_rate_and_oxygen_saturation+0x40c>
 800117a:	bf00      	nop
 800117c:	1b4e81b5 	.word	0x1b4e81b5
 8001180:	20000dd4 	.word	0x20000dd4
 8001184:	200009fc 	.word	0x200009fc
 8001188:	08005ee4 	.word	0x08005ee4
 800118c:	725f9bed 	.word	0x725f9bed
 8001190:	42df9bb1 	.word	0x42df9bb1
 8001194:	45bb8000 	.word	0x45bb8000
 8001198:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 800119c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	1c9a      	adds	r2, r3, #2
 80011ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80011b8:	443b      	add	r3, r7
 80011ba:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 80011be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbe3      	blt.n	800119c <maxim_heart_rate_and_oxygen_saturation+0x3e0>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80011d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011d8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011e8:	e032      	b.n	8001250 <maxim_heart_rate_and_oxygen_saturation+0x494>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80011ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80011f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	4ab1      	ldr	r2, [pc, #708]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 800120a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001214:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	4413      	add	r3, r2
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	4aaa      	ldr	r2, [pc, #680]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 8001222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800122a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800122e:	3301      	adds	r3, #1
 8001230:	4aa7      	ldr	r2, [pc, #668]	; (80014d0 <maxim_heart_rate_and_oxygen_saturation+0x714>)
 8001232:	fba2 1203 	umull	r1, r2, r2, r3
 8001236:	0952      	lsrs	r2, r2, #5
 8001238:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800123c:	fb01 f202 	mul.w	r2, r1, r2
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001250:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001254:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001258:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbc3      	blt.n	80011ea <maxim_heart_rate_and_oxygen_saturation+0x42e>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800126e:	e059      	b.n	8001324 <maxim_heart_rate_and_oxygen_saturation+0x568>
        un_only_once =1;
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8001276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001280:	443b      	add	r3, r7
 8001282:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 800128a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800128e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8001292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001296:	2bef      	cmp	r3, #239	; 0xef
 8001298:	dc3f      	bgt.n	800131a <maxim_heart_rate_and_oxygen_saturation+0x55e>
 800129a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800129e:	2b05      	cmp	r3, #5
 80012a0:	dd3b      	ble.n	800131a <maxim_heart_rate_and_oxygen_saturation+0x55e>
            for(i= m-5;i<m+5; i++)
 80012a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012a6:	3b05      	subs	r3, #5
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012ac:	e025      	b.n	80012fa <maxim_heart_rate_and_oxygen_saturation+0x53e>
                if (an_x[i]<n_c_min){
 80012ae:	4a86      	ldr	r2, [pc, #536]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 80012b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012bc:	429a      	cmp	r2, r3
 80012be:	dd17      	ble.n	80012f0 <maxim_heart_rate_and_oxygen_saturation+0x534>
                    if (un_only_once >0){
 80012c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <maxim_heart_rate_and_oxygen_saturation+0x512>
                       un_only_once =0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 80012ce:	4a7e      	ldr	r2, [pc, #504]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 80012d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 80012dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80012e6:	443b      	add	r3, r7
 80012e8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012ec:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 80012f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012f4:	3301      	adds	r3, #1
 80012f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012fe:	3304      	adds	r3, #4
 8001300:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001304:	429a      	cmp	r2, r3
 8001306:	ddd2      	ble.n	80012ae <maxim_heart_rate_and_oxygen_saturation+0x4f2>
                }
            if (un_only_once ==0)
 8001308:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <maxim_heart_rate_and_oxygen_saturation+0x55e>
                n_exact_ir_valley_locs_count ++ ;
 8001310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001314:	3301      	adds	r3, #1
 8001316:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 800131a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001328:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800132c:	429a      	cmp	r2, r3
 800132e:	db9f      	blt.n	8001270 <maxim_heart_rate_and_oxygen_saturation+0x4b4>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8001330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001334:	2b01      	cmp	r3, #1
 8001336:	dc08      	bgt.n	800134a <maxim_heart_rate_and_oxygen_saturation+0x58e>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001338:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800133c:	4a65      	ldr	r2, [pc, #404]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800133e:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 8001340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
       return;
 8001348:	e240      	b.n	80017cc <maxim_heart_rate_and_oxygen_saturation+0xa10>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001350:	e04c      	b.n	80013ec <maxim_heart_rate_and_oxygen_saturation+0x630>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8001352:	4a5d      	ldr	r2, [pc, #372]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001360:	3301      	adds	r3, #1
 8001362:	4959      	ldr	r1, [pc, #356]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001364:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001368:	441a      	add	r2, r3
 800136a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800136e:	3302      	adds	r3, #2
 8001370:	4955      	ldr	r1, [pc, #340]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001372:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001376:	441a      	add	r2, r3
 8001378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800137c:	3303      	adds	r3, #3
 800137e:	4952      	ldr	r1, [pc, #328]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001380:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001384:	4413      	add	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	da00      	bge.n	800138c <maxim_heart_rate_and_oxygen_saturation+0x5d0>
 800138a:	3303      	adds	r3, #3
 800138c:	109b      	asrs	r3, r3, #2
 800138e:	4619      	mov	r1, r3
 8001390:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800139a:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 800139c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a8:	3301      	adds	r3, #1
 80013aa:	4948      	ldr	r1, [pc, #288]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013b0:	441a      	add	r2, r3
 80013b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013b6:	3302      	adds	r3, #2
 80013b8:	4944      	ldr	r1, [pc, #272]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013be:	441a      	add	r2, r3
 80013c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013c4:	3303      	adds	r3, #3
 80013c6:	4941      	ldr	r1, [pc, #260]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013cc:	4413      	add	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da00      	bge.n	80013d4 <maxim_heart_rate_and_oxygen_saturation+0x618>
 80013d2:	3303      	adds	r3, #3
 80013d4:	109b      	asrs	r3, r3, #2
 80013d6:	4619      	mov	r1, r3
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80013e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013e6:	3301      	adds	r3, #1
 80013e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80013ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013f0:	2bf5      	cmp	r3, #245	; 0xf5
 80013f2:	ddae      	ble.n	8001352 <maxim_heart_rate_and_oxygen_saturation+0x596>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001406:	e00d      	b.n	8001424 <maxim_heart_rate_and_oxygen_saturation+0x668>
 8001408:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800140c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001410:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001414:	2100      	movs	r1, #0
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800141a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001428:	2b04      	cmp	r3, #4
 800142a:	dded      	ble.n	8001408 <maxim_heart_rate_and_oxygen_saturation+0x64c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001432:	e017      	b.n	8001464 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8001434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800143e:	443b      	add	r3, r7
 8001440:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001444:	2bfa      	cmp	r3, #250	; 0xfa
 8001446:	dd08      	ble.n	800145a <maxim_heart_rate_and_oxygen_saturation+0x69e>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001448:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800144e:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 8001450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
            return;
 8001458:	e1b8      	b.n	80017cc <maxim_heart_rate_and_oxygen_saturation+0xa10>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800145a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001464:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001468:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800146c:	429a      	cmp	r2, r3
 800146e:	dbe1      	blt.n	8001434 <maxim_heart_rate_and_oxygen_saturation+0x678>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001476:	e14c      	b.n	8001712 <maxim_heart_rate_and_oxygen_saturation+0x956>
        n_y_dc_max= -16777216 ; 
 8001478:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800147c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 8001480:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8001488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800148c:	3301      	adds	r3, #1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001494:	443b      	add	r3, r7
 8001496:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 800149a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014a4:	443b      	add	r3, r7
 80014a6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b0a      	cmp	r3, #10
 80014ae:	f340 812b 	ble.w	8001708 <maxim_heart_rate_and_oxygen_saturation+0x94c>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80014b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014bc:	443b      	add	r3, r7
 80014be:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014c6:	e034      	b.n	8001532 <maxim_heart_rate_and_oxygen_saturation+0x776>
 80014c8:	20000dd4 	.word	0x20000dd4
 80014cc:	200011bc 	.word	0x200011bc
 80014d0:	1b4e81b5 	.word	0x1b4e81b5
 80014d4:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80014d8:	4abe      	ldr	r2, [pc, #760]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 80014da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80014e6:	429a      	cmp	r2, r3
 80014e8:	da0a      	bge.n	8001500 <maxim_heart_rate_and_oxygen_saturation+0x744>
 80014ea:	4aba      	ldr	r2, [pc, #744]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 80014ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8001500:	4ab5      	ldr	r2, [pc, #724]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001502:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800150e:	429a      	cmp	r2, r3
 8001510:	da0a      	bge.n	8001528 <maxim_heart_rate_and_oxygen_saturation+0x76c>
 8001512:	4ab1      	ldr	r2, [pc, #708]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001528:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800152c:	3301      	adds	r3, #1
 800152e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001536:	3301      	adds	r3, #1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800153e:	443b      	add	r3, r7
 8001540:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001544:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001548:	429a      	cmp	r2, r3
 800154a:	dbc5      	blt.n	80014d8 <maxim_heart_rate_and_oxygen_saturation+0x71c>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 800154c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001550:	3301      	adds	r3, #1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001558:	443b      	add	r3, r7
 800155a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800155e:	4a9e      	ldr	r2, [pc, #632]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001560:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800156e:	443b      	add	r3, r7
 8001570:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001574:	4998      	ldr	r1, [pc, #608]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001586:	443b      	add	r3, r7
 8001588:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800158c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001590:	1acb      	subs	r3, r1, r3
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 800159a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015a4:	443b      	add	r3, r7
 80015a6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015aa:	4a8b      	ldr	r2, [pc, #556]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 80015ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015b4:	3301      	adds	r3, #1
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015bc:	443b      	add	r3, r7
 80015be:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80015c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015cc:	443b      	add	r3, r7
 80015ce:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015d2:	1acb      	subs	r3, r1, r3
 80015d4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80015d8:	fb91 f3f3 	sdiv	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80015e2:	4a7d      	ldr	r2, [pc, #500]	; (80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 80015e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80015f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015fa:	3301      	adds	r3, #1
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001602:	443b      	add	r3, r7
 8001604:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001608:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 800160a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800160e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001618:	443b      	add	r3, r7
 800161a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800161e:	496d      	ldr	r1, [pc, #436]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 8001620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001624:	1ad2      	subs	r2, r2, r3
 8001626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001630:	443b      	add	r3, r7
 8001632:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001636:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800163a:	1acb      	subs	r3, r1, r3
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 8001644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800164e:	443b      	add	r3, r7
 8001650:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001654:	4a5f      	ldr	r2, [pc, #380]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 8001656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800165a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165e:	3301      	adds	r3, #1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001666:	443b      	add	r3, r7
 8001668:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 800166c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001676:	443b      	add	r3, r7
 8001678:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800167c:	1acb      	subs	r3, r1, r3
 800167e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001682:	fb91 f3f3 	sdiv	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 800168e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001692:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80016a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016a4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	11db      	asrs	r3, r3, #7
 80016ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80016b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016b6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	11db      	asrs	r3, r3, #7
 80016c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80016c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	dd1d      	ble.n	8001708 <maxim_heart_rate_and_oxygen_saturation+0x94c>
 80016cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	dc19      	bgt.n	8001708 <maxim_heart_rate_and_oxygen_saturation+0x94c>
 80016d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d015      	beq.n	8001708 <maxim_heart_rate_and_oxygen_saturation+0x94c>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80016dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016e0:	2264      	movs	r2, #100	; 0x64
 80016e2:	fb03 f202 	mul.w	r2, r3, r2
 80016e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016ea:	fb92 f1f3 	sdiv	r1, r2, r3
 80016ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80016fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 80016fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001702:	3301      	adds	r3, #1
 8001704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800170c:	3301      	adds	r3, #1
 800170e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001716:	3b01      	subs	r3, #1
 8001718:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800171c:	429a      	cmp	r2, r3
 800171e:	f6ff aeab 	blt.w	8001478 <maxim_heart_rate_and_oxygen_saturation+0x6bc>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f94f 	bl	80019ce <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8001730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001734:	0fda      	lsrs	r2, r3, #31
 8001736:	4413      	add	r3, r2
 8001738:	105b      	asrs	r3, r3, #1
 800173a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 800173e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001742:	2b01      	cmp	r3, #1
 8001744:	dd17      	ble.n	8001776 <maxim_heart_rate_and_oxygen_saturation+0x9ba>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001750:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001754:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001758:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800175c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001760:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001764:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001768:	4413      	add	r3, r2
 800176a:	0fda      	lsrs	r2, r3, #31
 800176c:	4413      	add	r3, r2
 800176e:	105b      	asrs	r3, r3, #1
 8001770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001774:	e009      	b.n	800178a <maxim_heart_rate_and_oxygen_saturation+0x9ce>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8001776:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800177a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800177e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 800178a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800178e:	2b02      	cmp	r3, #2
 8001790:	dd14      	ble.n	80017bc <maxim_heart_rate_and_oxygen_saturation+0xa00>
 8001792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001796:	2bb7      	cmp	r3, #183	; 0xb7
 8001798:	dc10      	bgt.n	80017bc <maxim_heart_rate_and_oxygen_saturation+0xa00>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <maxim_heart_rate_and_oxygen_saturation+0xa20>)
 800179c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80017a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80017ac:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80017b0:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80017b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e007      	b.n	80017cc <maxim_heart_rate_and_oxygen_saturation+0xa10>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80017bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80017c2:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 80017c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    }
}
 80017cc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	20000dd4 	.word	0x20000dd4
 80017d8:	200011bc 	.word	0x200011bc
 80017dc:	08005f24 	.word	0x08005f24
 80017e0:	fffffc19 	.word	0xfffffc19

080017e4 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 f812 	bl	8001826 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f880 	bl	800190e <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	429a      	cmp	r2, r3
 8001816:	bfa8      	it	ge
 8001818:	461a      	movge	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001834:	2301      	movs	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 800183e:	e05a      	b.n	80018f6 <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	429a      	cmp	r2, r3
 800184e:	da4f      	bge.n	80018f0 <maxim_peaks_above_min_height+0xca>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001860:	3b01      	subs	r3, #1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	440b      	add	r3, r1
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	dd40      	ble.n	80018f0 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001872:	e002      	b.n	800187a <maxim_peaks_above_min_height+0x54>
                n_width++;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	3301      	adds	r3, #1
 8001878:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4413      	add	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	dd0d      	ble.n	80018a2 <maxim_peaks_above_min_height+0x7c>
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	440b      	add	r3, r1
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	440b      	add	r3, r1
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d0e8      	beq.n	8001874 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6979      	ldr	r1, [r7, #20]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	440b      	add	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	440b      	add	r3, r1
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dd13      	ble.n	80018e6 <maxim_peaks_above_min_height+0xc0>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b0e      	cmp	r3, #14
 80018c4:	dc0f      	bgt.n	80018e6 <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	6011      	str	r1, [r2, #0]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3301      	adds	r3, #1
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e003      	b.n	80018ee <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018ee:	e002      	b.n	80018f6 <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	db9f      	blt.n	8001840 <maxim_peaks_above_min_height+0x1a>
    }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b088      	sub	sp, #32
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f895 	bl	8001a54 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	e03e      	b.n	80019b0 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	e02c      	b.n	80019a2 <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <maxim_remove_close_peaks+0x58>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	440b      	add	r3, r1
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	e001      	b.n	800196a <maxim_remove_close_peaks+0x5c>
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	dc04      	bgt.n	8001980 <maxim_remove_close_peaks+0x72>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	425b      	negs	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	da0d      	bge.n	800199c <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	441a      	add	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1c58      	adds	r0, r3, #1
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6008      	str	r0, [r1, #0]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	440b      	add	r3, r1
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	3301      	adds	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbce      	blt.n	8001948 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	dbbb      	blt.n	8001932 <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f804 	bl	80019ce <maxim_sort_ascend>
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80019ce:	b480      	push	{r7}
 80019d0:	b087      	sub	sp, #28
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e02f      	b.n	8001a3e <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e00f      	b.n	8001a10 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019f6:	3b01      	subs	r3, #1
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	441a      	add	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	440b      	add	r3, r1
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dd0a      	ble.n	8001a2c <maxim_sort_ascend+0x5e>
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbe1      	blt.n	80019f0 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbcb      	blt.n	80019de <maxim_sort_ascend+0x10>
    }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e037      	b.n	8001ad6 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	e00f      	b.n	8001a98 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	441a      	add	r2, r3
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd12      	ble.n	8001ac4 <maxim_sort_indices_descend+0x70>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	68f9      	ldr	r1, [r7, #12]
 8001abc:	440b      	add	r3, r1
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dcd9      	bgt.n	8001a78 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbc3      	blt.n	8001a66 <maxim_sort_indices_descend+0x12>
    }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3724      	adds	r7, #36	; 0x24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <UART2_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_SendString(char* s) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7fe fb6b 	bl	80001d0 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <UART2_SendString+0x28>)
 8001b06:	f002 ffd1 	bl	8004aac <HAL_UART_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200015f8 	.word	0x200015f8

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b598      	push	{r3, r4, r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1c:	f000 fadd 	bl	80020da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b20:	f000 f830 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b24:	f000 f8e2 	bl	8001cec <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b28:	f000 f872 	bl	8001c10 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001b2c:	f000 f8ae 	bl	8001c8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2_SendString("START\n\r");
 8001b30:	480f      	ldr	r0, [pc, #60]	; (8001b70 <main+0x58>)
 8001b32:	f7ff ffdb 	bl	8001aec <UART2_SendString>
  Max30102_Init(&hi2c1);
 8001b36:	480f      	ldr	r0, [pc, #60]	; (8001b74 <main+0x5c>)
 8001b38:	f7ff f8fa 	bl	8000d30 <Max30102_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Max30102_Task();
 8001b3c:	f7ff f844 	bl	8000bc8 <Max30102_Task>
	  		sprintf(UartBuffer, "%c[2J%c[H", 27, 27);
 8001b40:	231b      	movs	r3, #27
 8001b42:	221b      	movs	r2, #27
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <main+0x60>)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <main+0x64>)
 8001b48:	f003 fd08 	bl	800555c <siprintf>
	  		UART2_SendString(UartBuffer);
 8001b4c:	480b      	ldr	r0, [pc, #44]	; (8001b7c <main+0x64>)
 8001b4e:	f7ff ffcd 	bl	8001aec <UART2_SendString>

	  		sprintf(UartBuffer, "HR: %d\n\rSpO2: %d\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8001b52:	f7ff f821 	bl	8000b98 <Max30102_GetHeartRate>
 8001b56:	4604      	mov	r4, r0
 8001b58:	f7ff f82a 	bl	8000bb0 <Max30102_GetSpO2Value>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4622      	mov	r2, r4
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <main+0x68>)
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <main+0x64>)
 8001b64:	f003 fcfa 	bl	800555c <siprintf>
	  		UART2_SendString(UartBuffer);
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <main+0x64>)
 8001b6a:	f7ff ffbf 	bl	8001aec <UART2_SendString>
  {
 8001b6e:	e7e5      	b.n	8001b3c <main+0x24>
 8001b70:	08005ebc 	.word	0x08005ebc
 8001b74:	200015a4 	.word	0x200015a4
 8001b78:	08005ec4 	.word	0x08005ec4
 8001b7c:	20001680 	.word	0x20001680
 8001b80:	08005ed0 	.word	0x08005ed0

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b096      	sub	sp, #88	; 0x58
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	2244      	movs	r2, #68	; 0x44
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fd02 	bl	800559c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ba6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001baa:	f001 fc1f 	bl	80033ec <HAL_PWREx_ControlVoltageScaling>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bb4:	f000 f90b 	bl	8001dce <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fc61 	bl	8003498 <HAL_RCC_OscConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001bdc:	f000 f8f7 	bl	8001dce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be0:	230f      	movs	r3, #15
 8001be2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 f829 	bl	8003c50 <HAL_RCC_ClockConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c04:	f000 f8e3 	bl	8001dce <Error_Handler>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3758      	adds	r7, #88	; 0x58
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_I2C1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c1c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001c20:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c4e:	f000 fda5 	bl	800279c <HAL_I2C_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 f8b9 	bl	8001dce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4809      	ldr	r0, [pc, #36]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c60:	f001 fb1e 	bl	80032a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c6a:	f000 f8b0 	bl	8001dce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c72:	f001 fb60 	bl	8003336 <HAL_I2CEx_ConfigDigitalFilter>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c7c:	f000 f8a7 	bl	8001dce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200015a4 	.word	0x200015a4
 8001c88:	40005400 	.word	0x40005400

08001c8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001c92:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <MX_USART2_UART_Init+0x5c>)
 8001c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART2_UART_Init+0x58>)
 8001cd0:	f002 fe9e 	bl	8004a10 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cda:	f000 f878 	bl	8001dce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200015f8 	.word	0x200015f8
 8001ce8:	40004400 	.word	0x40004400

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_GPIO_Init+0xbc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	4817      	ldr	r0, [pc, #92]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d50:	f000 fcf4 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4810      	ldr	r0, [pc, #64]	; (8001dac <MX_GPIO_Init+0xc0>)
 8001d6c:	f000 fb3c 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f000 fb2d 	bl	80023e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2101      	movs	r1, #1
 8001d92:	2017      	movs	r0, #23
 8001d94:	f000 faf1 	bl	800237a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d98:	2017      	movs	r0, #23
 8001d9a:	f000 fb0a 	bl	80023b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000800 	.word	0x48000800

08001db0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin)
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Max30102_InterruptCallback();
 8001dc2:	f7fe fe1b 	bl	80009fc <Max30102_InterruptCallback>
	}
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd2:	b672      	cpsid	i
}
 8001dd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x44>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_MspInit+0x44>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_MspInit+0x44>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x44>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x44>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	; 0x58
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x44>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0ac      	sub	sp, #176	; 0xb0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2288      	movs	r2, #136	; 0x88
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fbab 	bl	800559c <memset>
  if(hi2c->Instance==I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <HAL_I2C_MspInit+0xb0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d13a      	bne.n	8001ec6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 f91b 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e68:	f7ff ffb1 	bl	8001dce <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	4a18      	ldr	r2, [pc, #96]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480b      	ldr	r0, [pc, #44]	; (8001ed8 <HAL_I2C_MspInit+0xb8>)
 8001eaa:	f000 fa9d 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_I2C_MspInit+0xb4>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	37b0      	adds	r7, #176	; 0xb0
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000400 	.word	0x48000400

08001edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ac      	sub	sp, #176	; 0xb0
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2288      	movs	r2, #136	; 0x88
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fb4d 	bl	800559c <memset>
  if(huart->Instance==USART2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_UART_MspInit+0xb0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d13b      	bne.n	8001f84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 f8bd 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f24:	f7ff ff53 	bl	8001dce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f70:	2307      	movs	r3, #7
 8001f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f000 fa32 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	37b0      	adds	r7, #176	; 0xb0
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40021000 	.word	0x40021000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f8d0 	bl	8002184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ff0:	f000 fbbc 	bl	800276c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f003 fac0 	bl	80055ac <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	; (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20018000 	.word	0x20018000
 8002058:	00000400 	.word	0x00000400
 800205c:	200016a0 	.word	0x200016a0
 8002060:	200017f0 	.word	0x200017f0

08002064 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800208c:	f7ff ffea 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002092:	490d      	ldr	r1, [pc, #52]	; (80020c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <LoopForever+0xe>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a8:	4c0a      	ldr	r4, [pc, #40]	; (80020d4 <LoopForever+0x16>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020b6:	f003 fa7f 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ba:	f7ff fd2d 	bl	8001b18 <main>

080020be <LoopForever>:

LoopForever:
    b LoopForever
 80020be:	e7fe      	b.n	80020be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020cc:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 80020d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020d4:	200017f0 	.word	0x200017f0

080020d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC1_2_IRQHandler>

080020da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f93d 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	200f      	movs	r0, #15
 80020ec:	f000 f80e 	bl	800210c <HAL_InitTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	e001      	b.n	8002100 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020fc:	f7ff fe6c 	bl	8001dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002100:	79fb      	ldrb	r3, [r7, #7]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_InitTick+0x6c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d023      	beq.n	8002168 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_InitTick+0x70>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_InitTick+0x6c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f949 	bl	80023ce <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d809      	bhi.n	800215c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 f913 	bl	800237a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_InitTick+0x74>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e007      	b.n	800216c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e004      	b.n	800216c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e001      	b.n	800216c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008
 80021a8:	200016a4 	.word	0x200016a4

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	200016a4 	.word	0x200016a4

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff29 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff3e 	bl	800220c <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff8e 	bl	80022b8 <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff31 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ffa2 	bl	8002320 <SysTick_Config>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f6:	e17f      	b.n	80026f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8171 	beq.w	80026f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d005      	beq.n	8002428 <HAL_GPIO_Init+0x40>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d130      	bne.n	800248a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245e:	2201      	movs	r2, #1
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0201 	and.w	r2, r3, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b03      	cmp	r3, #3
 8002494:	d118      	bne.n	80024c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	6939      	ldr	r1, [r7, #16]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ac 	beq.w	80026f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	4b5f      	ldr	r3, [pc, #380]	; (8002718 <HAL_GPIO_Init+0x330>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	4a5e      	ldr	r2, [pc, #376]	; (8002718 <HAL_GPIO_Init+0x330>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60
 80025a6:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <HAL_GPIO_Init+0x330>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025b2:	4a5a      	ldr	r2, [pc, #360]	; (800271c <HAL_GPIO_Init+0x334>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x242>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <HAL_GPIO_Init+0x338>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x23e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_GPIO_Init+0x33c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x23a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_GPIO_Init+0x340>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x236>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_GPIO_Init+0x344>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x232>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_GPIO_Init+0x348>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x22e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_GPIO_Init+0x34c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x22a>
 800260e:	2306      	movs	r3, #6
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002612:	2307      	movs	r3, #7
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x244>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x244>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x244>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x244>
 800262a:	2300      	movs	r3, #0
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800263c:	4937      	ldr	r1, [pc, #220]	; (800271c <HAL_GPIO_Init+0x334>)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_GPIO_Init+0x350>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800266e:	4a32      	ldr	r2, [pc, #200]	; (8002738 <HAL_GPIO_Init+0x350>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_GPIO_Init+0x350>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <HAL_GPIO_Init+0x350>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_GPIO_Init+0x350>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c2:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_GPIO_Init+0x350>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_GPIO_Init+0x350>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_GPIO_Init+0x350>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f ae78 	bne.w	80023f8 <HAL_GPIO_Init+0x10>
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	48000400 	.word	0x48000400
 8002724:	48000800 	.word	0x48000800
 8002728:	48000c00 	.word	0x48000c00
 800272c:	48001000 	.word	0x48001000
 8002730:	48001400 	.word	0x48001400
 8002734:	48001800 	.word	0x48001800
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002758:	e002      	b.n	8002760 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fb10 	bl	8001db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08d      	b.n	80028ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fb2c 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e006      	b.n	8002824 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d108      	bne.n	800283e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e007      	b.n	800284e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800285c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	f040 80f9 	bne.w	8002aee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_I2C_Mem_Write+0x34>
 8002902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ed      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Mem_Write+0x4e>
 800291e:	2302      	movs	r3, #2
 8002920:	e0e6      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800292a:	f7ff fc3f 	bl	80021ac <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2319      	movs	r3, #25
 8002936:	2201      	movs	r2, #1
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fac3 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d1      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2221      	movs	r2, #33	; 0x21
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002974:	88f8      	ldrh	r0, [r7, #6]
 8002976:	893a      	ldrh	r2, [r7, #8]
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4603      	mov	r3, r0
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9d3 	bl	8002d30 <I2C_RequestMemoryWrite>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a9      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d90e      	bls.n	80029c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc3d 	bl	800323c <I2C_TransferConfig>
 80029c2:	e00f      	b.n	80029e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	8979      	ldrh	r1, [r7, #10]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fc2c 	bl	800323c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fabc 	bl	8002f66 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07b      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d130      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fa3f 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04d      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2bff      	cmp	r3, #255	; 0xff
 8002a5c:	d90e      	bls.n	8002a7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fbe1 	bl	800323c <I2C_TransferConfig>
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fbd0 	bl	800323c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d19e      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 faa2 	bl	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01a      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_I2C_Mem_Write+0x224>)
 8002ace:	400b      	ands	r3, r1
 8002ad0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fe00e800 	.word	0xfe00e800

08002afc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80fd 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x34>
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0f1      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x4e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0ea      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b52:	f7ff fb2b 	bl	80021ac <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f9af 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d5      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2222      	movs	r2, #34	; 0x22
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b9c:	88f8      	ldrh	r0, [r7, #6]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f913 	bl	8002dd8 <I2C_RequestMemoryRead>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ad      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d90e      	bls.n	8002bec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	8979      	ldrh	r1, [r7, #10]
 8002bdc:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fb29 	bl	800323c <I2C_TransferConfig>
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fb18 	bl	800323c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	2200      	movs	r2, #0
 8002c14:	2104      	movs	r1, #4
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f956 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07c      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d034      	beq.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d130      	bne.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f927 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04d      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	d90e      	bls.n	8002cac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	8979      	ldrh	r1, [r7, #10]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fac9 	bl	800323c <I2C_TransferConfig>
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fab8 	bl	800323c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d19a      	bne.n	8002c0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f98a 	bl	8002ff4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01a      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_I2C_Mem_Read+0x230>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	80002400 	.word	0x80002400
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <I2C_RequestMemoryWrite+0xa4>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa6f 	bl	800323c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f8ff 	bl	8002f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02c      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28
 8002d82:	e015      	b.n	8002db0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	69b9      	ldr	r1, [r7, #24]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8e5 	bl	8002f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e012      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f884 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	80002000 	.word	0x80002000

08002dd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <I2C_RequestMemoryRead+0xa4>)
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa1c 	bl	800323c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8ac 	bl	8002f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02c      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d105      	bne.n	8002e2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
 8002e28:	e015      	b.n	8002e56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f892 	bl	8002f66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e012      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f831 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	80002000 	.word	0x80002000

08002e80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d103      	bne.n	8002e9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e031      	b.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d02d      	beq.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7ff f963 	bl	80021ac <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d122      	bne.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d113      	bne.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d0be      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f72:	e033      	b.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f87f 	bl	800307c <I2C_IsErrorOccurred>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e031      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d025      	beq.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7ff f90c 	bl	80021ac <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11a      	bne.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d013      	beq.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d1c4      	bne.n	8002f74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003000:	e02f      	b.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f838 	bl	800307c <I2C_IsErrorOccurred>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7ff f8c9 	bl	80021ac <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11a      	bne.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d013      	beq.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d1c8      	bne.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d068      	beq.n	800317a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2210      	movs	r2, #16
 80030ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030b0:	e049      	b.n	8003146 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d045      	beq.n	8003146 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7ff f877 	bl	80021ac <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_IsErrorOccurred+0x54>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13a      	bne.n	8003146 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d121      	bne.n	8003138 <I2C_IsErrorOccurred+0xbc>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fa:	d01d      	beq.n	8003138 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d01a      	beq.n	8003138 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003110:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003112:	f7ff f84b 	bl	80021ac <HAL_GetTick>
 8003116:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003118:	e00e      	b.n	8003138 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800311a:	f7ff f847 	bl	80021ac <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b19      	cmp	r3, #25
 8003126:	d907      	bls.n	8003138 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f043 0320 	orr.w	r3, r3, #32
 800312e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003136:	e006      	b.n	8003146 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b20      	cmp	r3, #32
 8003144:	d1e9      	bne.n	800311a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d003      	beq.n	800315c <I2C_IsErrorOccurred+0xe0>
 8003154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0aa      	beq.n	80030b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2220      	movs	r2, #32
 800316a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01c      	beq.n	800322a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fe45 	bl	8002e80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <I2C_IsErrorOccurred+0x1bc>)
 8003202:	400b      	ands	r3, r1
 8003204:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800322e:	4618      	mov	r0, r3
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	fe00e800 	.word	0xfe00e800

0800323c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	4613      	mov	r3, r2
 800324c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003254:	7a7b      	ldrb	r3, [r7, #9]
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800325c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	4313      	orrs	r3, r2
 8003266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800326a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	0d5b      	lsrs	r3, r3, #21
 8003276:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <I2C_TransferConfig+0x60>)
 800327c:	430b      	orrs	r3, r1
 800327e:	43db      	mvns	r3, r3
 8003280:	ea02 0103 	and.w	r1, r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	03ff63ff 	.word	0x03ff63ff

080032a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d138      	bne.n	8003328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e032      	b.n	800332a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b20      	cmp	r3, #32
 800334a:	d139      	bne.n	80033c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003356:	2302      	movs	r3, #2
 8003358:	e033      	b.n	80033c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2224      	movs	r2, #36	; 0x24
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003388:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40007000 	.word	0x40007000

080033ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fa:	d130      	bne.n	800345e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d038      	beq.n	800347c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2232      	movs	r2, #50	; 0x32
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003430:	e002      	b.n	8003438 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d102      	bne.n	800344c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f2      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	d110      	bne.n	800347c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e00f      	b.n	800347e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d007      	beq.n	800347c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40007000 	.word	0x40007000
 8003490:	20000000 	.word	0x20000000
 8003494:	431bde83 	.word	0x431bde83

08003498 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e3ca      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b97      	ldr	r3, [pc, #604]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b94      	ldr	r3, [pc, #592]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80e4 	beq.w	8003694 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4a>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f040 808b 	bne.w	80035f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 8087 	bne.w	80035f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034e2:	4b89      	ldr	r3, [pc, #548]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e3a2      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	4b82      	ldr	r3, [pc, #520]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <HAL_RCC_OscConfig+0x7c>
 800350a:	4b7f      	ldr	r3, [pc, #508]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003512:	e005      	b.n	8003520 <HAL_RCC_OscConfig+0x88>
 8003514:	4b7c      	ldr	r3, [pc, #496]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003520:	4293      	cmp	r3, r2
 8003522:	d223      	bcs.n	800356c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fd55 	bl	8003fd8 <RCC_SetFlashLatencyFromMSIRange>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e383      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003538:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a72      	ldr	r2, [pc, #456]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b70      	ldr	r3, [pc, #448]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	496d      	ldr	r1, [pc, #436]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	4968      	ldr	r1, [pc, #416]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
 800356a:	e025      	b.n	80035b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a65      	ldr	r2, [pc, #404]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4960      	ldr	r1, [pc, #384]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	495b      	ldr	r1, [pc, #364]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd15 	bl	8003fd8 <RCC_SetFlashLatencyFromMSIRange>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e343      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b8:	f000 fc4a 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b52      	ldr	r3, [pc, #328]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	4950      	ldr	r1, [pc, #320]	; (800370c <HAL_RCC_OscConfig+0x274>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <HAL_RCC_OscConfig+0x278>)
 80035d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_RCC_OscConfig+0x27c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fd95 	bl	800210c <HAL_InitTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d052      	beq.n	8003692 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	e327      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d032      	beq.n	800365e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003604:	f7fe fdd2 	bl	80021ac <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800360c:	f7fe fdce 	bl	80021ac <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e310      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800362a:	4b37      	ldr	r3, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a36      	ldr	r2, [pc, #216]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4931      	ldr	r1, [pc, #196]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	492c      	ldr	r1, [pc, #176]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
 800365c:	e01a      	b.n	8003694 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800366a:	f7fe fd9f 	bl	80021ac <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003672:	f7fe fd9b 	bl	80021ac <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e2dd      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x1da>
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003692:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d074      	beq.n	800378a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x21a>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d10e      	bne.n	80036ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d10b      	bne.n	80036ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d064      	beq.n	8003788 <HAL_RCC_OscConfig+0x2f0>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d160      	bne.n	8003788 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e2ba      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x24a>
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e026      	b.n	8003730 <HAL_RCC_OscConfig+0x298>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ea:	d115      	bne.n	8003718 <HAL_RCC_OscConfig+0x280>
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a05      	ldr	r2, [pc, #20]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a02      	ldr	r2, [pc, #8]	; (8003708 <HAL_RCC_OscConfig+0x270>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x298>
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	08005fdc 	.word	0x08005fdc
 8003710:	20000000 	.word	0x20000000
 8003714:	20000004 	.word	0x20000004
 8003718:	4ba0      	ldr	r3, [pc, #640]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a9f      	ldr	r2, [pc, #636]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b9d      	ldr	r3, [pc, #628]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a9c      	ldr	r2, [pc, #624]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe fd38 	bl	80021ac <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fd34 	bl	80021ac <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e276      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003752:	4b92      	ldr	r3, [pc, #584]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x2a8>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe fd24 	bl	80021ac <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fe fd20 	bl	80021ac <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	; 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e262      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800377a:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x2d0>
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d060      	beq.n	8003858 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_OscConfig+0x310>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d119      	bne.n	80037d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d116      	bne.n	80037d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a8:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_OscConfig+0x328>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e23f      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	4973      	ldr	r1, [pc, #460]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d4:	e040      	b.n	8003858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d023      	beq.n	8003826 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6e      	ldr	r2, [pc, #440]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80037e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe fcdf 	bl	80021ac <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fe fcdb 	bl	80021ac <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e21d      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003804:	4b65      	ldr	r3, [pc, #404]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b62      	ldr	r3, [pc, #392]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	495f      	ldr	r1, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	e018      	b.n	8003858 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800382c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe fcbb 	bl	80021ac <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383a:	f7fe fcb7 	bl	80021ac <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1f9      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d03c      	beq.n	80038de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01c      	beq.n	80038a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	4a4a      	ldr	r2, [pc, #296]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe fc96 	bl	80021ac <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe fc92 	bl	80021ac <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1d4      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <HAL_RCC_OscConfig+0x3ec>
 80038a4:	e01b      	b.n	80038de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe fc79 	bl	80021ac <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038be:	f7fe fc75 	bl	80021ac <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1b7      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80038d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ef      	bne.n	80038be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80a6 	beq.w	8003a38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10d      	bne.n	8003918 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x504>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003906:	6593      	str	r3, [r2, #88]	; 0x58
 8003908:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003914:	2301      	movs	r3, #1
 8003916:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <HAL_RCC_OscConfig+0x508>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d118      	bne.n	8003956 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_RCC_OscConfig+0x508>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x508>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003930:	f7fe fc3c 	bl	80021ac <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fe fc38 	bl	80021ac <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e17a      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCC_OscConfig+0x508>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d108      	bne.n	8003970 <HAL_RCC_OscConfig+0x4d8>
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	4a0d      	ldr	r2, [pc, #52]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800396e:	e029      	b.n	80039c4 <HAL_RCC_OscConfig+0x52c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d115      	bne.n	80039a4 <HAL_RCC_OscConfig+0x50c>
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a07      	ldr	r2, [pc, #28]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_RCC_OscConfig+0x504>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	4a03      	ldr	r2, [pc, #12]	; (800399c <HAL_RCC_OscConfig+0x504>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x52c>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
 80039a4:	4b9c      	ldr	r3, [pc, #624]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a9b      	ldr	r2, [pc, #620]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b4:	4b98      	ldr	r3, [pc, #608]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	4a97      	ldr	r2, [pc, #604]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d016      	beq.n	80039fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe fbee 	bl	80021ac <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fe fbea 	bl	80021ac <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e12a      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ea:	4b8b      	ldr	r3, [pc, #556]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ed      	beq.n	80039d4 <HAL_RCC_OscConfig+0x53c>
 80039f8:	e015      	b.n	8003a26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe fbd7 	bl	80021ac <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fe fbd3 	bl	80021ac <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e113      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a18:	4b7f      	ldr	r3, [pc, #508]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ed      	bne.n	8003a02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a26:	7ffb      	ldrb	r3, [r7, #31]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a79      	ldr	r2, [pc, #484]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80fe 	beq.w	8003c3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	f040 80d0 	bne.w	8003bec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a4c:	4b72      	ldr	r3, [pc, #456]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f003 0203 	and.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d130      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d127      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11f      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a8c:	2a07      	cmp	r2, #7
 8003a8e:	bf14      	ite	ne
 8003a90:	2201      	movne	r2, #1
 8003a92:	2200      	moveq	r2, #0
 8003a94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d113      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	3b01      	subs	r3, #1
 8003abc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d06e      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	d069      	beq.n	8003b9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0ad      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af0:	f7fe fb5c 	bl	80021ac <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe fb58 	bl	80021ac <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e09a      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0a:	4b43      	ldr	r3, [pc, #268]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b16:	4b40      	ldr	r3, [pc, #256]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <HAL_RCC_OscConfig+0x784>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b26:	3a01      	subs	r2, #1
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b30:	0212      	lsls	r2, r2, #8
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b38:	0852      	lsrs	r2, r2, #1
 8003b3a:	3a01      	subs	r2, #1
 8003b3c:	0552      	lsls	r2, r2, #21
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b44:	0852      	lsrs	r2, r2, #1
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0652      	lsls	r2, r2, #25
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b50:	0912      	lsrs	r2, r2, #4
 8003b52:	0452      	lsls	r2, r2, #17
 8003b54:	430a      	orrs	r2, r1
 8003b56:	4930      	ldr	r1, [pc, #192]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b74:	f7fe fb1a 	bl	80021ac <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe fb16 	bl	80021ac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e058      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b9a:	e050      	b.n	8003c3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e04f      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d148      	bne.n	8003c3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb8:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bc4:	f7fe faf2 	bl	80021ac <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe faee 	bl	80021ac <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e030      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x734>
 8003bea:	e028      	b.n	8003c3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d023      	beq.n	8003c3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <HAL_RCC_OscConfig+0x780>)
 8003bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fad5 	bl	80021ac <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	e00c      	b.n	8003c20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fad1 	bl	80021ac <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d905      	bls.n	8003c20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e013      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_RCC_OscConfig+0x7b0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ec      	bne.n	8003c06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x7b0>)
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	4905      	ldr	r1, [pc, #20]	; (8003c48 <HAL_RCC_OscConfig+0x7b0>)
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_OscConfig+0x7b4>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60cb      	str	r3, [r1, #12]
 8003c38:	e001      	b.n	8003c3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	feeefffc 	.word	0xfeeefffc

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0e7      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d910      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b72      	ldr	r3, [pc, #456]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	4970      	ldr	r1, [pc, #448]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b6e      	ldr	r3, [pc, #440]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0cf      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	4b66      	ldr	r3, [pc, #408]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d908      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4960      	ldr	r1, [pc, #384]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d04c      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d121      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0a6      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cee:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d115      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e09a      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d06:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e08e      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d16:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e086      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d26:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0203 	bic.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4943      	ldr	r1, [pc, #268]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d38:	f7fe fa38 	bl	80021ac <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7fe fa34 	bl	80021ac <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e06e      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 020c 	and.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1eb      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d208      	bcs.n	8003d96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	492b      	ldr	r1, [pc, #172]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d210      	bcs.n	8003dc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4923      	ldr	r1, [pc, #140]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_ClockConfig+0x1ec>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e036      	b.n	8003e34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4918      	ldr	r1, [pc, #96]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4910      	ldr	r1, [pc, #64]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e04:	f000 f824 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	490b      	ldr	r1, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1f4>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003e22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1fc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe f96f 	bl	800210c <HAL_InitTick>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e32:	7afb      	ldrb	r3, [r7, #11]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40022000 	.word	0x40022000
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08005fdc 	.word	0x08005fdc
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	20000004 	.word	0x20000004

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e68:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d11e      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e84:	4b34      	ldr	r3, [pc, #208]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e005      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ed4:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d134      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d003      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0xac>
 8003ef4:	e005      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ef8:	617b      	str	r3, [r7, #20]
      break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003efe:	617b      	str	r3, [r7, #20]
      break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	617b      	str	r3, [r7, #20]
      break;
 8003f06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	3301      	adds	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	fb03 f202 	mul.w	r2, r3, r2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	0e5b      	lsrs	r3, r3, #25
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f48:	69bb      	ldr	r3, [r7, #24]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3724      	adds	r7, #36	; 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08005ff4 	.word	0x08005ff4
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	007a1200 	.word	0x007a1200

08003f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000000 	.word	0x20000000

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f84:	f7ff fff0 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08005fec 	.word	0x08005fec

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fb0:	f7ff ffda 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0adb      	lsrs	r3, r3, #11
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4904      	ldr	r1, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08005fec 	.word	0x08005fec

08003fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ff0:	f7ff f9ee 	bl	80033d0 <HAL_PWREx_GetVoltageRange>
 8003ff4:	6178      	str	r0, [r7, #20]
 8003ff6:	e014      	b.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	4a24      	ldr	r2, [pc, #144]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004002:	6593      	str	r3, [r2, #88]	; 0x58
 8004004:	4b22      	ldr	r3, [pc, #136]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004010:	f7ff f9de 	bl	80033d0 <HAL_PWREx_GetVoltageRange>
 8004014:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d10b      	bne.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d919      	bls.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2ba0      	cmp	r3, #160	; 0xa0
 8004034:	d902      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004036:	2302      	movs	r3, #2
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e013      	b.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800403c:	2301      	movs	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e010      	b.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d902      	bls.n	800404e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004048:	2303      	movs	r3, #3
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e00a      	b.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b80      	cmp	r3, #128	; 0x80
 8004052:	d102      	bne.n	800405a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004054:	2302      	movs	r3, #2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	e004      	b.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d101      	bne.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004060:	2301      	movs	r3, #1
 8004062:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 0207 	bic.w	r2, r3, #7
 800406c:	4909      	ldr	r1, [pc, #36]	; (8004094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	40022000 	.word	0x40022000

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a0:	2300      	movs	r3, #0
 80040a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a4:	2300      	movs	r3, #0
 80040a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d041      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040bc:	d02a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040c2:	d824      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c8:	d008      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ce:	d81e      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d8:	d010      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040da:	e018      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040dc:	4b86      	ldr	r3, [pc, #536]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a85      	ldr	r2, [pc, #532]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e8:	e015      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fabb 	bl	800466c <RCCEx_PLLSAI1_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fa:	e00c      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3320      	adds	r3, #32
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fba6 	bl	8004854 <RCCEx_PLLSAI2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	74fb      	strb	r3, [r7, #19]
      break;
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411c:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412a:	4973      	ldr	r1, [pc, #460]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d041      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004148:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800414c:	d02a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800414e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004152:	d824      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800415a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800415e:	d81e      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004168:	d010      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800416a:	e018      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800416c:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a61      	ldr	r2, [pc, #388]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004178:	e015      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fa73 	bl	800466c <RCCEx_PLLSAI1_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800418a:	e00c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3320      	adds	r3, #32
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fb5e 	bl	8004854 <RCCEx_PLLSAI2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	74fb      	strb	r3, [r7, #19]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ac:	4b52      	ldr	r3, [pc, #328]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ba:	494f      	ldr	r1, [pc, #316]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041c2:	e001      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a0 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f0:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6593      	str	r3, [r2, #88]	; 0x58
 80041fc:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004208:	2301      	movs	r3, #1
 800420a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004218:	f7fd ffc8 	bl	80021ac <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800421e:	e009      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fd ffc4 	bl	80021ac <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d902      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	74fb      	strb	r3, [r7, #19]
        break;
 8004232:	e005      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d15c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01f      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d019      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd ff83 	bl	80021ac <HAL_GetTick>
 80042a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a8:	e00b      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd ff7f 	bl	80021ac <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d902      	bls.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	74fb      	strb	r3, [r7, #19]
            break;
 80042c0:	e006      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ec      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ee:	e009      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004304:	7c7b      	ldrb	r3, [r7, #17]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b9e      	ldr	r3, [pc, #632]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	4a9d      	ldr	r2, [pc, #628]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004322:	4b98      	ldr	r3, [pc, #608]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	4994      	ldr	r1, [pc, #592]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004344:	4b8f      	ldr	r3, [pc, #572]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	498c      	ldr	r1, [pc, #560]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004366:	4b87      	ldr	r3, [pc, #540]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	4983      	ldr	r1, [pc, #524]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004388:	4b7e      	ldr	r3, [pc, #504]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	497b      	ldr	r1, [pc, #492]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b8:	4972      	ldr	r1, [pc, #456]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043cc:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	496a      	ldr	r1, [pc, #424]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ee:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	4961      	ldr	r1, [pc, #388]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004410:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	4959      	ldr	r1, [pc, #356]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	4950      	ldr	r1, [pc, #320]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	4948      	ldr	r1, [pc, #288]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004476:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	493f      	ldr	r1, [pc, #252]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d028      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004498:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	4937      	ldr	r1, [pc, #220]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a31      	ldr	r2, [pc, #196]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c2:	60d3      	str	r3, [r2, #12]
 80044c4:	e011      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044ce:	d10c      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f8c8 	bl	800466c <RCCEx_PLLSAI1_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d028      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	491f      	ldr	r1, [pc, #124]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004514:	d106      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004520:	60d3      	str	r3, [r2, #12]
 8004522:	e011      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452c:	d10c      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f899 	bl	800466c <RCCEx_PLLSAI1_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800453e:	7cfb      	ldrb	r3, [r7, #19]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004572:	d109      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a02      	ldr	r2, [pc, #8]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
 8004580:	e014      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f867 	bl	800466c <RCCEx_PLLSAI1_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02f      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b8:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c6:	4928      	ldr	r1, [pc, #160]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f844 	bl	800466c <RCCEx_PLLSAI1_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d014      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ee:	7cfb      	ldrb	r3, [r7, #19]
 80045f0:	74bb      	strb	r3, [r7, #18]
 80045f2:	e011      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045fc:	d10c      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3320      	adds	r3, #32
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f925 	bl	8004854 <RCCEx_PLLSAI2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004614:	7cfb      	ldrb	r3, [r7, #19]
 8004616:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004632:	490d      	ldr	r1, [pc, #52]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4904      	ldr	r1, [pc, #16]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800465e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000

0800466c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800467a:	4b75      	ldr	r3, [pc, #468]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004686:	4b72      	ldr	r3, [pc, #456]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d10d      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
       ||
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800469e:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
       ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d047      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e044      	b.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d018      	beq.n	80046f2 <RCCEx_PLLSAI1_Config+0x86>
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d825      	bhi.n	8004710 <RCCEx_PLLSAI1_Config+0xa4>
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d002      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0x62>
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d009      	beq.n	80046e0 <RCCEx_PLLSAI1_Config+0x74>
 80046cc:	e020      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ce:	4b60      	ldr	r3, [pc, #384]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11d      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046de:	e01a      	b.n	8004716 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046e0:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d116      	bne.n	800471a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f0:	e013      	b.n	800471a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046f2:	4b57      	ldr	r3, [pc, #348]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046fe:	4b54      	ldr	r3, [pc, #336]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800470e:	e006      	b.n	800471e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      break;
 8004714:	e004      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800471e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	430b      	orrs	r3, r1
 800473c:	4944      	ldr	r1, [pc, #272]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d17d      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004748:	4b41      	ldr	r3, [pc, #260]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a40      	ldr	r2, [pc, #256]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004754:	f7fd fd2a 	bl	80021ac <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800475a:	e009      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800475c:	f7fd fd26 	bl	80021ac <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	73fb      	strb	r3, [r7, #15]
        break;
 800476e:	e005      	b.n	800477c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004770:	4b37      	ldr	r3, [pc, #220]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ef      	bne.n	800475c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d160      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d111      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68d2      	ldr	r2, [r2, #12]
 800479e:	0912      	lsrs	r2, r2, #4
 80047a0:	0452      	lsls	r2, r2, #17
 80047a2:	430a      	orrs	r2, r1
 80047a4:	492a      	ldr	r1, [pc, #168]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	610b      	str	r3, [r1, #16]
 80047aa:	e027      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d112      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b2:	4b27      	ldr	r3, [pc, #156]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6892      	ldr	r2, [r2, #8]
 80047c2:	0211      	lsls	r1, r2, #8
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6912      	ldr	r2, [r2, #16]
 80047c8:	0852      	lsrs	r2, r2, #1
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0552      	lsls	r2, r2, #21
 80047ce:	430a      	orrs	r2, r1
 80047d0:	491f      	ldr	r1, [pc, #124]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]
 80047d6:	e011      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0211      	lsls	r1, r2, #8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6952      	ldr	r2, [r2, #20]
 80047ee:	0852      	lsrs	r2, r2, #1
 80047f0:	3a01      	subs	r2, #1
 80047f2:	0652      	lsls	r2, r2, #25
 80047f4:	430a      	orrs	r2, r1
 80047f6:	4916      	ldr	r1, [pc, #88]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fd fcd0 	bl	80021ac <HAL_GetTick>
 800480c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800480e:	e009      	b.n	8004824 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004810:	f7fd fccc 	bl	80021ac <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d902      	bls.n	8004824 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	73fb      	strb	r3, [r7, #15]
          break;
 8004822:	e005      	b.n	8004830 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ef      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	4904      	ldr	r1, [pc, #16]	; (8004850 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000

08004854 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004862:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d018      	beq.n	80048a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800486e:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0203 	and.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d10d      	bne.n	800489a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
       ||
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004886:	4b61      	ldr	r3, [pc, #388]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
       ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d047      	beq.n	800492a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e044      	b.n	800492a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d018      	beq.n	80048da <RCCEx_PLLSAI2_Config+0x86>
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d825      	bhi.n	80048f8 <RCCEx_PLLSAI2_Config+0xa4>
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d002      	beq.n	80048b6 <RCCEx_PLLSAI2_Config+0x62>
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d009      	beq.n	80048c8 <RCCEx_PLLSAI2_Config+0x74>
 80048b4:	e020      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048b6:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11d      	bne.n	80048fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c6:	e01a      	b.n	80048fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048c8:	4b50      	ldr	r3, [pc, #320]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d8:	e013      	b.n	8004902 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048da:	4b4c      	ldr	r3, [pc, #304]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048e6:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048f6:	e006      	b.n	8004906 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e004      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004906:	bf00      	nop
    }

    if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	430b      	orrs	r3, r1
 8004924:	4939      	ldr	r1, [pc, #228]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	4313      	orrs	r3, r2
 8004928:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d167      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493c:	f7fd fc36 	bl	80021ac <HAL_GetTick>
 8004940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004942:	e009      	b.n	8004958 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004944:	f7fd fc32 	bl	80021ac <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d902      	bls.n	8004958 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	73fb      	strb	r3, [r7, #15]
        break;
 8004956:	e005      	b.n	8004964 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004958:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ef      	bne.n	8004944 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d14a      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d111      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004970:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	0211      	lsls	r1, r2, #8
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68d2      	ldr	r2, [r2, #12]
 8004986:	0912      	lsrs	r2, r2, #4
 8004988:	0452      	lsls	r2, r2, #17
 800498a:	430a      	orrs	r2, r1
 800498c:	491f      	ldr	r1, [pc, #124]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 800498e:	4313      	orrs	r3, r2
 8004990:	614b      	str	r3, [r1, #20]
 8004992:	e011      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004994:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800499c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6892      	ldr	r2, [r2, #8]
 80049a4:	0211      	lsls	r1, r2, #8
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6912      	ldr	r2, [r2, #16]
 80049aa:	0852      	lsrs	r2, r2, #1
 80049ac:	3a01      	subs	r2, #1
 80049ae:	0652      	lsls	r2, r2, #25
 80049b0:	430a      	orrs	r2, r1
 80049b2:	4916      	ldr	r1, [pc, #88]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049b8:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fd fbf2 	bl	80021ac <HAL_GetTick>
 80049c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ca:	e009      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049cc:	f7fd fbee 	bl	80021ac <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d902      	bls.n	80049e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	73fb      	strb	r3, [r7, #15]
          break;
 80049de:	e005      	b.n	80049ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ef      	beq.n	80049cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4904      	ldr	r1, [pc, #16]	; (8004a0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e040      	b.n	8004aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd fa52 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fb6a 	bl	8005130 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8af 	bl	8004bc0 <UART_SetConfig>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e01b      	b.n	8004aa4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fbe9 	bl	8005274 <UART_CheckIdleState>
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d178      	bne.n	8004bb6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Transmit+0x24>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e071      	b.n	8004bb8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2221      	movs	r2, #33	; 0x21
 8004ae0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae2:	f7fd fb63 	bl	80021ac <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d108      	bne.n	8004b14 <HAL_UART_Transmit+0x68>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e003      	b.n	8004b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b1c:	e030      	b.n	8004b80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fc4b 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03c      	b.n	8004bb8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b50:	b292      	uxth	r2, r2
 8004b52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3302      	adds	r3, #2
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e008      	b.n	8004b6e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b292      	uxth	r2, r2
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1c8      	bne.n	8004b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fc14 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e005      	b.n	8004bb8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004bb6:	2302      	movs	r3, #2
  }
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b08a      	sub	sp, #40	; 0x28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4ba4      	ldr	r3, [pc, #656]	; (8004e80 <UART_SetConfig+0x2c0>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a99      	ldr	r2, [pc, #612]	; (8004e84 <UART_SetConfig+0x2c4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a90      	ldr	r2, [pc, #576]	; (8004e88 <UART_SetConfig+0x2c8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d126      	bne.n	8004c98 <UART_SetConfig+0xd8>
 8004c4a:	4b90      	ldr	r3, [pc, #576]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d81b      	bhi.n	8004c90 <UART_SetConfig+0xd0>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0xa0>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e116      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e112      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004c80:	2304      	movs	r3, #4
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e10e      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e10a      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e106      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7c      	ldr	r2, [pc, #496]	; (8004e90 <UART_SetConfig+0x2d0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d138      	bne.n	8004d14 <UART_SetConfig+0x154>
 8004ca2:	4b7a      	ldr	r3, [pc, #488]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d82d      	bhi.n	8004d0c <UART_SetConfig+0x14c>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0xf8>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004d0d 	.word	0x08004d0d
 8004cc0:	08004d0d 	.word	0x08004d0d
 8004cc4:	08004d0d 	.word	0x08004d0d
 8004cc8:	08004cfd 	.word	0x08004cfd
 8004ccc:	08004d0d 	.word	0x08004d0d
 8004cd0:	08004d0d 	.word	0x08004d0d
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004cf5 	.word	0x08004cf5
 8004cdc:	08004d0d 	.word	0x08004d0d
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d0d 	.word	0x08004d0d
 8004ce8:	08004d05 	.word	0x08004d05
 8004cec:	2300      	movs	r3, #0
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e0d8      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e0d4      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e0d0      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d04:	2308      	movs	r3, #8
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e0cc      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e0c8      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5e      	ldr	r2, [pc, #376]	; (8004e94 <UART_SetConfig+0x2d4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d125      	bne.n	8004d6a <UART_SetConfig+0x1aa>
 8004d1e:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d016      	beq.n	8004d5a <UART_SetConfig+0x19a>
 8004d2c:	2b30      	cmp	r3, #48	; 0x30
 8004d2e:	d818      	bhi.n	8004d62 <UART_SetConfig+0x1a2>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d00a      	beq.n	8004d4a <UART_SetConfig+0x18a>
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d814      	bhi.n	8004d62 <UART_SetConfig+0x1a2>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <UART_SetConfig+0x182>
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d008      	beq.n	8004d52 <UART_SetConfig+0x192>
 8004d40:	e00f      	b.n	8004d62 <UART_SetConfig+0x1a2>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d48:	e0ad      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d50:	e0a9      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d52:	2304      	movs	r3, #4
 8004d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d58:	e0a5      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d60:	e0a1      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d62:	2310      	movs	r3, #16
 8004d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d68:	e09d      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a4a      	ldr	r2, [pc, #296]	; (8004e98 <UART_SetConfig+0x2d8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d125      	bne.n	8004dc0 <UART_SetConfig+0x200>
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d80:	d016      	beq.n	8004db0 <UART_SetConfig+0x1f0>
 8004d82:	2bc0      	cmp	r3, #192	; 0xc0
 8004d84:	d818      	bhi.n	8004db8 <UART_SetConfig+0x1f8>
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d00a      	beq.n	8004da0 <UART_SetConfig+0x1e0>
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d814      	bhi.n	8004db8 <UART_SetConfig+0x1f8>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <UART_SetConfig+0x1d8>
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x1e8>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x1f8>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e082      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e07e      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e07a      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db6:	e076      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbe:	e072      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a35      	ldr	r2, [pc, #212]	; (8004e9c <UART_SetConfig+0x2dc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d12a      	bne.n	8004e20 <UART_SetConfig+0x260>
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0x250>
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0x258>
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de4:	d00c      	beq.n	8004e00 <UART_SetConfig+0x240>
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d815      	bhi.n	8004e18 <UART_SetConfig+0x258>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <UART_SetConfig+0x238>
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df4:	d008      	beq.n	8004e08 <UART_SetConfig+0x248>
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x258>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e052      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e04e      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e04a      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e046      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e042      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <UART_SetConfig+0x2c4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d13a      	bne.n	8004ea0 <UART_SetConfig+0x2e0>
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <UART_SetConfig+0x2cc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e38:	d01a      	beq.n	8004e70 <UART_SetConfig+0x2b0>
 8004e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3e:	d81b      	bhi.n	8004e78 <UART_SetConfig+0x2b8>
 8004e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e44:	d00c      	beq.n	8004e60 <UART_SetConfig+0x2a0>
 8004e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4a:	d815      	bhi.n	8004e78 <UART_SetConfig+0x2b8>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <UART_SetConfig+0x298>
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d008      	beq.n	8004e68 <UART_SetConfig+0x2a8>
 8004e56:	e00f      	b.n	8004e78 <UART_SetConfig+0x2b8>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e022      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e01e      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e01a      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e016      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e012      	b.n	8004ea6 <UART_SetConfig+0x2e6>
 8004e80:	efff69f3 	.word	0xefff69f3
 8004e84:	40008000 	.word	0x40008000
 8004e88:	40013800 	.word	0x40013800
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40004400 	.word	0x40004400
 8004e94:	40004800 	.word	0x40004800
 8004e98:	40004c00 	.word	0x40004c00
 8004e9c:	40005000 	.word	0x40005000
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a9f      	ldr	r2, [pc, #636]	; (8005128 <UART_SetConfig+0x568>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d17a      	bne.n	8004fa6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d824      	bhi.n	8004f02 <UART_SetConfig+0x342>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x300>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004ef3 	.word	0x08004ef3
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f03 	.word	0x08004f03
 8004ee0:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7ff f84c 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	61f8      	str	r0, [r7, #28]
        break;
 8004eea:	e010      	b.n	8004f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b8f      	ldr	r3, [pc, #572]	; (800512c <UART_SetConfig+0x56c>)
 8004eee:	61fb      	str	r3, [r7, #28]
        break;
 8004ef0:	e00d      	b.n	8004f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fe ffad 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8004ef6:	61f8      	str	r0, [r7, #28]
        break;
 8004ef8:	e009      	b.n	8004f0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e005      	b.n	8004f0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80fb 	beq.w	800510c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d305      	bcc.n	8004f32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d903      	bls.n	8004f3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f38:	e0e8      	b.n	800510c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	461c      	mov	r4, r3
 8004f40:	4615      	mov	r5, r2
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	022b      	lsls	r3, r5, #8
 8004f4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f50:	0222      	lsls	r2, r4, #8
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	6849      	ldr	r1, [r1, #4]
 8004f56:	0849      	lsrs	r1, r1, #1
 8004f58:	2000      	movs	r0, #0
 8004f5a:	4688      	mov	r8, r1
 8004f5c:	4681      	mov	r9, r0
 8004f5e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f62:	eb43 0b09 	adc.w	fp, r3, r9
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f74:	4650      	mov	r0, sl
 8004f76:	4659      	mov	r1, fp
 8004f78:	f7fb f982 	bl	8000280 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8a:	d308      	bcc.n	8004f9e <UART_SetConfig+0x3de>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f92:	d204      	bcs.n	8004f9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e0b6      	b.n	800510c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fa4:	e0b2      	b.n	800510c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fae:	d15e      	bne.n	800506e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d828      	bhi.n	800500a <UART_SetConfig+0x44a>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x400>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	0800500b 	.word	0x0800500b
 8004fd0:	08004ffb 	.word	0x08004ffb
 8004fd4:	0800500b 	.word	0x0800500b
 8004fd8:	0800500b 	.word	0x0800500b
 8004fdc:	0800500b 	.word	0x0800500b
 8004fe0:	08005003 	.word	0x08005003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe4:	f7fe ffcc 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8004fe8:	61f8      	str	r0, [r7, #28]
        break;
 8004fea:	e014      	b.n	8005016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fec:	f7fe ffde 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 8004ff0:	61f8      	str	r0, [r7, #28]
        break;
 8004ff2:	e010      	b.n	8005016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <UART_SetConfig+0x56c>)
 8004ff6:	61fb      	str	r3, [r7, #28]
        break;
 8004ff8:	e00d      	b.n	8005016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ffa:	f7fe ff29 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8004ffe:	61f8      	str	r0, [r7, #28]
        break;
 8005000:	e009      	b.n	8005016 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	61fb      	str	r3, [r7, #28]
        break;
 8005008:	e005      	b.n	8005016 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d077      	beq.n	800510c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005a      	lsls	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	441a      	add	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b0f      	cmp	r3, #15
 8005036:	d916      	bls.n	8005066 <UART_SetConfig+0x4a6>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503e:	d212      	bcs.n	8005066 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f023 030f 	bic.w	r3, r3, #15
 8005048:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	b29a      	uxth	r2, r3
 8005056:	8afb      	ldrh	r3, [r7, #22]
 8005058:	4313      	orrs	r3, r2
 800505a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	8afa      	ldrh	r2, [r7, #22]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	e052      	b.n	800510c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800506c:	e04e      	b.n	800510c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800506e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005072:	2b08      	cmp	r3, #8
 8005074:	d827      	bhi.n	80050c6 <UART_SetConfig+0x506>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0x4bc>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	080050c7 	.word	0x080050c7
 800508c:	080050b7 	.word	0x080050b7
 8005090:	080050c7 	.word	0x080050c7
 8005094:	080050c7 	.word	0x080050c7
 8005098:	080050c7 	.word	0x080050c7
 800509c:	080050bf 	.word	0x080050bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a0:	f7fe ff6e 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 80050a4:	61f8      	str	r0, [r7, #28]
        break;
 80050a6:	e014      	b.n	80050d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe ff80 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 80050ac:	61f8      	str	r0, [r7, #28]
        break;
 80050ae:	e010      	b.n	80050d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <UART_SetConfig+0x56c>)
 80050b2:	61fb      	str	r3, [r7, #28]
        break;
 80050b4:	e00d      	b.n	80050d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b6:	f7fe fecb 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 80050ba:	61f8      	str	r0, [r7, #28]
        break;
 80050bc:	e009      	b.n	80050d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c2:	61fb      	str	r3, [r7, #28]
        break;
 80050c4:	e005      	b.n	80050d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050d0:	bf00      	nop
    }

    if (pclk != 0U)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d019      	beq.n	800510c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	085a      	lsrs	r2, r3, #1
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	441a      	add	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b0f      	cmp	r3, #15
 80050f0:	d909      	bls.n	8005106 <UART_SetConfig+0x546>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f8:	d205      	bcs.n	8005106 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e002      	b.n	800510c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005118:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800511c:	4618      	mov	r0, r3
 800511e:	3728      	adds	r7, #40	; 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005126:	bf00      	nop
 8005128:	40008000 	.word	0x40008000
 800512c:	00f42400 	.word	0x00f42400

08005130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01a      	beq.n	8005246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522e:	d10a      	bne.n	8005246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b098      	sub	sp, #96	; 0x60
 8005278:	af02      	add	r7, sp, #8
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005284:	f7fc ff92 	bl	80021ac <HAL_GetTick>
 8005288:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b08      	cmp	r3, #8
 8005296:	d12e      	bne.n	80052f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	2200      	movs	r2, #0
 80052a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f88c 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d021      	beq.n	80052f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c6:	653b      	str	r3, [r7, #80]	; 0x50
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	647b      	str	r3, [r7, #68]	; 0x44
 80052d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e062      	b.n	80053bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d149      	bne.n	8005398 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f856 	bl	80053c4 <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03c      	beq.n	8005398 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	623b      	str	r3, [r7, #32]
   return(result);
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
 800533e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e6      	bne.n	800531e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3308      	adds	r3, #8
 8005356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005370:	61fa      	str	r2, [r7, #28]
 8005372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	69b9      	ldr	r1, [r7, #24]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	617b      	str	r3, [r7, #20]
   return(result);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e011      	b.n	80053bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3758      	adds	r7, #88	; 0x58
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d4:	e049      	b.n	800546a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d045      	beq.n	800546a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053de:	f7fc fee5 	bl	80021ac <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e048      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d031      	beq.n	800546a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d110      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2208      	movs	r2, #8
 800541a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f838 	bl	8005492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2208      	movs	r2, #8
 8005426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e029      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005444:	d111      	bne.n	800546a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f81e 	bl	8005492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e00f      	b.n	800548a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	429a      	cmp	r2, r3
 8005486:	d0a6      	beq.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005492:	b480      	push	{r7}
 8005494:	b095      	sub	sp, #84	; 0x54
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	61fb      	str	r3, [r7, #28]
   return(result);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005504:	2b01      	cmp	r3, #1
 8005506:	d118      	bne.n	800553a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	60bb      	str	r3, [r7, #8]
   return(result);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f023 0310 	bic.w	r3, r3, #16
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6979      	ldr	r1, [r7, #20]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	613b      	str	r3, [r7, #16]
   return(result);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e6      	bne.n	8005508 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800554e:	bf00      	nop
 8005550:	3754      	adds	r7, #84	; 0x54
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	b500      	push	{lr}
 8005560:	b09c      	sub	sp, #112	; 0x70
 8005562:	ab1d      	add	r3, sp, #116	; 0x74
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800556c:	4809      	ldr	r0, [pc, #36]	; (8005594 <siprintf+0x38>)
 800556e:	9107      	str	r1, [sp, #28]
 8005570:	9104      	str	r1, [sp, #16]
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	a902      	add	r1, sp, #8
 8005580:	f000 f992 	bl	80058a8 <_svfiprintf_r>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000058 	.word	0x20000058
 8005598:	ffff0208 	.word	0xffff0208

0800559c <memset>:
 800559c:	4402      	add	r2, r0
 800559e:	4603      	mov	r3, r0
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d100      	bne.n	80055a6 <memset+0xa>
 80055a4:	4770      	bx	lr
 80055a6:	f803 1b01 	strb.w	r1, [r3], #1
 80055aa:	e7f9      	b.n	80055a0 <memset+0x4>

080055ac <__errno>:
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <__errno+0x8>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000058 	.word	0x20000058

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	; (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	; (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	; (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 fc6a 	bl	8005ea4 <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	08006060 	.word	0x08006060
 80055f4:	08006060 	.word	0x08006060
 80055f8:	08006060 	.word	0x08006060
 80055fc:	08006064 	.word	0x08006064

08005600 <__retarget_lock_acquire_recursive>:
 8005600:	4770      	bx	lr

08005602 <__retarget_lock_release_recursive>:
 8005602:	4770      	bx	lr

08005604 <_free_r>:
 8005604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005606:	2900      	cmp	r1, #0
 8005608:	d044      	beq.n	8005694 <_free_r+0x90>
 800560a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800560e:	9001      	str	r0, [sp, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f1a1 0404 	sub.w	r4, r1, #4
 8005616:	bfb8      	it	lt
 8005618:	18e4      	addlt	r4, r4, r3
 800561a:	f000 f8df 	bl	80057dc <__malloc_lock>
 800561e:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <_free_r+0x94>)
 8005620:	9801      	ldr	r0, [sp, #4]
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	b933      	cbnz	r3, 8005634 <_free_r+0x30>
 8005626:	6063      	str	r3, [r4, #4]
 8005628:	6014      	str	r4, [r2, #0]
 800562a:	b003      	add	sp, #12
 800562c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005630:	f000 b8da 	b.w	80057e8 <__malloc_unlock>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d908      	bls.n	800564a <_free_r+0x46>
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	1961      	adds	r1, r4, r5
 800563c:	428b      	cmp	r3, r1
 800563e:	bf01      	itttt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	1949      	addeq	r1, r1, r5
 8005646:	6021      	streq	r1, [r4, #0]
 8005648:	e7ed      	b.n	8005626 <_free_r+0x22>
 800564a:	461a      	mov	r2, r3
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b10b      	cbz	r3, 8005654 <_free_r+0x50>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d9fa      	bls.n	800564a <_free_r+0x46>
 8005654:	6811      	ldr	r1, [r2, #0]
 8005656:	1855      	adds	r5, r2, r1
 8005658:	42a5      	cmp	r5, r4
 800565a:	d10b      	bne.n	8005674 <_free_r+0x70>
 800565c:	6824      	ldr	r4, [r4, #0]
 800565e:	4421      	add	r1, r4
 8005660:	1854      	adds	r4, r2, r1
 8005662:	42a3      	cmp	r3, r4
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	d1e0      	bne.n	800562a <_free_r+0x26>
 8005668:	681c      	ldr	r4, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	6053      	str	r3, [r2, #4]
 800566e:	440c      	add	r4, r1
 8005670:	6014      	str	r4, [r2, #0]
 8005672:	e7da      	b.n	800562a <_free_r+0x26>
 8005674:	d902      	bls.n	800567c <_free_r+0x78>
 8005676:	230c      	movs	r3, #12
 8005678:	6003      	str	r3, [r0, #0]
 800567a:	e7d6      	b.n	800562a <_free_r+0x26>
 800567c:	6825      	ldr	r5, [r4, #0]
 800567e:	1961      	adds	r1, r4, r5
 8005680:	428b      	cmp	r3, r1
 8005682:	bf04      	itt	eq
 8005684:	6819      	ldreq	r1, [r3, #0]
 8005686:	685b      	ldreq	r3, [r3, #4]
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	bf04      	itt	eq
 800568c:	1949      	addeq	r1, r1, r5
 800568e:	6021      	streq	r1, [r4, #0]
 8005690:	6054      	str	r4, [r2, #4]
 8005692:	e7ca      	b.n	800562a <_free_r+0x26>
 8005694:	b003      	add	sp, #12
 8005696:	bd30      	pop	{r4, r5, pc}
 8005698:	200017e8 	.word	0x200017e8

0800569c <sbrk_aligned>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	4e0e      	ldr	r6, [pc, #56]	; (80056d8 <sbrk_aligned+0x3c>)
 80056a0:	460c      	mov	r4, r1
 80056a2:	6831      	ldr	r1, [r6, #0]
 80056a4:	4605      	mov	r5, r0
 80056a6:	b911      	cbnz	r1, 80056ae <sbrk_aligned+0x12>
 80056a8:	f000 fba6 	bl	8005df8 <_sbrk_r>
 80056ac:	6030      	str	r0, [r6, #0]
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 fba1 	bl	8005df8 <_sbrk_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d00a      	beq.n	80056d0 <sbrk_aligned+0x34>
 80056ba:	1cc4      	adds	r4, r0, #3
 80056bc:	f024 0403 	bic.w	r4, r4, #3
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d007      	beq.n	80056d4 <sbrk_aligned+0x38>
 80056c4:	1a21      	subs	r1, r4, r0
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 fb96 	bl	8005df8 <_sbrk_r>
 80056cc:	3001      	adds	r0, #1
 80056ce:	d101      	bne.n	80056d4 <sbrk_aligned+0x38>
 80056d0:	f04f 34ff 	mov.w	r4, #4294967295
 80056d4:	4620      	mov	r0, r4
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	200017ec 	.word	0x200017ec

080056dc <_malloc_r>:
 80056dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e0:	1ccd      	adds	r5, r1, #3
 80056e2:	f025 0503 	bic.w	r5, r5, #3
 80056e6:	3508      	adds	r5, #8
 80056e8:	2d0c      	cmp	r5, #12
 80056ea:	bf38      	it	cc
 80056ec:	250c      	movcc	r5, #12
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	4607      	mov	r7, r0
 80056f2:	db01      	blt.n	80056f8 <_malloc_r+0x1c>
 80056f4:	42a9      	cmp	r1, r5
 80056f6:	d905      	bls.n	8005704 <_malloc_r+0x28>
 80056f8:	230c      	movs	r3, #12
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	2600      	movs	r6, #0
 80056fe:	4630      	mov	r0, r6
 8005700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057d8 <_malloc_r+0xfc>
 8005708:	f000 f868 	bl	80057dc <__malloc_lock>
 800570c:	f8d8 3000 	ldr.w	r3, [r8]
 8005710:	461c      	mov	r4, r3
 8005712:	bb5c      	cbnz	r4, 800576c <_malloc_r+0x90>
 8005714:	4629      	mov	r1, r5
 8005716:	4638      	mov	r0, r7
 8005718:	f7ff ffc0 	bl	800569c <sbrk_aligned>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	4604      	mov	r4, r0
 8005720:	d155      	bne.n	80057ce <_malloc_r+0xf2>
 8005722:	f8d8 4000 	ldr.w	r4, [r8]
 8005726:	4626      	mov	r6, r4
 8005728:	2e00      	cmp	r6, #0
 800572a:	d145      	bne.n	80057b8 <_malloc_r+0xdc>
 800572c:	2c00      	cmp	r4, #0
 800572e:	d048      	beq.n	80057c2 <_malloc_r+0xe6>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	4631      	mov	r1, r6
 8005734:	4638      	mov	r0, r7
 8005736:	eb04 0903 	add.w	r9, r4, r3
 800573a:	f000 fb5d 	bl	8005df8 <_sbrk_r>
 800573e:	4581      	cmp	r9, r0
 8005740:	d13f      	bne.n	80057c2 <_malloc_r+0xe6>
 8005742:	6821      	ldr	r1, [r4, #0]
 8005744:	1a6d      	subs	r5, r5, r1
 8005746:	4629      	mov	r1, r5
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff ffa7 	bl	800569c <sbrk_aligned>
 800574e:	3001      	adds	r0, #1
 8005750:	d037      	beq.n	80057c2 <_malloc_r+0xe6>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	442b      	add	r3, r5
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	f8d8 3000 	ldr.w	r3, [r8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d038      	beq.n	80057d2 <_malloc_r+0xf6>
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	42a2      	cmp	r2, r4
 8005764:	d12b      	bne.n	80057be <_malloc_r+0xe2>
 8005766:	2200      	movs	r2, #0
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	e00f      	b.n	800578c <_malloc_r+0xb0>
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	1b52      	subs	r2, r2, r5
 8005770:	d41f      	bmi.n	80057b2 <_malloc_r+0xd6>
 8005772:	2a0b      	cmp	r2, #11
 8005774:	d917      	bls.n	80057a6 <_malloc_r+0xca>
 8005776:	1961      	adds	r1, r4, r5
 8005778:	42a3      	cmp	r3, r4
 800577a:	6025      	str	r5, [r4, #0]
 800577c:	bf18      	it	ne
 800577e:	6059      	strne	r1, [r3, #4]
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	bf08      	it	eq
 8005784:	f8c8 1000 	streq.w	r1, [r8]
 8005788:	5162      	str	r2, [r4, r5]
 800578a:	604b      	str	r3, [r1, #4]
 800578c:	4638      	mov	r0, r7
 800578e:	f104 060b 	add.w	r6, r4, #11
 8005792:	f000 f829 	bl	80057e8 <__malloc_unlock>
 8005796:	f026 0607 	bic.w	r6, r6, #7
 800579a:	1d23      	adds	r3, r4, #4
 800579c:	1af2      	subs	r2, r6, r3
 800579e:	d0ae      	beq.n	80056fe <_malloc_r+0x22>
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	50a3      	str	r3, [r4, r2]
 80057a4:	e7ab      	b.n	80056fe <_malloc_r+0x22>
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	6862      	ldr	r2, [r4, #4]
 80057aa:	d1dd      	bne.n	8005768 <_malloc_r+0x8c>
 80057ac:	f8c8 2000 	str.w	r2, [r8]
 80057b0:	e7ec      	b.n	800578c <_malloc_r+0xb0>
 80057b2:	4623      	mov	r3, r4
 80057b4:	6864      	ldr	r4, [r4, #4]
 80057b6:	e7ac      	b.n	8005712 <_malloc_r+0x36>
 80057b8:	4634      	mov	r4, r6
 80057ba:	6876      	ldr	r6, [r6, #4]
 80057bc:	e7b4      	b.n	8005728 <_malloc_r+0x4c>
 80057be:	4613      	mov	r3, r2
 80057c0:	e7cc      	b.n	800575c <_malloc_r+0x80>
 80057c2:	230c      	movs	r3, #12
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4638      	mov	r0, r7
 80057c8:	f000 f80e 	bl	80057e8 <__malloc_unlock>
 80057cc:	e797      	b.n	80056fe <_malloc_r+0x22>
 80057ce:	6025      	str	r5, [r4, #0]
 80057d0:	e7dc      	b.n	800578c <_malloc_r+0xb0>
 80057d2:	605b      	str	r3, [r3, #4]
 80057d4:	deff      	udf	#255	; 0xff
 80057d6:	bf00      	nop
 80057d8:	200017e8 	.word	0x200017e8

080057dc <__malloc_lock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_lock+0x8>)
 80057de:	f7ff bf0f 	b.w	8005600 <__retarget_lock_acquire_recursive>
 80057e2:	bf00      	nop
 80057e4:	200017e4 	.word	0x200017e4

080057e8 <__malloc_unlock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_unlock+0x8>)
 80057ea:	f7ff bf0a 	b.w	8005602 <__retarget_lock_release_recursive>
 80057ee:	bf00      	nop
 80057f0:	200017e4 	.word	0x200017e4

080057f4 <__ssputs_r>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	688e      	ldr	r6, [r1, #8]
 80057fa:	461f      	mov	r7, r3
 80057fc:	42be      	cmp	r6, r7
 80057fe:	680b      	ldr	r3, [r1, #0]
 8005800:	4682      	mov	sl, r0
 8005802:	460c      	mov	r4, r1
 8005804:	4690      	mov	r8, r2
 8005806:	d82c      	bhi.n	8005862 <__ssputs_r+0x6e>
 8005808:	898a      	ldrh	r2, [r1, #12]
 800580a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800580e:	d026      	beq.n	800585e <__ssputs_r+0x6a>
 8005810:	6965      	ldr	r5, [r4, #20]
 8005812:	6909      	ldr	r1, [r1, #16]
 8005814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005818:	eba3 0901 	sub.w	r9, r3, r1
 800581c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005820:	1c7b      	adds	r3, r7, #1
 8005822:	444b      	add	r3, r9
 8005824:	106d      	asrs	r5, r5, #1
 8005826:	429d      	cmp	r5, r3
 8005828:	bf38      	it	cc
 800582a:	461d      	movcc	r5, r3
 800582c:	0553      	lsls	r3, r2, #21
 800582e:	d527      	bpl.n	8005880 <__ssputs_r+0x8c>
 8005830:	4629      	mov	r1, r5
 8005832:	f7ff ff53 	bl	80056dc <_malloc_r>
 8005836:	4606      	mov	r6, r0
 8005838:	b360      	cbz	r0, 8005894 <__ssputs_r+0xa0>
 800583a:	6921      	ldr	r1, [r4, #16]
 800583c:	464a      	mov	r2, r9
 800583e:	f000 faeb 	bl	8005e18 <memcpy>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	6126      	str	r6, [r4, #16]
 8005850:	6165      	str	r5, [r4, #20]
 8005852:	444e      	add	r6, r9
 8005854:	eba5 0509 	sub.w	r5, r5, r9
 8005858:	6026      	str	r6, [r4, #0]
 800585a:	60a5      	str	r5, [r4, #8]
 800585c:	463e      	mov	r6, r7
 800585e:	42be      	cmp	r6, r7
 8005860:	d900      	bls.n	8005864 <__ssputs_r+0x70>
 8005862:	463e      	mov	r6, r7
 8005864:	6820      	ldr	r0, [r4, #0]
 8005866:	4632      	mov	r2, r6
 8005868:	4641      	mov	r1, r8
 800586a:	f000 faab 	bl	8005dc4 <memmove>
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	1b9b      	subs	r3, r3, r6
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	4433      	add	r3, r6
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	2000      	movs	r0, #0
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	462a      	mov	r2, r5
 8005882:	f000 fad7 	bl	8005e34 <_realloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	2800      	cmp	r0, #0
 800588a:	d1e0      	bne.n	800584e <__ssputs_r+0x5a>
 800588c:	6921      	ldr	r1, [r4, #16]
 800588e:	4650      	mov	r0, sl
 8005890:	f7ff feb8 	bl	8005604 <_free_r>
 8005894:	230c      	movs	r3, #12
 8005896:	f8ca 3000 	str.w	r3, [sl]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a0:	81a3      	strh	r3, [r4, #12]
 80058a2:	f04f 30ff 	mov.w	r0, #4294967295
 80058a6:	e7e9      	b.n	800587c <__ssputs_r+0x88>

080058a8 <_svfiprintf_r>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	4698      	mov	r8, r3
 80058ae:	898b      	ldrh	r3, [r1, #12]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	b09d      	sub	sp, #116	; 0x74
 80058b4:	4607      	mov	r7, r0
 80058b6:	460d      	mov	r5, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	d50e      	bpl.n	80058da <_svfiprintf_r+0x32>
 80058bc:	690b      	ldr	r3, [r1, #16]
 80058be:	b963      	cbnz	r3, 80058da <_svfiprintf_r+0x32>
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	f7ff ff0b 	bl	80056dc <_malloc_r>
 80058c6:	6028      	str	r0, [r5, #0]
 80058c8:	6128      	str	r0, [r5, #16]
 80058ca:	b920      	cbnz	r0, 80058d6 <_svfiprintf_r+0x2e>
 80058cc:	230c      	movs	r3, #12
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	e0d0      	b.n	8005a78 <_svfiprintf_r+0x1d0>
 80058d6:	2340      	movs	r3, #64	; 0x40
 80058d8:	616b      	str	r3, [r5, #20]
 80058da:	2300      	movs	r3, #0
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	2320      	movs	r3, #32
 80058e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e8:	2330      	movs	r3, #48	; 0x30
 80058ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a90 <_svfiprintf_r+0x1e8>
 80058ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058f2:	f04f 0901 	mov.w	r9, #1
 80058f6:	4623      	mov	r3, r4
 80058f8:	469a      	mov	sl, r3
 80058fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058fe:	b10a      	cbz	r2, 8005904 <_svfiprintf_r+0x5c>
 8005900:	2a25      	cmp	r2, #37	; 0x25
 8005902:	d1f9      	bne.n	80058f8 <_svfiprintf_r+0x50>
 8005904:	ebba 0b04 	subs.w	fp, sl, r4
 8005908:	d00b      	beq.n	8005922 <_svfiprintf_r+0x7a>
 800590a:	465b      	mov	r3, fp
 800590c:	4622      	mov	r2, r4
 800590e:	4629      	mov	r1, r5
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff ff6f 	bl	80057f4 <__ssputs_r>
 8005916:	3001      	adds	r0, #1
 8005918:	f000 80a9 	beq.w	8005a6e <_svfiprintf_r+0x1c6>
 800591c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591e:	445a      	add	r2, fp
 8005920:	9209      	str	r2, [sp, #36]	; 0x24
 8005922:	f89a 3000 	ldrb.w	r3, [sl]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80a1 	beq.w	8005a6e <_svfiprintf_r+0x1c6>
 800592c:	2300      	movs	r3, #0
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005936:	f10a 0a01 	add.w	sl, sl, #1
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	9307      	str	r3, [sp, #28]
 800593e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005942:	931a      	str	r3, [sp, #104]	; 0x68
 8005944:	4654      	mov	r4, sl
 8005946:	2205      	movs	r2, #5
 8005948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594c:	4850      	ldr	r0, [pc, #320]	; (8005a90 <_svfiprintf_r+0x1e8>)
 800594e:	f7fa fc47 	bl	80001e0 <memchr>
 8005952:	9a04      	ldr	r2, [sp, #16]
 8005954:	b9d8      	cbnz	r0, 800598e <_svfiprintf_r+0xe6>
 8005956:	06d0      	lsls	r0, r2, #27
 8005958:	bf44      	itt	mi
 800595a:	2320      	movmi	r3, #32
 800595c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005960:	0711      	lsls	r1, r2, #28
 8005962:	bf44      	itt	mi
 8005964:	232b      	movmi	r3, #43	; 0x2b
 8005966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596a:	f89a 3000 	ldrb.w	r3, [sl]
 800596e:	2b2a      	cmp	r3, #42	; 0x2a
 8005970:	d015      	beq.n	800599e <_svfiprintf_r+0xf6>
 8005972:	9a07      	ldr	r2, [sp, #28]
 8005974:	4654      	mov	r4, sl
 8005976:	2000      	movs	r0, #0
 8005978:	f04f 0c0a 	mov.w	ip, #10
 800597c:	4621      	mov	r1, r4
 800597e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005982:	3b30      	subs	r3, #48	; 0x30
 8005984:	2b09      	cmp	r3, #9
 8005986:	d94d      	bls.n	8005a24 <_svfiprintf_r+0x17c>
 8005988:	b1b0      	cbz	r0, 80059b8 <_svfiprintf_r+0x110>
 800598a:	9207      	str	r2, [sp, #28]
 800598c:	e014      	b.n	80059b8 <_svfiprintf_r+0x110>
 800598e:	eba0 0308 	sub.w	r3, r0, r8
 8005992:	fa09 f303 	lsl.w	r3, r9, r3
 8005996:	4313      	orrs	r3, r2
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	46a2      	mov	sl, r4
 800599c:	e7d2      	b.n	8005944 <_svfiprintf_r+0x9c>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	1d19      	adds	r1, r3, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	9103      	str	r1, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfbb      	ittet	lt
 80059aa:	425b      	neglt	r3, r3
 80059ac:	f042 0202 	orrlt.w	r2, r2, #2
 80059b0:	9307      	strge	r3, [sp, #28]
 80059b2:	9307      	strlt	r3, [sp, #28]
 80059b4:	bfb8      	it	lt
 80059b6:	9204      	strlt	r2, [sp, #16]
 80059b8:	7823      	ldrb	r3, [r4, #0]
 80059ba:	2b2e      	cmp	r3, #46	; 0x2e
 80059bc:	d10c      	bne.n	80059d8 <_svfiprintf_r+0x130>
 80059be:	7863      	ldrb	r3, [r4, #1]
 80059c0:	2b2a      	cmp	r3, #42	; 0x2a
 80059c2:	d134      	bne.n	8005a2e <_svfiprintf_r+0x186>
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	1d1a      	adds	r2, r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	9203      	str	r2, [sp, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bfb8      	it	lt
 80059d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059d4:	3402      	adds	r4, #2
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005aa0 <_svfiprintf_r+0x1f8>
 80059dc:	7821      	ldrb	r1, [r4, #0]
 80059de:	2203      	movs	r2, #3
 80059e0:	4650      	mov	r0, sl
 80059e2:	f7fa fbfd 	bl	80001e0 <memchr>
 80059e6:	b138      	cbz	r0, 80059f8 <_svfiprintf_r+0x150>
 80059e8:	9b04      	ldr	r3, [sp, #16]
 80059ea:	eba0 000a 	sub.w	r0, r0, sl
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	4082      	lsls	r2, r0
 80059f2:	4313      	orrs	r3, r2
 80059f4:	3401      	adds	r4, #1
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fc:	4825      	ldr	r0, [pc, #148]	; (8005a94 <_svfiprintf_r+0x1ec>)
 80059fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a02:	2206      	movs	r2, #6
 8005a04:	f7fa fbec 	bl	80001e0 <memchr>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d038      	beq.n	8005a7e <_svfiprintf_r+0x1d6>
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <_svfiprintf_r+0x1f0>)
 8005a0e:	bb1b      	cbnz	r3, 8005a58 <_svfiprintf_r+0x1b0>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	3307      	adds	r3, #7
 8005a14:	f023 0307 	bic.w	r3, r3, #7
 8005a18:	3308      	adds	r3, #8
 8005a1a:	9303      	str	r3, [sp, #12]
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	4433      	add	r3, r6
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	e768      	b.n	80058f6 <_svfiprintf_r+0x4e>
 8005a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a28:	460c      	mov	r4, r1
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	e7a6      	b.n	800597c <_svfiprintf_r+0xd4>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	3401      	adds	r4, #1
 8005a32:	9305      	str	r3, [sp, #20]
 8005a34:	4619      	mov	r1, r3
 8005a36:	f04f 0c0a 	mov.w	ip, #10
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a40:	3a30      	subs	r2, #48	; 0x30
 8005a42:	2a09      	cmp	r2, #9
 8005a44:	d903      	bls.n	8005a4e <_svfiprintf_r+0x1a6>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0c6      	beq.n	80059d8 <_svfiprintf_r+0x130>
 8005a4a:	9105      	str	r1, [sp, #20]
 8005a4c:	e7c4      	b.n	80059d8 <_svfiprintf_r+0x130>
 8005a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a52:	4604      	mov	r4, r0
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7f0      	b.n	8005a3a <_svfiprintf_r+0x192>
 8005a58:	ab03      	add	r3, sp, #12
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <_svfiprintf_r+0x1f4>)
 8005a60:	a904      	add	r1, sp, #16
 8005a62:	4638      	mov	r0, r7
 8005a64:	f3af 8000 	nop.w
 8005a68:	1c42      	adds	r2, r0, #1
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	d1d6      	bne.n	8005a1c <_svfiprintf_r+0x174>
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	065b      	lsls	r3, r3, #25
 8005a72:	f53f af2d 	bmi.w	80058d0 <_svfiprintf_r+0x28>
 8005a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a78:	b01d      	add	sp, #116	; 0x74
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	ab03      	add	r3, sp, #12
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	462a      	mov	r2, r5
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <_svfiprintf_r+0x1f4>)
 8005a86:	a904      	add	r1, sp, #16
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f000 f879 	bl	8005b80 <_printf_i>
 8005a8e:	e7eb      	b.n	8005a68 <_svfiprintf_r+0x1c0>
 8005a90:	08006024 	.word	0x08006024
 8005a94:	0800602e 	.word	0x0800602e
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	080057f5 	.word	0x080057f5
 8005aa0:	0800602a 	.word	0x0800602a

08005aa4 <_printf_common>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	4699      	mov	r9, r3
 8005aac:	688a      	ldr	r2, [r1, #8]
 8005aae:	690b      	ldr	r3, [r1, #16]
 8005ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bfb8      	it	lt
 8005ab8:	4613      	movlt	r3, r2
 8005aba:	6033      	str	r3, [r6, #0]
 8005abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	b10a      	cbz	r2, 8005aca <_printf_common+0x26>
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	6033      	str	r3, [r6, #0]
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	0699      	lsls	r1, r3, #26
 8005ace:	bf42      	ittt	mi
 8005ad0:	6833      	ldrmi	r3, [r6, #0]
 8005ad2:	3302      	addmi	r3, #2
 8005ad4:	6033      	strmi	r3, [r6, #0]
 8005ad6:	6825      	ldr	r5, [r4, #0]
 8005ad8:	f015 0506 	ands.w	r5, r5, #6
 8005adc:	d106      	bne.n	8005aec <_printf_common+0x48>
 8005ade:	f104 0a19 	add.w	sl, r4, #25
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	6832      	ldr	r2, [r6, #0]
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	dc26      	bgt.n	8005b3a <_printf_common+0x96>
 8005aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005af0:	1e13      	subs	r3, r2, #0
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	bf18      	it	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	0692      	lsls	r2, r2, #26
 8005afa:	d42b      	bmi.n	8005b54 <_printf_common+0xb0>
 8005afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b00:	4649      	mov	r1, r9
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c0      	blx	r8
 8005b06:	3001      	adds	r0, #1
 8005b08:	d01e      	beq.n	8005b48 <_printf_common+0xa4>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	6922      	ldr	r2, [r4, #16]
 8005b0e:	f003 0306 	and.w	r3, r3, #6
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	bf02      	ittt	eq
 8005b16:	68e5      	ldreq	r5, [r4, #12]
 8005b18:	6833      	ldreq	r3, [r6, #0]
 8005b1a:	1aed      	subeq	r5, r5, r3
 8005b1c:	68a3      	ldr	r3, [r4, #8]
 8005b1e:	bf0c      	ite	eq
 8005b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b24:	2500      	movne	r5, #0
 8005b26:	4293      	cmp	r3, r2
 8005b28:	bfc4      	itt	gt
 8005b2a:	1a9b      	subgt	r3, r3, r2
 8005b2c:	18ed      	addgt	r5, r5, r3
 8005b2e:	2600      	movs	r6, #0
 8005b30:	341a      	adds	r4, #26
 8005b32:	42b5      	cmp	r5, r6
 8005b34:	d11a      	bne.n	8005b6c <_printf_common+0xc8>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e008      	b.n	8005b4c <_printf_common+0xa8>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4652      	mov	r2, sl
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4638      	mov	r0, r7
 8005b42:	47c0      	blx	r8
 8005b44:	3001      	adds	r0, #1
 8005b46:	d103      	bne.n	8005b50 <_printf_common+0xac>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	3501      	adds	r5, #1
 8005b52:	e7c6      	b.n	8005ae2 <_printf_common+0x3e>
 8005b54:	18e1      	adds	r1, r4, r3
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	2030      	movs	r0, #48	; 0x30
 8005b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b5e:	4422      	add	r2, r4
 8005b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b68:	3302      	adds	r3, #2
 8005b6a:	e7c7      	b.n	8005afc <_printf_common+0x58>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	4622      	mov	r2, r4
 8005b70:	4649      	mov	r1, r9
 8005b72:	4638      	mov	r0, r7
 8005b74:	47c0      	blx	r8
 8005b76:	3001      	adds	r0, #1
 8005b78:	d0e6      	beq.n	8005b48 <_printf_common+0xa4>
 8005b7a:	3601      	adds	r6, #1
 8005b7c:	e7d9      	b.n	8005b32 <_printf_common+0x8e>
	...

08005b80 <_printf_i>:
 8005b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	7e0f      	ldrb	r7, [r1, #24]
 8005b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b88:	2f78      	cmp	r7, #120	; 0x78
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	4680      	mov	r8, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	469a      	mov	sl, r3
 8005b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b96:	d807      	bhi.n	8005ba8 <_printf_i+0x28>
 8005b98:	2f62      	cmp	r7, #98	; 0x62
 8005b9a:	d80a      	bhi.n	8005bb2 <_printf_i+0x32>
 8005b9c:	2f00      	cmp	r7, #0
 8005b9e:	f000 80d4 	beq.w	8005d4a <_printf_i+0x1ca>
 8005ba2:	2f58      	cmp	r7, #88	; 0x58
 8005ba4:	f000 80c0 	beq.w	8005d28 <_printf_i+0x1a8>
 8005ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bb0:	e03a      	b.n	8005c28 <_printf_i+0xa8>
 8005bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bb6:	2b15      	cmp	r3, #21
 8005bb8:	d8f6      	bhi.n	8005ba8 <_printf_i+0x28>
 8005bba:	a101      	add	r1, pc, #4	; (adr r1, 8005bc0 <_printf_i+0x40>)
 8005bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bc0:	08005c19 	.word	0x08005c19
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005ba9 	.word	0x08005ba9
 8005bcc:	08005ba9 	.word	0x08005ba9
 8005bd0:	08005ba9 	.word	0x08005ba9
 8005bd4:	08005ba9 	.word	0x08005ba9
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005ba9 	.word	0x08005ba9
 8005be0:	08005ba9 	.word	0x08005ba9
 8005be4:	08005ba9 	.word	0x08005ba9
 8005be8:	08005ba9 	.word	0x08005ba9
 8005bec:	08005d31 	.word	0x08005d31
 8005bf0:	08005c59 	.word	0x08005c59
 8005bf4:	08005ceb 	.word	0x08005ceb
 8005bf8:	08005ba9 	.word	0x08005ba9
 8005bfc:	08005ba9 	.word	0x08005ba9
 8005c00:	08005d53 	.word	0x08005d53
 8005c04:	08005ba9 	.word	0x08005ba9
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005ba9 	.word	0x08005ba9
 8005c10:	08005ba9 	.word	0x08005ba9
 8005c14:	08005cf3 	.word	0x08005cf3
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	1d1a      	adds	r2, r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	602a      	str	r2, [r5, #0]
 8005c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e09f      	b.n	8005d6c <_printf_i+0x1ec>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	0607      	lsls	r7, r0, #24
 8005c32:	f103 0104 	add.w	r1, r3, #4
 8005c36:	6029      	str	r1, [r5, #0]
 8005c38:	d501      	bpl.n	8005c3e <_printf_i+0xbe>
 8005c3a:	681e      	ldr	r6, [r3, #0]
 8005c3c:	e003      	b.n	8005c46 <_printf_i+0xc6>
 8005c3e:	0646      	lsls	r6, r0, #25
 8005c40:	d5fb      	bpl.n	8005c3a <_printf_i+0xba>
 8005c42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	da03      	bge.n	8005c52 <_printf_i+0xd2>
 8005c4a:	232d      	movs	r3, #45	; 0x2d
 8005c4c:	4276      	negs	r6, r6
 8005c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c52:	485a      	ldr	r0, [pc, #360]	; (8005dbc <_printf_i+0x23c>)
 8005c54:	230a      	movs	r3, #10
 8005c56:	e012      	b.n	8005c7e <_printf_i+0xfe>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	1d19      	adds	r1, r3, #4
 8005c5e:	6029      	str	r1, [r5, #0]
 8005c60:	0605      	lsls	r5, r0, #24
 8005c62:	d501      	bpl.n	8005c68 <_printf_i+0xe8>
 8005c64:	681e      	ldr	r6, [r3, #0]
 8005c66:	e002      	b.n	8005c6e <_printf_i+0xee>
 8005c68:	0641      	lsls	r1, r0, #25
 8005c6a:	d5fb      	bpl.n	8005c64 <_printf_i+0xe4>
 8005c6c:	881e      	ldrh	r6, [r3, #0]
 8005c6e:	4853      	ldr	r0, [pc, #332]	; (8005dbc <_printf_i+0x23c>)
 8005c70:	2f6f      	cmp	r7, #111	; 0x6f
 8005c72:	bf0c      	ite	eq
 8005c74:	2308      	moveq	r3, #8
 8005c76:	230a      	movne	r3, #10
 8005c78:	2100      	movs	r1, #0
 8005c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7e:	6865      	ldr	r5, [r4, #4]
 8005c80:	60a5      	str	r5, [r4, #8]
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	bfa2      	ittt	ge
 8005c86:	6821      	ldrge	r1, [r4, #0]
 8005c88:	f021 0104 	bicge.w	r1, r1, #4
 8005c8c:	6021      	strge	r1, [r4, #0]
 8005c8e:	b90e      	cbnz	r6, 8005c94 <_printf_i+0x114>
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	d04b      	beq.n	8005d2c <_printf_i+0x1ac>
 8005c94:	4615      	mov	r5, r2
 8005c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c9e:	5dc7      	ldrb	r7, [r0, r7]
 8005ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ca4:	4637      	mov	r7, r6
 8005ca6:	42bb      	cmp	r3, r7
 8005ca8:	460e      	mov	r6, r1
 8005caa:	d9f4      	bls.n	8005c96 <_printf_i+0x116>
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10b      	bne.n	8005cc8 <_printf_i+0x148>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	07de      	lsls	r6, r3, #31
 8005cb4:	d508      	bpl.n	8005cc8 <_printf_i+0x148>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	6861      	ldr	r1, [r4, #4]
 8005cba:	4299      	cmp	r1, r3
 8005cbc:	bfde      	ittt	le
 8005cbe:	2330      	movle	r3, #48	; 0x30
 8005cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc8:	1b52      	subs	r2, r2, r5
 8005cca:	6122      	str	r2, [r4, #16]
 8005ccc:	f8cd a000 	str.w	sl, [sp]
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	aa03      	add	r2, sp, #12
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	f7ff fee4 	bl	8005aa4 <_printf_common>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d14a      	bne.n	8005d76 <_printf_i+0x1f6>
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	b004      	add	sp, #16
 8005ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	4833      	ldr	r0, [pc, #204]	; (8005dc0 <_printf_i+0x240>)
 8005cf4:	2778      	movs	r7, #120	; 0x78
 8005cf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6829      	ldr	r1, [r5, #0]
 8005cfe:	061f      	lsls	r7, r3, #24
 8005d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d04:	d402      	bmi.n	8005d0c <_printf_i+0x18c>
 8005d06:	065f      	lsls	r7, r3, #25
 8005d08:	bf48      	it	mi
 8005d0a:	b2b6      	uxthmi	r6, r6
 8005d0c:	07df      	lsls	r7, r3, #31
 8005d0e:	bf48      	it	mi
 8005d10:	f043 0320 	orrmi.w	r3, r3, #32
 8005d14:	6029      	str	r1, [r5, #0]
 8005d16:	bf48      	it	mi
 8005d18:	6023      	strmi	r3, [r4, #0]
 8005d1a:	b91e      	cbnz	r6, 8005d24 <_printf_i+0x1a4>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	f023 0320 	bic.w	r3, r3, #32
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	2310      	movs	r3, #16
 8005d26:	e7a7      	b.n	8005c78 <_printf_i+0xf8>
 8005d28:	4824      	ldr	r0, [pc, #144]	; (8005dbc <_printf_i+0x23c>)
 8005d2a:	e7e4      	b.n	8005cf6 <_printf_i+0x176>
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	e7bd      	b.n	8005cac <_printf_i+0x12c>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	6826      	ldr	r6, [r4, #0]
 8005d34:	6961      	ldr	r1, [r4, #20]
 8005d36:	1d18      	adds	r0, r3, #4
 8005d38:	6028      	str	r0, [r5, #0]
 8005d3a:	0635      	lsls	r5, r6, #24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0x1c4>
 8005d40:	6019      	str	r1, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0x1ca>
 8005d44:	0670      	lsls	r0, r6, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0x1c0>
 8005d48:	8019      	strh	r1, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	4615      	mov	r5, r2
 8005d50:	e7bc      	b.n	8005ccc <_printf_i+0x14c>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	6862      	ldr	r2, [r4, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fa fa3e 	bl	80001e0 <memchr>
 8005d64:	b108      	cbz	r0, 8005d6a <_printf_i+0x1ea>
 8005d66:	1b40      	subs	r0, r0, r5
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	e7aa      	b.n	8005ccc <_printf_i+0x14c>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0ad      	beq.n	8005ce0 <_printf_i+0x160>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	079b      	lsls	r3, r3, #30
 8005d88:	d413      	bmi.n	8005db2 <_printf_i+0x232>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bfb8      	it	lt
 8005d92:	4618      	movlt	r0, r3
 8005d94:	e7a6      	b.n	8005ce4 <_printf_i+0x164>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09d      	beq.n	8005ce0 <_printf_i+0x160>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9903      	ldr	r1, [sp, #12]
 8005daa:	1a5b      	subs	r3, r3, r1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf2      	bgt.n	8005d96 <_printf_i+0x216>
 8005db0:	e7eb      	b.n	8005d8a <_printf_i+0x20a>
 8005db2:	2500      	movs	r5, #0
 8005db4:	f104 0619 	add.w	r6, r4, #25
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0x226>
 8005dba:	bf00      	nop
 8005dbc:	08006035 	.word	0x08006035
 8005dc0:	08006046 	.word	0x08006046

08005dc4 <memmove>:
 8005dc4:	4288      	cmp	r0, r1
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	eb01 0402 	add.w	r4, r1, r2
 8005dcc:	d902      	bls.n	8005dd4 <memmove+0x10>
 8005dce:	4284      	cmp	r4, r0
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	d807      	bhi.n	8005de4 <memmove+0x20>
 8005dd4:	1e43      	subs	r3, r0, #1
 8005dd6:	42a1      	cmp	r1, r4
 8005dd8:	d008      	beq.n	8005dec <memmove+0x28>
 8005dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005de2:	e7f8      	b.n	8005dd6 <memmove+0x12>
 8005de4:	4402      	add	r2, r0
 8005de6:	4601      	mov	r1, r0
 8005de8:	428a      	cmp	r2, r1
 8005dea:	d100      	bne.n	8005dee <memmove+0x2a>
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005df6:	e7f7      	b.n	8005de8 <memmove+0x24>

08005df8 <_sbrk_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	; (8005e14 <_sbrk_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fc f8f8 	bl	8001ff8 <_sbrk>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_sbrk_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_sbrk_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200017e0 	.word	0x200017e0

08005e18 <memcpy>:
 8005e18:	440a      	add	r2, r1
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e20:	d100      	bne.n	8005e24 <memcpy+0xc>
 8005e22:	4770      	bx	lr
 8005e24:	b510      	push	{r4, lr}
 8005e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2e:	4291      	cmp	r1, r2
 8005e30:	d1f9      	bne.n	8005e26 <memcpy+0xe>
 8005e32:	bd10      	pop	{r4, pc}

08005e34 <_realloc_r>:
 8005e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e38:	4680      	mov	r8, r0
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	460e      	mov	r6, r1
 8005e3e:	b921      	cbnz	r1, 8005e4a <_realloc_r+0x16>
 8005e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4611      	mov	r1, r2
 8005e46:	f7ff bc49 	b.w	80056dc <_malloc_r>
 8005e4a:	b92a      	cbnz	r2, 8005e58 <_realloc_r+0x24>
 8005e4c:	f7ff fbda 	bl	8005604 <_free_r>
 8005e50:	4625      	mov	r5, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	f000 f81b 	bl	8005e92 <_malloc_usable_size_r>
 8005e5c:	4284      	cmp	r4, r0
 8005e5e:	4607      	mov	r7, r0
 8005e60:	d802      	bhi.n	8005e68 <_realloc_r+0x34>
 8005e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e66:	d812      	bhi.n	8005e8e <_realloc_r+0x5a>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7ff fc36 	bl	80056dc <_malloc_r>
 8005e70:	4605      	mov	r5, r0
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0ed      	beq.n	8005e52 <_realloc_r+0x1e>
 8005e76:	42bc      	cmp	r4, r7
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	bf28      	it	cs
 8005e7e:	463a      	movcs	r2, r7
 8005e80:	f7ff ffca 	bl	8005e18 <memcpy>
 8005e84:	4631      	mov	r1, r6
 8005e86:	4640      	mov	r0, r8
 8005e88:	f7ff fbbc 	bl	8005604 <_free_r>
 8005e8c:	e7e1      	b.n	8005e52 <_realloc_r+0x1e>
 8005e8e:	4635      	mov	r5, r6
 8005e90:	e7df      	b.n	8005e52 <_realloc_r+0x1e>

08005e92 <_malloc_usable_size_r>:
 8005e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e96:	1f18      	subs	r0, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfbc      	itt	lt
 8005e9c:	580b      	ldrlt	r3, [r1, r0]
 8005e9e:	18c0      	addlt	r0, r0, r3
 8005ea0:	4770      	bx	lr
	...

08005ea4 <_init>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr

08005eb0 <_fini>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr
