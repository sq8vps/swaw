
max30102v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006048  08006048  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006048  08006048  00016048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006050  08006050  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001794  2000005c  080060b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017f0  080060b4  000217f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8a4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a3  00000000  00000000  0002e973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00030a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a01  00000000  00000000  00031708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026824  00000000  00000000  00032109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d87  00000000  00000000  0005892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb45f  00000000  00000000  000696b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a1c  00000000  00000000  00154b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00158530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e94 	.word	0x08005e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e94 	.word	0x08005e94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Max30102_Write_Reg>:
	MAX30102_STATE_COLLECT_NEXT_PORTION
}MAX30102_STATE;
	MAX30102_STATE StateMachine;


static void Max30102_Write_Reg(uint8_t uch_addr, uint8_t uch_data){
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af04      	add	r7, sp, #16
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, &uch_data, 1, I2C_TIMEOUT);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <Max30102_Write_Reg+0x34>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	b29a      	uxth	r2, r3
 8000594:	2301      	movs	r3, #1
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	21ae      	movs	r1, #174	; 0xae
 80005a4:	f002 f98e 	bl	80028c4 <HAL_I2C_Mem_Write>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000078 	.word	0x20000078

080005b4 <Max30102_Read_Reg>:

static void Max30102_Read_Reg(uint8_t uch_addr, uint8_t *puch_data){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af04      	add	r7, sp, #16
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data, 1, I2C_TIMEOUT);
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <Max30102_Read_Reg+0x30>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	2301      	movs	r3, #1
 80005ca:	9302      	str	r3, [sp, #8]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	21ae      	movs	r1, #174	; 0xae
 80005d8:	f002 fa88 	bl	8002aec <HAL_I2C_Mem_Read>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000078 	.word	0x20000078

080005e8 <Max30102_WriteRegisterBit>:

static void Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit, uint8_t Value){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]

	uint8_t tmp;
    Max30102_Read_Reg(Register, &tmp);
 80005fa:	f107 020f 	add.w	r2, r7, #15
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffd6 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(1<<Bit);
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2201      	movs	r2, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	b25b      	sxtb	r3, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	b25a      	sxtb	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b25b      	sxtb	r3, r3
 800061a:	4013      	ands	r3, r2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x01)<<Bit;
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	f003 0201 	and.w	r2, r3, #1
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	b25a      	sxtb	r2, r3
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(Register, tmp);
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff9a 	bl	800057c <Max30102_Write_Reg>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <Max30102_FifoWritePointer>:

static void Max30102_FifoWritePointer(uint8_t Address){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(FIFO_WRITE_POINTER,(Address & 0x1F));  //FIFO_WR_PTR[4:0]
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 031f 	and.w	r3, r3, #31
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4619      	mov	r1, r3
 8000664:	2004      	movs	r0, #4
 8000666:	f7ff ff89 	bl	800057c <Max30102_Write_Reg>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <Max30102_FifoOverflowCounter>:

static void Max30102_FifoOverflowCounter(uint8_t Address){
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(OVERFLOW_COUNTER,(Address & 0x1F));  //OVF_COUNTER[4:0]
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2005      	movs	r0, #5
 8000688:	f7ff ff78 	bl	800057c <Max30102_Write_Reg>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <Max30102_FifoReadPointer>:

static void Max30102_FifoReadPointer(uint8_t Address){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]

	Max30102_Write_Reg(FIFO_READ_POINTER,(Address & 0x1F));  //FIFO_RD_PTR[4:0]
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 031f 	and.w	r3, r3, #31
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	2006      	movs	r0, #6
 80006aa:	f7ff ff67 	bl	800057c <Max30102_Write_Reg>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Max30102_FifoSampleAveraging>:

static void Max30102_FifoSampleAveraging(uint8_t Value) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b084      	sub	sp, #16
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(FIFO_CONFIGURATION, &tmp);
 80006c0:	f107 030f 	add.w	r3, r7, #15
 80006c4:	4619      	mov	r1, r3
 80006c6:	2008      	movs	r0, #8
 80006c8:	f7ff ff74 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x07);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	f023 0307 	bic.w	r3, r3, #7
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&0x07)<<5;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	015b      	lsls	r3, r3, #5
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(FIFO_CONFIGURATION, tmp);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2008      	movs	r0, #8
 80006ee:	f7ff ff45 	bl	800057c <Max30102_Write_Reg>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <Max30102_FifoRolloverEnable>:

static void Max30102_FifoRolloverEnable(uint8_t Enable){
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	71fb      	strb	r3, [r7, #7]

	Max30102_WriteRegisterBit(FIFO_CONFIGURATION, FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	2104      	movs	r1, #4
 8000710:	2008      	movs	r0, #8
 8000712:	f7ff ff69 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Max30102_FifoAlmostFullValue>:

static void  Max30102_FifoAlmostFullValue(uint8_t Value){
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]

	if(Value < 17) Value = 17;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b10      	cmp	r3, #16
 800072c:	d801      	bhi.n	8000732 <Max30102_FifoAlmostFullValue+0x14>
 800072e:	2311      	movs	r3, #17
 8000730:	71fb      	strb	r3, [r7, #7]
	if(Value > 32) Value = 32;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b20      	cmp	r3, #32
 8000736:	d901      	bls.n	800073c <Max30102_FifoAlmostFullValue+0x1e>
 8000738:	2320      	movs	r3, #32
 800073a:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f1c3 0320 	rsb	r3, r3, #32
 8000742:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	Max30102_Read_Reg(FIFO_CONFIGURATION, &tmp);
 8000744:	f107 030f 	add.w	r3, r7, #15
 8000748:	4619      	mov	r1, r3
 800074a:	2008      	movs	r0, #8
 800074c:	f7ff ff32 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x0F);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f023 030f 	bic.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	b25a      	sxtb	r2, r3
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b25b      	sxtb	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(FIFO_CONFIGURATION, tmp);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	4619      	mov	r1, r3
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff ff01 	bl	800057c <Max30102_Write_Reg>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <Max30102_SetMode>:

static void Max30102_SetMode(uint8_t Mode){
 8000782:	b580      	push	{r7, lr}
 8000784:	b084      	sub	sp, #16
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(MODE_CONFIGURATION, &tmp);
 800078c:	f107 030f 	add.w	r3, r7, #15
 8000790:	4619      	mov	r1, r3
 8000792:	2009      	movs	r0, #9
 8000794:	f7ff ff0e 	bl	80005b4 <Max30102_Read_Reg>
		
	tmp &= ~(0x07);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f023 0307 	bic.w	r3, r3, #7
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	b25a      	sxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(MODE_CONFIGURATION, tmp);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4619      	mov	r1, r3
 80007bc:	2009      	movs	r0, #9
 80007be:	f7ff fedd 	bl	800057c <Max30102_Write_Reg>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <Max30102_SpO2AdcRange>:

static void Max30102_SpO2AdcRange(uint8_t Value){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 80007d4:	f107 030f 	add.w	r3, r7, #15
 80007d8:	4619      	mov	r1, r3
 80007da:	200a      	movs	r0, #10
 80007dc:	f7ff feea 	bl	80005b4 <Max30102_Read_Reg>

	tmp &= ~(0x03);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	015b      	lsls	r3, r3, #5
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	73fb      	strb	r3, [r7, #15]
    Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4619      	mov	r1, r3
 8000806:	200a      	movs	r0, #10
 8000808:	f7ff feb8 	bl	800057c <Max30102_Write_Reg>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <Max30102_SpO2SampleRate>:

static void Max30102_SpO2SampleRate(uint8_t Value){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 800081e:	f107 030f 	add.w	r3, r7, #15
 8000822:	4619      	mov	r1, r3
 8000824:	200a      	movs	r0, #10
 8000826:	f7ff fec5 	bl	80005b4 <Max30102_Read_Reg>

	tmp &= ~(0x07);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f023 0307 	bic.w	r3, r3, #7
 8000830:	b2db      	uxtb	r3, r3
 8000832:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	f003 031c 	and.w	r3, r3, #28
 800083e:	b25a      	sxtb	r2, r3
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b25b      	sxtb	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	4619      	mov	r1, r3
 8000850:	200a      	movs	r0, #10
 8000852:	f7ff fe93 	bl	800057c <Max30102_Write_Reg>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Max30102_SpO2LedPulseWidth>:

static void Max30102_SpO2LedPulseWidth(uint8_t Value){
 800085e:	b580      	push	{r7, lr}
 8000860:	b084      	sub	sp, #16
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp;
	Max30102_Read_Reg(SPO2_CONFIGURATION, &tmp);
 8000868:	f107 030f 	add.w	r3, r7, #15
 800086c:	4619      	mov	r1, r3
 800086e:	200a      	movs	r0, #10
 8000870:	f7ff fea0 	bl	80005b4 <Max30102_Read_Reg>
	
	tmp &= ~(0x03);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f023 0303 	bic.w	r3, r3, #3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	b25a      	sxtb	r2, r3
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	b25b      	sxtb	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
	Max30102_Write_Reg(SPO2_CONFIGURATION, tmp);
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4619      	mov	r1, r3
 8000898:	200a      	movs	r0, #10
 800089a:	f7ff fe6f 	bl	800057c <Max30102_Write_Reg>
		
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <Max30102_SetIntAlmostFullEnabled>:

static void Max30102_SetIntAlmostFullEnabled(uint8_t Enable){
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(INTERRUPT_ENABLE_1, INT_A_FULL_BIT, Enable);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2107      	movs	r1, #7
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fe96 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <Max30102_SetIntFifoDataReadyEnabled>:

static void Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable){
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(INTERRUPT_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2106      	movs	r1, #6
 80008d2:	2002      	movs	r0, #2
 80008d4:	f7ff fe88 	bl	80005e8 <Max30102_WriteRegisterBit>
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Max30102_Led1PulseAmplitude>:


/* LEDs Pulse Amplitute Configuration	LED Current = Value * 0.2 mA */	
static void Max30102_Led1PulseAmplitude(uint8_t Value)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
	Max30102_Write_Reg(LED_1_PA, Value);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4619      	mov	r1, r3
 80008ec:	200c      	movs	r0, #12
 80008ee:	f7ff fe45 	bl	800057c <Max30102_Write_Reg>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Max30102_Led2PulseAmplitude>:

static void Max30102_Led2PulseAmplitude(uint8_t Value)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	Max30102_Write_Reg(LED_2_PA, Value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4619      	mov	r1, r3
 8000908:	200d      	movs	r0, #13
 800090a:	f7ff fe37 	bl	800057c <Max30102_Write_Reg>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <Max30102_GetHeartRate>:


/* Usage Functions */

int32_t Max30102_GetHeartRate(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	return HeartRate;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <Max30102_GetHeartRate+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200009f4 	.word	0x200009f4

08000930 <Max30102_GetSpO2Value>:


int32_t Max30102_GetSpO2Value(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	return Sp02Value;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <Max30102_GetSpO2Value+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200009ec 	.word	0x200009ec

08000948 <Max30102_ReadFifo>:


MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led, volatile uint32_t *pun_ir_led)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af04      	add	r7, sp, #16
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led=0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
	*pun_ir_led=0;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if(HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, FIFO_DATA_REGISTER, 1, ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK)
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <Max30102_ReadFifo+0xd8>)
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2306      	movs	r3, #6
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2301      	movs	r3, #1
 8000972:	2207      	movs	r2, #7
 8000974:	21ae      	movs	r1, #174	; 0xae
 8000976:	f002 f8b9 	bl	8002aec <HAL_I2C_Mem_Read>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <Max30102_ReadFifo+0x3c>
	{
		return MAX30102_ERROR;
 8000980:	2300      	movs	r3, #0
 8000982:	e048      	b.n	8000a16 <Max30102_ReadFifo+0xce>
	}
	un_temp=(unsigned char) ach_i2c_data[0];
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	441a      	add	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[1];
 800099a:	7b7b      	ldrb	r3, [r7, #13]
 800099c:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	441a      	add	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[2];
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	617b      	str	r3, [r7, #20]
	*pun_red_led+=un_temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	441a      	add	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]

	un_temp=(unsigned char) ach_i2c_data[3];
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	041b      	lsls	r3, r3, #16
 80009c8:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	441a      	add	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[4];
 80009d6:	7c3b      	ldrb	r3, [r7, #16]
 80009d8:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	441a      	add	r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	601a      	str	r2, [r3, #0]
	un_temp=(unsigned char) ach_i2c_data[5];
 80009ec:	7c7b      	ldrb	r3, [r7, #17]
 80009ee:	617b      	str	r3, [r7, #20]
	*pun_ir_led+=un_temp;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	441a      	add	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]
	*pun_red_led&=0x03FFFF;  //Mask MSB [23:18]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
	*pun_ir_led&=0x03FFFF;  //Mask MSB [23:18]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 8000a14:	2301      	movs	r3, #1
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000078 	.word	0x20000078

08000a24 <Max30102_ReadInterruptStatus>:


static void  Max30102_ReadInterruptStatus(uint8_t *Status){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	
	uint8_t tmp;
	*Status = 0;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	Max30102_Read_Reg(INTERRUPT_STATUS_1, &tmp);
 8000a32:	f107 030f 	add.w	r3, r7, #15
 8000a36:	4619      	mov	r1, r3
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fdbb 	bl	80005b4 <Max30102_Read_Reg>
	*Status |= tmp & 0xE1; // 3 highest bits
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	f023 031e 	bic.w	r3, r3, #30
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	701a      	strb	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <Max30102_InterruptCallback>:


void Max30102_InterruptCallback(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	uint8_t Status;
	Max30102_ReadInterruptStatus(&Status);
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffdb 	bl	8000a24 <Max30102_ReadInterruptStatus>

	// Almost Full FIFO Interrupt handle
	if(Status & (1<<INT_A_FULL_BIT))
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da4a      	bge.n	8000b0c <Max30102_InterruptCallback+0xac>
	{
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e044      	b.n	8000b06 <Max30102_InterruptCallback+0xa6>
		{
			while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000a7c:	bf00      	nop
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <Max30102_InterruptCallback+0x148>)
 8000a86:	441a      	add	r2, r3
 8000a88:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4947      	ldr	r1, [pc, #284]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000a90:	440b      	add	r3, r1
 8000a92:	4619      	mov	r1, r3
 8000a94:	4610      	mov	r0, r2
 8000a96:	f7ff ff57 	bl	8000948 <Max30102_ReadFifo>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d1ee      	bne.n	8000a7e <Max30102_InterruptCallback+0x1e>
			if(IsFingerOnScreen)
 8000aa0:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00c      	beq.n	8000ac4 <Max30102_InterruptCallback+0x64>
			{
				if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a3f      	ldr	r2, [pc, #252]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d80e      	bhi.n	8000ada <Max30102_InterruptCallback+0x7a>
 8000abc:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e00a      	b.n	8000ada <Max30102_InterruptCallback+0x7a>
			}
			else
			{
				if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a38      	ldr	r2, [pc, #224]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000ad2:	d902      	bls.n	8000ada <Max30102_InterruptCallback+0x7a>
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <Max30102_InterruptCallback+0x154>)
 8000ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000aec:	fb01 f303 	mul.w	r3, r1, r3
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000af4:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <Max30102_InterruptCallback+0x158>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <Max30102_InterruptCallback+0x158>)
 8000afe:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	3301      	adds	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d9b7      	bls.n	8000a7c <Max30102_InterruptCallback+0x1c>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if(Status & (1<<INT_PPG_RDY_BIT))
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d041      	beq.n	8000b9a <Max30102_InterruptCallback+0x13a>
	{
		while(MAX30102_OK != Max30102_ReadFifo((RedBuffer+BufferHead), (IrBuffer+BufferHead)));
 8000b16:	bf00      	nop
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <Max30102_InterruptCallback+0x148>)
 8000b20:	441a      	add	r2, r3
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4920      	ldr	r1, [pc, #128]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000b2a:	440b      	add	r3, r1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f7ff ff0a 	bl	8000948 <Max30102_ReadFifo>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ee      	bne.n	8000b18 <Max30102_InterruptCallback+0xb8>
		if(IsFingerOnScreen)
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00c      	beq.n	8000b5e <Max30102_InterruptCallback+0xfe>
		{
			if(IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR) IsFingerOnScreen = 0;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d80e      	bhi.n	8000b74 <Max30102_InterruptCallback+0x114>
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e00a      	b.n	8000b74 <Max30102_InterruptCallback+0x114>
		}
		else
		{
			if(IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR) IsFingerOnScreen = 1;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <Max30102_InterruptCallback+0x14c>)
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b6c:	d902      	bls.n	8000b74 <Max30102_InterruptCallback+0x114>
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <Max30102_InterruptCallback+0x150>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <Max30102_InterruptCallback+0x154>)
 8000b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000b86:	fb01 f303 	mul.w	r3, r1, r3
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <Max30102_InterruptCallback+0x144>)
 8000b8e:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <Max30102_InterruptCallback+0x158>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <Max30102_InterruptCallback+0x158>)
 8000b98:	6013      	str	r3, [r2, #0]
	// Power Ready Interrupt handle
	if(Status & (1<<INT_PWR_RDY_BIT))
	{
	}

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200009dc 	.word	0x200009dc
 8000ba8:	2000052c 	.word	0x2000052c
 8000bac:	2000007c 	.word	0x2000007c
 8000bb0:	200009e8 	.word	0x200009e8
 8000bb4:	1b4e81b5 	.word	0x1b4e81b5
 8000bb8:	200009e4 	.word	0x200009e4

08000bbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	Max30102_InterruptCallback();
 8000bc6:	f7ff ff4b 	bl	8000a60 <Max30102_InterruptCallback>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <Max30102_Task>:

void Max30102_Task(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af04      	add	r7, sp, #16
	switch(StateMachine)
 8000bda:	4b4c      	ldr	r3, [pc, #304]	; (8000d0c <Max30102_Task+0x138>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	f200 8090 	bhi.w	8000d04 <Max30102_Task+0x130>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <Max30102_Task+0x18>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c35 	.word	0x08000c35
 8000bf4:	08000c63 	.word	0x08000c63
 8000bf8:	08000ccd 	.word	0x08000ccd
	{
		case MAX30102_STATE_BEGIN:
			HeartRate = 0;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <Max30102_Task+0x13c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
			Sp02Value = 0;
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <Max30102_Task+0x140>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
			if(IsFingerOnScreen)
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <Max30102_Task+0x144>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d073      	beq.n	8000cfa <Max30102_Task+0x126>
			{
				CollectedSamples = 0;
 8000c12:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <Max30102_Task+0x148>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
				BufferTail = BufferHead;
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <Max30102_Task+0x14c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <Max30102_Task+0x150>)
 8000c1e:	6013      	str	r3, [r2, #0]

				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 8000c20:	2024      	movs	r0, #36	; 0x24
 8000c22:	f7ff fe5c 	bl	80008de <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 8000c26:	2024      	movs	r0, #36	; 0x24
 8000c28:	f7ff fe67 	bl	80008fa <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_CALIBRATE;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <Max30102_Task+0x138>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c32:	e062      	b.n	8000cfa <Max30102_Task+0x126>

		case MAX30102_STATE_CALIBRATE:
				if(IsFingerOnScreen)
 8000c34:	4b38      	ldr	r3, [pc, #224]	; (8000d18 <Max30102_Task+0x144>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <Max30102_Task+0x7a>
				{
					if(CollectedSamples > (MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND))
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <Max30102_Task+0x148>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2bfa      	cmp	r3, #250	; 0xfa
 8000c44:	d95b      	bls.n	8000cfe <Max30102_Task+0x12a>
					{
						StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <Max30102_Task+0x138>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	701a      	strb	r2, [r3, #0]
				{
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
					StateMachine = MAX30102_STATE_BEGIN;
				}
			break;
 8000c4c:	e057      	b.n	8000cfe <Max30102_Task+0x12a>
					Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe45 	bl	80008de <Max30102_Led1PulseAmplitude>
					Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fe50 	bl	80008fa <Max30102_Led2PulseAmplitude>
					StateMachine = MAX30102_STATE_BEGIN;
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <Max30102_Task+0x138>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			break;
 8000c60:	e04d      	b.n	8000cfe <Max30102_Task+0x12a>

		case MAX30102_STATE_CALCULATE_HR:
			if(IsFingerOnScreen)
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <Max30102_Task+0x144>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d025      	beq.n	8000cb8 <Max30102_Task+0xe4>
			{
				maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLES_PER_SECOND, BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate, &IsHrValid);
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <Max30102_Task+0x150>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <Max30102_Task+0x154>)
 8000c74:	9203      	str	r2, [sp, #12]
 8000c76:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <Max30102_Task+0x13c>)
 8000c78:	9202      	str	r2, [sp, #8]
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <Max30102_Task+0x158>)
 8000c7c:	9201      	str	r2, [sp, #4]
 8000c7e:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <Max30102_Task+0x140>)
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	22fa      	movs	r2, #250	; 0xfa
 8000c84:	492a      	ldr	r1, [pc, #168]	; (8000d30 <Max30102_Task+0x15c>)
 8000c86:	482b      	ldr	r0, [pc, #172]	; (8000d34 <Max30102_Task+0x160>)
 8000c88:	f000 f89e 	bl	8000dc8 <maxim_heart_rate_and_oxygen_saturation>
				BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND) % MAX30102_BUFFER_LENGTH;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <Max30102_Task+0x150>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <Max30102_Task+0x164>)
 8000c96:	fba3 1302 	umull	r1, r3, r3, r2
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ca0:	fb01 f303 	mul.w	r3, r1, r3
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <Max30102_Task+0x150>)
 8000ca8:	6013      	str	r3, [r2, #0]
				CollectedSamples = 0;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <Max30102_Task+0x148>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
				StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <Max30102_Task+0x138>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
			{
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000cb6:	e025      	b.n	8000d04 <Max30102_Task+0x130>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff fe10 	bl	80008de <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff fe1b 	bl	80008fa <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <Max30102_Task+0x138>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			break;
 8000cca:	e01b      	b.n	8000d04 <Max30102_Task+0x130>

		case MAX30102_STATE_COLLECT_NEXT_PORTION:
			if(IsFingerOnScreen)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <Max30102_Task+0x144>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <Max30102_Task+0x112>
			{
				if(CollectedSamples > MAX30102_SAMPLES_PER_SECOND)
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <Max30102_Task+0x148>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b32      	cmp	r3, #50	; 0x32
 8000cdc:	d911      	bls.n	8000d02 <Max30102_Task+0x12e>
				{
					StateMachine = MAX30102_STATE_CALCULATE_HR;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <Max30102_Task+0x138>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);

				StateMachine = MAX30102_STATE_BEGIN;
			}
			break;
 8000ce4:	e00d      	b.n	8000d02 <Max30102_Task+0x12e>
				Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fdf9 	bl	80008de <Max30102_Led1PulseAmplitude>
				Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff fe04 	bl	80008fa <Max30102_Led2PulseAmplitude>
				StateMachine = MAX30102_STATE_BEGIN;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <Max30102_Task+0x138>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
			break;
 8000cf8:	e003      	b.n	8000d02 <Max30102_Task+0x12e>
			break;
 8000cfa:	bf00      	nop
 8000cfc:	e002      	b.n	8000d04 <Max30102_Task+0x130>
			break;
 8000cfe:	bf00      	nop
 8000d00:	e000      	b.n	8000d04 <Max30102_Task+0x130>
			break;
 8000d02:	bf00      	nop
	}
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200009f9 	.word	0x200009f9
 8000d10:	200009f4 	.word	0x200009f4
 8000d14:	200009ec 	.word	0x200009ec
 8000d18:	200009e8 	.word	0x200009e8
 8000d1c:	200009e4 	.word	0x200009e4
 8000d20:	200009dc 	.word	0x200009dc
 8000d24:	200009e0 	.word	0x200009e0
 8000d28:	200009f8 	.word	0x200009f8
 8000d2c:	200009f0 	.word	0x200009f0
 8000d30:	2000052c 	.word	0x2000052c
 8000d34:	2000007c 	.word	0x2000007c
 8000d38:	1b4e81b5 	.word	0x1b4e81b5

08000d3c <Max30102_Init>:





void Max30102_Init(I2C_HandleTypeDef *i2c){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <Max30102_Init+0x84>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
 	Max30102_Write_Reg(MODE_CONFIGURATION,0x40);	/// Reset Register's 		
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	2009      	movs	r0, #9
 8000d4e:	f7ff fc15 	bl	800057c <Max30102_Write_Reg>
	Max30102_Read_Reg(0,&uch_dummy);
 8000d52:	f107 030f 	add.w	r3, r7, #15
 8000d56:	4619      	mov	r1, r3
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fc2b 	bl	80005b4 <Max30102_Read_Reg>
	Max30102_FifoWritePointer(0x00);				
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fc76 	bl	8000650 <Max30102_FifoWritePointer>

	Max30102_FifoOverflowCounter(0x00);				
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fc84 	bl	8000672 <Max30102_FifoOverflowCounter>
	
	Max30102_FifoReadPointer(0x00);					
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fc92 	bl	8000694 <Max30102_FifoReadPointer>
	
	Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1);	
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fca0 	bl	80006b6 <Max30102_FifoSampleAveraging>
		
    Max30102_FifoRolloverEnable(0);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fcbf 	bl	80006fa <Max30102_FifoRolloverEnable>

	Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES);
 8000d7c:	2011      	movs	r0, #17
 8000d7e:	f7ff fcce 	bl	800071e <Max30102_FifoAlmostFullValue>
	
	Max30102_SetMode(MODE_SPO2_MODE);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fcfd 	bl	8000782 <Max30102_SetMode>
	
	Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fd1e 	bl	80007ca <Max30102_SpO2AdcRange>

	Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fd40 	bl	8000814 <Max30102_SpO2SampleRate>

	Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f7ff fd62 	bl	800085e <Max30102_SpO2LedPulseWidth>

	Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff fd9f 	bl	80008de <Max30102_Led1PulseAmplitude>

	Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fdaa 	bl	80008fa <Max30102_Led2PulseAmplitude>
	
	Max30102_SetIntAlmostFullEnabled(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fd7d 	bl	80008a6 <Max30102_SetIntAlmostFullEnabled>
	
	Max30102_SetIntFifoDataReadyEnabled(1);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff fd88 	bl	80008c2 <Max30102_SetIntFifoDataReadyEnabled>

	StateMachine = MAX30102_STATE_BEGIN;
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <Max30102_Init+0x88>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000078 	.word	0x20000078
 8000dc4:	200009f9 	.word	0x200009f9

08000dc8 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b0d3      	sub	sp, #332	; 0x14c
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8000dd2:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8000dd6:	6020      	str	r0, [r4, #0]
 8000dd8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8000ddc:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8000de0:	6001      	str	r1, [r0, #0]
 8000de2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8000de6:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8000dea:	600a      	str	r2, [r1, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000df2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000df6:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc; 
    int32_t n_y_dc_max, n_x_dc_max; 
    int32_t n_y_dc_max_idx, n_x_dc_max_idx; 
    int32_t an_ratio[5],n_ratio_average; 
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8000df8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dfc:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal    
    un_ir_mean =0; 
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e12:	e021      	b.n	8000e58 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8000e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000e1e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e36:	3301      	adds	r3, #1
 8000e38:	4ad3      	ldr	r2, [pc, #844]	; (8001188 <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
 8000e3a:	fba2 1203 	umull	r1, r2, r2, r3
 8000e3e:	0952      	lsrs	r2, r2, #5
 8000e40:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e44:	fb01 f202 	mul.w	r2, r1, r2
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000e52:	3301      	adds	r3, #1
 8000e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e60:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbd4      	blt.n	8000e14 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8000e6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8000e80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e84:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000e94:	e025      	b.n	8000ee2 <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8000e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8000ea0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4ab6      	ldr	r2, [pc, #728]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8000ebc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4ab1      	ldr	r2, [pc, #708]	; (8001188 <maxim_heart_rate_and_oxygen_saturation+0x3c0>)
 8000ec4:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec8:	0952      	lsrs	r2, r2, #5
 8000eca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000ece:	fb01 f202 	mul.w	r2, r1, r2
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8000ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000edc:	3301      	adds	r3, #1
 8000ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000ee2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ee6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000eea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbd0      	blt.n	8000e96 <maxim_heart_rate_and_oxygen_saturation+0xce>
	}
    
    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000efa:	e02c      	b.n	8000f56 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8000efc:	4aa3      	ldr	r2, [pc, #652]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	499f      	ldr	r1, [pc, #636]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f12:	441a      	add	r2, r3
 8000f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f18:	3302      	adds	r3, #2
 8000f1a:	499c      	ldr	r1, [pc, #624]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f20:	441a      	add	r2, r3
 8000f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f26:	3303      	adds	r3, #3
 8000f28:	4998      	ldr	r1, [pc, #608]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4; 
 8000f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da00      	bge.n	8000f3e <maxim_heart_rate_and_oxygen_saturation+0x176>
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	109b      	asrs	r3, r3, #2
 8000f40:	4619      	mov	r1, r3
 8000f42:	4a92      	ldr	r2, [pc, #584]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8000f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f5a:	2bf5      	cmp	r3, #245	; 0xf5
 8000f5c:	ddce      	ble.n	8000efc <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f64:	e015      	b.n	8000f92 <maxim_heart_rate_and_oxygen_saturation+0x1ca>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8000f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a87      	ldr	r2, [pc, #540]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f72:	4986      	ldr	r1, [pc, #536]	; (800118c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8000f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f7c:	1ad2      	subs	r2, r2, r3
 8000f7e:	4984      	ldr	r1, [pc, #528]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8000f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f96:	2bf4      	cmp	r3, #244	; 0xf4
 8000f98:	dde5      	ble.n	8000f66 <maxim_heart_rate_and_oxygen_saturation+0x19e>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000fa0:	e019      	b.n	8000fd6 <maxim_heart_rate_and_oxygen_saturation+0x20e>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8000fa2:	4a7b      	ldr	r2, [pc, #492]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4977      	ldr	r1, [pc, #476]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb8:	4413      	add	r3, r2
 8000fba:	0fda      	lsrs	r2, r3, #31
 8000fbc:	4413      	add	r3, r2
 8000fbe:	105b      	asrs	r3, r3, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4a73      	ldr	r2, [pc, #460]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 8000fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fda:	2bf3      	cmp	r3, #243	; 0xf3
 8000fdc:	dde1      	ble.n	8000fa2 <maxim_heart_rate_and_oxygen_saturation+0x1da>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fe4:	e039      	b.n	800105a <maxim_heart_rate_and_oxygen_saturation+0x292>
        s= 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8000fec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ff0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000ff4:	e018      	b.n	8001028 <maxim_heart_rate_and_oxygen_saturation+0x260>
            s -= an_dx[k] *auw_hamm[k-i] ; 
 8000ff6:	4a66      	ldr	r2, [pc, #408]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8000ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001004:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001008:	1a8a      	subs	r2, r1, r2
 800100a:	4962      	ldr	r1, [pc, #392]	; (8001194 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800100c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 800101e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001022:	3301      	adds	r3, #1
 8001024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001028:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800102c:	3304      	adds	r3, #4
 800102e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001032:	429a      	cmp	r2, r3
 8001034:	dddf      	ble.n	8000ff6 <maxim_heart_rate_and_oxygen_saturation+0x22e>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm 
 8001036:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800103a:	4a57      	ldr	r2, [pc, #348]	; (8001198 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1252      	asrs	r2, r2, #9
 8001042:	17db      	asrs	r3, r3, #31
 8001044:	1ad2      	subs	r2, r2, r3
 8001046:	4952      	ldr	r1, [pc, #328]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001048:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8001050:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001054:	3301      	adds	r3, #1
 8001056:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800105a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800105e:	2bee      	cmp	r3, #238	; 0xee
 8001060:	ddc1      	ble.n	8000fe6 <maxim_heart_rate_and_oxygen_saturation+0x21e>
    }

 
    n_th1=0; // threshold calculation
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800106e:	e011      	b.n	8001094 <maxim_heart_rate_and_oxygen_saturation+0x2cc>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfb8      	it	lt
 800107e:	425b      	neglt	r3, r3
 8001080:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001084:	4413      	add	r3, r2
 8001086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 800108a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800108e:	3301      	adds	r3, #1
 8001090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001098:	2bf4      	cmp	r3, #244	; 0xf4
 800109a:	dde9      	ble.n	8001070 <maxim_heart_rate_and_oxygen_saturation+0x2a8>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 800109c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010a0:	4a3e      	ldr	r2, [pc, #248]	; (800119c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	1192      	asrs	r2, r2, #6
 80010a8:	17db      	asrs	r3, r3, #31
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal         
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks 
 80010b0:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80010b4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80010b8:	2305      	movs	r3, #5
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2308      	movs	r3, #8
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	23f5      	movs	r3, #245	; 0xf5
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80010ca:	f000 fb91 	bl	80017f0 <maxim_find_peaks>

    n_peak_interval_sum =0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 80010d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010d8:	2b01      	cmp	r3, #1
 80010da:	dd48      	ble.n	800116e <maxim_heart_rate_and_oxygen_saturation+0x3a6>
        for (k=1; k<n_npks; k++)
 80010dc:	2301      	movs	r3, #1
 80010de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80010e2:	e01b      	b.n	800111c <maxim_heart_rate_and_oxygen_saturation+0x354>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 80010e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80010f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80010f8:	1e59      	subs	r1, r3, #1
 80010fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800110c:	4413      	add	r3, r2
 800110e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 8001112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800111c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001120:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001124:	429a      	cmp	r2, r3
 8001126:	dbdd      	blt.n	80010e4 <maxim_heart_rate_and_oxygen_saturation+0x31c>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8001128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800112c:	3b01      	subs	r3, #1
 800112e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 800113a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001146:	eddf 6a16 	vldr	s13, [pc, #88]	; 80011a0 <maxim_heart_rate_and_oxygen_saturation+0x3d8>
 800114a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 2a90 	vmov	r2, s15
 800115e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001162:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8001164:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <maxim_heart_rate_and_oxygen_saturation+0x3b6>
    }
    else  {
        *pn_heart_rate = -999;
 800116e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <maxim_heart_rate_and_oxygen_saturation+0x3dc>)
 8001174:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 8001176:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
    }
            
    for ( k=0 ; k<n_npks ;k++)
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001184:	e026      	b.n	80011d4 <maxim_heart_rate_and_oxygen_saturation+0x40c>
 8001186:	bf00      	nop
 8001188:	1b4e81b5 	.word	0x1b4e81b5
 800118c:	20000dd4 	.word	0x20000dd4
 8001190:	200009fc 	.word	0x200009fc
 8001194:	08005ed4 	.word	0x08005ed4
 8001198:	725f9bed 	.word	0x725f9bed
 800119c:	42df9bb1 	.word	0x42df9bb1
 80011a0:	45bb8000 	.word	0x45bb8000
 80011a4:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2; 
 80011a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	1c9a      	adds	r2, r3, #2
 80011ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80011c4:	443b      	add	r3, r7
 80011c6:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 80011ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbe3      	blt.n	80011a8 <maxim_heart_rate_and_oxygen_saturation+0x3e0>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80011e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011e4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80011f4:	e032      	b.n	800125c <maxim_heart_rate_and_oxygen_saturation+0x494>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80011f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001200:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	4ab1      	ldr	r2, [pc, #708]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 800120e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8001216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001220:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4aaa      	ldr	r2, [pc, #680]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 800122e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800123a:	3301      	adds	r3, #1
 800123c:	4aa7      	ldr	r2, [pc, #668]	; (80014dc <maxim_heart_rate_and_oxygen_saturation+0x714>)
 800123e:	fba2 1203 	umull	r1, r2, r2, r3
 8001242:	0952      	lsrs	r2, r2, #5
 8001244:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001248:	fb01 f202 	mul.w	r2, r1, r2
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8001252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800125c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001260:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001264:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	dbc3      	blt.n	80011f6 <maxim_heart_rate_and_oxygen_saturation+0x42e>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0; 
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800127a:	e059      	b.n	8001330 <maxim_heart_rate_and_oxygen_saturation+0x568>
        un_only_once =1;
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8001282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800128c:	443b      	add	r3, r7
 800128e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8001296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800129a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 800129e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012a2:	2bef      	cmp	r3, #239	; 0xef
 80012a4:	dc3f      	bgt.n	8001326 <maxim_heart_rate_and_oxygen_saturation+0x55e>
 80012a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	dd3b      	ble.n	8001326 <maxim_heart_rate_and_oxygen_saturation+0x55e>
            for(i= m-5;i<m+5; i++)
 80012ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012b2:	3b05      	subs	r3, #5
 80012b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012b8:	e025      	b.n	8001306 <maxim_heart_rate_and_oxygen_saturation+0x53e>
                if (an_x[i]<n_c_min){
 80012ba:	4a86      	ldr	r2, [pc, #536]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 80012bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dd17      	ble.n	80012fc <maxim_heart_rate_and_oxygen_saturation+0x534>
                    if (un_only_once >0){
 80012cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <maxim_heart_rate_and_oxygen_saturation+0x512>
                       un_only_once =0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   } 
                   n_c_min= an_x[i] ;
 80012da:	4a7e      	ldr	r2, [pc, #504]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 80012dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 80012e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80012f2:	443b      	add	r3, r7
 80012f4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80012f8:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 80012fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001300:	3301      	adds	r3, #1
 8001302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800130a:	3304      	adds	r3, #4
 800130c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001310:	429a      	cmp	r2, r3
 8001312:	ddd2      	ble.n	80012ba <maxim_heart_rate_and_oxygen_saturation+0x4f2>
                }
            if (un_only_once ==0)
 8001314:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <maxim_heart_rate_and_oxygen_saturation+0x55e>
                n_exact_ir_valley_locs_count ++ ;
 800131c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001320:	3301      	adds	r3, #1
 8001322:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8001326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800132a:	3301      	adds	r3, #1
 800132c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001334:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001338:	429a      	cmp	r2, r3
 800133a:	db9f      	blt.n	800127c <maxim_heart_rate_and_oxygen_saturation+0x4b4>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 800133c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001340:	2b01      	cmp	r3, #1
 8001342:	dc08      	bgt.n	8001356 <maxim_heart_rate_and_oxygen_saturation+0x58e>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8001344:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800134a:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0; 
 800134c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
       return;
 8001354:	e240      	b.n	80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa10>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800135c:	e04c      	b.n	80013f8 <maxim_heart_rate_and_oxygen_saturation+0x630>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 800135e:	4a5d      	ldr	r2, [pc, #372]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800136c:	3301      	adds	r3, #1
 800136e:	4959      	ldr	r1, [pc, #356]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 8001370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001374:	441a      	add	r2, r3
 8001376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800137a:	3302      	adds	r3, #2
 800137c:	4955      	ldr	r1, [pc, #340]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 800137e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001382:	441a      	add	r2, r3
 8001384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001388:	3303      	adds	r3, #3
 800138a:	4952      	ldr	r1, [pc, #328]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 800138c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001390:	4413      	add	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	da00      	bge.n	8001398 <maxim_heart_rate_and_oxygen_saturation+0x5d0>
 8001396:	3303      	adds	r3, #3
 8001398:	109b      	asrs	r3, r3, #2
 800139a:	4619      	mov	r1, r3
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <maxim_heart_rate_and_oxygen_saturation+0x70c>)
 800139e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 80013a6:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013b4:	3301      	adds	r3, #1
 80013b6:	4948      	ldr	r1, [pc, #288]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013bc:	441a      	add	r2, r3
 80013be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013c2:	3302      	adds	r3, #2
 80013c4:	4944      	ldr	r1, [pc, #272]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ca:	441a      	add	r2, r3
 80013cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013d0:	3303      	adds	r3, #3
 80013d2:	4941      	ldr	r1, [pc, #260]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d8:	4413      	add	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da00      	bge.n	80013e0 <maxim_heart_rate_and_oxygen_saturation+0x618>
 80013de:	3303      	adds	r3, #3
 80013e0:	109b      	asrs	r3, r3, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a3c      	ldr	r2, [pc, #240]	; (80014d8 <maxim_heart_rate_and_oxygen_saturation+0x710>)
 80013e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80013ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013f2:	3301      	adds	r3, #1
 80013f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80013f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013fc:	2bf5      	cmp	r3, #245	; 0xf5
 80013fe:	ddae      	ble.n	800135e <maxim_heart_rate_and_oxygen_saturation+0x596>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0; 
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0; 
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    for(k=0; k< 5; k++) an_ratio[k]=0;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001412:	e00d      	b.n	8001430 <maxim_heart_rate_and_oxygen_saturation+0x668>
 8001414:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001418:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001420:	2100      	movs	r1, #0
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800142a:	3301      	adds	r3, #1
 800142c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001434:	2b04      	cmp	r3, #4
 8001436:	dded      	ble.n	8001414 <maxim_heart_rate_and_oxygen_saturation+0x64c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800143e:	e017      	b.n	8001470 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){             
 8001440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800144a:	443b      	add	r3, r7
 800144c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001450:	2bfa      	cmp	r3, #250	; 0xfa
 8001452:	dd08      	ble.n	8001466 <maxim_heart_rate_and_oxygen_saturation+0x69e>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001454:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 800145a:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0; 
 800145c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
            return;
 8001464:	e1b8      	b.n	80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa10>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001470:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001478:	429a      	cmp	r2, r3
 800147a:	dbe1      	blt.n	8001440 <maxim_heart_rate_and_oxygen_saturation+0x678>
        }
    }
    // find max between two valley locations 
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001482:	e14c      	b.n	800171e <maxim_heart_rate_and_oxygen_saturation+0x956>
        n_y_dc_max= -16777216 ; 
 8001484:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001488:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216; 
 800148c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001490:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8001494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001498:	3301      	adds	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014a0:	443b      	add	r3, r7
 80014a2:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 80014a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014b0:	443b      	add	r3, r7
 80014b2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	f340 812b 	ble.w	8001714 <maxim_heart_rate_and_oxygen_saturation+0x94c>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80014be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014c8:	443b      	add	r3, r7
 80014ca:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80014ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014d2:	e034      	b.n	800153e <maxim_heart_rate_and_oxygen_saturation+0x776>
 80014d4:	20000dd4 	.word	0x20000dd4
 80014d8:	200011bc 	.word	0x200011bc
 80014dc:	1b4e81b5 	.word	0x1b4e81b5
 80014e0:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80014e4:	4abe      	ldr	r2, [pc, #760]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 80014e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80014f2:	429a      	cmp	r2, r3
 80014f4:	da0a      	bge.n	800150c <maxim_heart_rate_and_oxygen_saturation+0x744>
 80014f6:	4aba      	ldr	r2, [pc, #744]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 80014f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001504:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001508:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 800150c:	4ab5      	ldr	r2, [pc, #724]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 800150e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800151a:	429a      	cmp	r2, r3
 800151c:	da0a      	bge.n	8001534 <maxim_heart_rate_and_oxygen_saturation+0x76c>
 800151e:	4ab1      	ldr	r2, [pc, #708]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800152c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8001534:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001538:	3301      	adds	r3, #1
 800153a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800153e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001542:	3301      	adds	r3, #1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800154a:	443b      	add	r3, r7
 800154c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001550:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001554:	429a      	cmp	r2, r3
 8001556:	dbc5      	blt.n	80014e4 <maxim_heart_rate_and_oxygen_saturation+0x71c>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8001558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800155c:	3301      	adds	r3, #1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001564:	443b      	add	r3, r7
 8001566:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800156a:	4a9e      	ldr	r2, [pc, #632]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 800156c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800157a:	443b      	add	r3, r7
 800157c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001580:	4998      	ldr	r1, [pc, #608]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 8001582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001586:	1ad2      	subs	r2, r2, r3
 8001588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001592:	443b      	add	r3, r7
 8001594:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001598:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800159c:	1acb      	subs	r3, r1, r3
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ; 
 80015a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015b0:	443b      	add	r3, r7
 80015b2:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015b6:	4a8b      	ldr	r2, [pc, #556]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 80015b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015c0:	3301      	adds	r3, #1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015c8:	443b      	add	r3, r7
 80015ca:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80015ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015d8:	443b      	add	r3, r7
 80015da:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80015de:	1acb      	subs	r3, r1, r3
 80015e0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80015e4:	fb91 f3f3 	sdiv	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        
        
            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 80015ee:	4a7d      	ldr	r2, [pc, #500]	; (80017e4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>)
 80015f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8001602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001606:	3301      	adds	r3, #1
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800160e:	443b      	add	r3, r7
 8001610:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001614:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 8001616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800161a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001624:	443b      	add	r3, r7
 8001626:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800162a:	496d      	ldr	r1, [pc, #436]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 800162c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001630:	1ad2      	subs	r2, r2, r3
 8001632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800163c:	443b      	add	r3, r7
 800163e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001642:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001646:	1acb      	subs	r3, r1, r3
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]); 
 8001650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800165a:	443b      	add	r3, r7
 800165c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 8001662:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800166a:	3301      	adds	r3, #1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001672:	443b      	add	r3, r7
 8001674:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8001678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001682:	443b      	add	r3, r7
 8001684:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001688:	1acb      	subs	r3, r1, r3
 800168a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800168e:	fb91 f3f3 	sdiv	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <maxim_heart_rate_and_oxygen_saturation+0xa18>)
 800169a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800169e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80016ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	11db      	asrs	r3, r3, #7
 80016ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80016be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	11db      	asrs	r3, r3, #7
 80016cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80016d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dd1d      	ble.n	8001714 <maxim_heart_rate_and_oxygen_saturation+0x94c>
 80016d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016dc:	2b04      	cmp	r3, #4
 80016de:	dc19      	bgt.n	8001714 <maxim_heart_rate_and_oxygen_saturation+0x94c>
 80016e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <maxim_heart_rate_and_oxygen_saturation+0x94c>
            {   
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80016e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016ec:	2264      	movs	r2, #100	; 0x64
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016f6:	fb92 f1f3 	sdiv	r1, r2, r3
 80016fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001702:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 800170a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800170e:	3301      	adds	r3, #1
 8001710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001718:	3301      	adds	r3, #1
 800171a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800171e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001722:	3b01      	subs	r3, #1
 8001724:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001728:	429a      	cmp	r2, r3
 800172a:	f6ff aeab 	blt.w	8001484 <maxim_heart_rate_and_oxygen_saturation+0x6bc>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f94f 	bl	80019da <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 800173c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001740:	0fda      	lsrs	r2, r3, #31
 8001742:	4413      	add	r3, r2
 8001744:	105b      	asrs	r3, r3, #1
 8001746:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 800174a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800174e:	2b01      	cmp	r3, #1
 8001750:	dd17      	ble.n	8001782 <maxim_heart_rate_and_oxygen_saturation+0x9ba>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800175c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001760:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001764:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001768:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001774:	4413      	add	r3, r2
 8001776:	0fda      	lsrs	r2, r3, #31
 8001778:	4413      	add	r3, r2
 800177a:	105b      	asrs	r3, r3, #1
 800177c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001780:	e009      	b.n	8001796 <maxim_heart_rate_and_oxygen_saturation+0x9ce>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8001782:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800178a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8001796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800179a:	2b02      	cmp	r3, #2
 800179c:	dd14      	ble.n	80017c8 <maxim_heart_rate_and_oxygen_saturation+0xa00>
 800179e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017a2:	2bb7      	cmp	r3, #183	; 0xb7
 80017a4:	dc10      	bgt.n	80017c8 <maxim_heart_rate_and_oxygen_saturation+0xa00>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <maxim_heart_rate_and_oxygen_saturation+0xa20>)
 80017a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80017b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80017b8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80017bc:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80017be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <maxim_heart_rate_and_oxygen_saturation+0xa10>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80017c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80017ce:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0; 
 80017d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
    }
}
 80017d8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000dd4 	.word	0x20000dd4
 80017e4:	200011bc 	.word	0x200011bc
 80017e8:	08005f14 	.word	0x08005f14
 80017ec:	fffffc19 	.word	0xfffffc19

080017f0 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f812 	bl	8001832 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 f880 	bl	800191a <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	429a      	cmp	r2, r3
 8001822:	bfa8      	it	ge
 8001824:	461a      	movge	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    
    while (i < n_size-1){
 800184a:	e05a      	b.n	8001902 <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a3a      	ldr	r2, [r7, #32]
 8001858:	429a      	cmp	r2, r3
 800185a:	da4f      	bge.n	80018fc <maxim_peaks_above_min_height+0xca>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800186c:	3b01      	subs	r3, #1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	440b      	add	r3, r1
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	dd40      	ble.n	80018fc <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800187e:	e002      	b.n	8001886 <maxim_peaks_above_min_height+0x54>
                n_width++;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	3301      	adds	r3, #1
 8001884:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	dd0d      	ble.n	80018ae <maxim_peaks_above_min_height+0x7c>
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	440b      	add	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	440b      	add	r3, r1
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d0e8      	beq.n	8001880 <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	440b      	add	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	440b      	add	r3, r1
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dd13      	ble.n	80018f2 <maxim_peaks_above_min_height+0xc0>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b0e      	cmp	r3, #14
 80018d0:	dc0f      	bgt.n	80018f2 <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;        
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	6011      	str	r1, [r2, #0]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	3301      	adds	r3, #1
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e003      	b.n	80018fa <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80018fa:	e002      	b.n	8001902 <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	db9f      	blt.n	800184c <maxim_peaks_above_min_height+0x1a>
    }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f895 	bl	8001a60 <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e03e      	b.n	80019bc <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	e02c      	b.n	80019ae <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d005      	beq.n	8001972 <maxim_remove_close_peaks+0x58>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	440b      	add	r3, r1
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	e001      	b.n	8001976 <maxim_remove_close_peaks+0x5c>
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	dc04      	bgt.n	800198c <maxim_remove_close_peaks+0x72>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	425b      	negs	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	da0d      	bge.n	80019a8 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	441a      	add	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1c58      	adds	r0, r3, #1
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	6008      	str	r0, [r1, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	440b      	add	r3, r1
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	3301      	adds	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbce      	blt.n	8001954 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3301      	adds	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbbb      	blt.n	800193e <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f804 	bl	80019da <maxim_sort_ascend>
}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e02f      	b.n	8001a4a <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e00f      	b.n	8001a1c <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a02:	3b01      	subs	r3, #1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	441a      	add	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	440b      	add	r3, r1
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dd0a      	ble.n	8001a38 <maxim_sort_ascend+0x5e>
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbe1      	blt.n	80019fc <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbcb      	blt.n	80019ea <maxim_sort_ascend+0x10>
    }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e037      	b.n	8001ae2 <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	4413      	add	r3, r2
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	e00f      	b.n	8001aa4 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	441a      	add	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	440b      	add	r3, r1
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	dd12      	ble.n	8001ad0 <maxim_sort_indices_descend+0x70>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aba:	3b01      	subs	r3, #1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	440b      	add	r3, r1
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	440b      	add	r3, r1
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dcd9      	bgt.n	8001a84 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbc3      	blt.n	8001a72 <maxim_sort_indices_descend+0x12>
    }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	; 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <UART2_SendString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART2_SendString(char* s) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fb65 	bl	80001d0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <UART2_SendString+0x28>)
 8001b12:	f002 ffc3 	bl	8004a9c <HAL_UART_Transmit>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200015f8 	.word	0x200015f8

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b598      	push	{r3, r4, r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f000 facf 	bl	80020ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f830 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f000 f8e2 	bl	8001cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b34:	f000 f872 	bl	8001c1c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 f8ae 	bl	8001c98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART2_SendString("START\n\r");
 8001b3c:	480f      	ldr	r0, [pc, #60]	; (8001b7c <main+0x58>)
 8001b3e:	f7ff ffdb 	bl	8001af8 <UART2_SendString>
  Max30102_Init(&hi2c1);
 8001b42:	480f      	ldr	r0, [pc, #60]	; (8001b80 <main+0x5c>)
 8001b44:	f7ff f8fa 	bl	8000d3c <Max30102_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Max30102_Task();
 8001b48:	f7ff f844 	bl	8000bd4 <Max30102_Task>
	  		sprintf(UartBuffer, "%c[2J%c[H", 27, 27);
 8001b4c:	231b      	movs	r3, #27
 8001b4e:	221b      	movs	r2, #27
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <main+0x60>)
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <main+0x64>)
 8001b54:	f003 fcfa 	bl	800554c <siprintf>
	  		UART2_SendString(UartBuffer);
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <main+0x64>)
 8001b5a:	f7ff ffcd 	bl	8001af8 <UART2_SendString>

	  		sprintf(UartBuffer, "HR: %d\n\rSpO2: %d\n\r", Max30102_GetHeartRate(), Max30102_GetSpO2Value());
 8001b5e:	f7fe fedb 	bl	8000918 <Max30102_GetHeartRate>
 8001b62:	4604      	mov	r4, r0
 8001b64:	f7fe fee4 	bl	8000930 <Max30102_GetSpO2Value>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <main+0x68>)
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <main+0x64>)
 8001b70:	f003 fcec 	bl	800554c <siprintf>
	  		UART2_SendString(UartBuffer);
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <main+0x64>)
 8001b76:	f7ff ffbf 	bl	8001af8 <UART2_SendString>
  {
 8001b7a:	e7e5      	b.n	8001b48 <main+0x24>
 8001b7c:	08005eac 	.word	0x08005eac
 8001b80:	200015a4 	.word	0x200015a4
 8001b84:	08005eb4 	.word	0x08005eb4
 8001b88:	20001680 	.word	0x20001680
 8001b8c:	08005ec0 	.word	0x08005ec0

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b096      	sub	sp, #88	; 0x58
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2244      	movs	r2, #68	; 0x44
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fcf4 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bb6:	f001 fc11 	bl	80033dc <HAL_PWREx_ControlVoltageScaling>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bc0:	f000 f8fc 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bd0:	2360      	movs	r3, #96	; 0x60
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 fc53 	bl	8003488 <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001be8:	f000 f8e8 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	230f      	movs	r3, #15
 8001bee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f81b 	bl	8003c40 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c10:	f000 f8d4 	bl	8001dbc <Error_Handler>
  }
}
 8001c14:	bf00      	nop
 8001c16:	3758      	adds	r7, #88	; 0x58
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_I2C1_Init+0x78>)
 8001c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c28:	f640 6214 	movw	r2, #3604	; 0xe14
 8001c2c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c5a:	f000 fd97 	bl	800278c <HAL_I2C_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c64:	f000 f8aa 	bl	8001dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c6c:	f001 fb10 	bl	8003290 <HAL_I2CEx_ConfigAnalogFilter>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c76:	f000 f8a1 	bl	8001dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_I2C1_Init+0x74>)
 8001c7e:	f001 fb52 	bl	8003326 <HAL_I2CEx_ConfigDigitalFilter>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c88:	f000 f898 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200015a4 	.word	0x200015a4
 8001c94:	40005400 	.word	0x40005400

08001c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <MX_USART2_UART_Init+0x5c>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0x58>)
 8001cdc:	f002 fe90 	bl	8004a00 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ce6:	f000 f869 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200015f8 	.word	0x200015f8
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_GPIO_Init+0xbc>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <MX_GPIO_Init+0xc0>)
 8001d5c:	f000 fce6 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <MX_GPIO_Init+0xc0>)
 8001d78:	f000 fb2e 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f000 fb1f 	bl	80023d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2017      	movs	r0, #23
 8001da0:	f000 fae3 	bl	800236a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001da4:	2017      	movs	r0, #23
 8001da6:	f000 fafc 	bl	80023a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	48000800 	.word	0x48000800

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_MspInit+0x44>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_MspInit+0x44>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_MspInit+0x44>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_MspInit+0x44>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_MspInit+0x44>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ac      	sub	sp, #176	; 0xb0
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2288      	movs	r2, #136	; 0x88
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fbab 	bl	800558c <memset>
  if(hi2c->Instance==I2C1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <HAL_I2C_MspInit+0xb0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d13a      	bne.n	8001eb6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 f91b 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e58:	f7ff ffb0 	bl	8001dbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7a:	2312      	movs	r3, #18
 8001e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e96:	4619      	mov	r1, r3
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <HAL_I2C_MspInit+0xb8>)
 8001e9a:	f000 fa9d 	bl	80023d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_I2C_MspInit+0xb4>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	37b0      	adds	r7, #176	; 0xb0
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000400 	.word	0x48000400

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0ac      	sub	sp, #176	; 0xb0
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2288      	movs	r2, #136	; 0x88
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fb4d 	bl	800558c <memset>
  if(huart->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <HAL_UART_MspInit+0xb0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d13b      	bne.n	8001f74 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 f8bd 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f14:	f7ff ff52 	bl	8001dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f22:	6593      	str	r3, [r2, #88]	; 0x58
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_UART_MspInit+0xb4>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f60:	2307      	movs	r3, #7
 8001f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f000 fa32 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	37b0      	adds	r7, #176	; 0xb0
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40004400 	.word	0x40004400
 8001f80:	40021000 	.word	0x40021000

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <NMI_Handler+0x4>

08001f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f000 f8d0 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001fdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fe0:	f000 fbbc 	bl	800275c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002018:	f003 fac0 	bl	800559c <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20018000 	.word	0x20018000
 8002048:	00000400 	.word	0x00000400
 800204c:	200016a0 	.word	0x200016a0
 8002050:	200017f0 	.word	0x200017f0

08002054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800207c:	f7ff ffea 	bl	8002054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <LoopForever+0x16>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a6:	f003 fa7f 	bl	80055a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020aa:	f7ff fd3b 	bl	8001b24 <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020bc:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 80020c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020c4:	200017f0 	.word	0x200017f0

080020c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_2_IRQHandler>

080020ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f93d 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020da:	200f      	movs	r0, #15
 80020dc:	f000 f80e 	bl	80020fc <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e001      	b.n	80020f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ec:	f7ff fe6c 	bl	8001dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f0:	79fb      	ldrb	r3, [r7, #7]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_InitTick+0x6c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d023      	beq.n	8002158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_InitTick+0x70>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_InitTick+0x6c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f949 	bl	80023be <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d809      	bhi.n	800214c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f913 	bl	800236a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_InitTick+0x74>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e007      	b.n	800215c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e004      	b.n	800215c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e001      	b.n	800215c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008
 8002198:	200016a4 	.word	0x200016a4

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200016a4 	.word	0x200016a4

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800237c:	f7ff ff3e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	6978      	ldr	r0, [r7, #20]
 8002388:	f7ff ff8e 	bl	80022a8 <NVIC_EncodePriority>
 800238c:	4602      	mov	r2, r0
 800238e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff5d 	bl	8002254 <__NVIC_SetPriority>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff31 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa2 	bl	8002310 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	e17f      	b.n	80026e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8171 	beq.w	80026e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_GPIO_Init+0x40>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d130      	bne.n	800247a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244e:	2201      	movs	r2, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0201 	and.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b03      	cmp	r3, #3
 8002484:	d118      	bne.n	80024b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ac 	beq.w	80026e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <HAL_GPIO_Init+0x330>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	4a5e      	ldr	r2, [pc, #376]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6613      	str	r3, [r2, #96]	; 0x60
 8002596:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <HAL_GPIO_Init+0x330>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <HAL_GPIO_Init+0x334>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025cc:	d025      	beq.n	800261a <HAL_GPIO_Init+0x242>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_Init+0x338>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <HAL_GPIO_Init+0x23e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_GPIO_Init+0x33c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x23a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_GPIO_Init+0x340>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x236>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4c      	ldr	r2, [pc, #304]	; (800271c <HAL_GPIO_Init+0x344>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x232>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	; (8002720 <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x22e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_GPIO_Init+0x34c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x22a>
 80025fe:	2306      	movs	r3, #6
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002602:	2307      	movs	r3, #7
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x244>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x244>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x244>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x244>
 800261a:	2300      	movs	r3, #0
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_GPIO_Init+0x334>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_GPIO_Init+0x350>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800265e:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_GPIO_Init+0x350>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_GPIO_Init+0x350>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_GPIO_Init+0x350>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f47f ae78 	bne.w	80023e8 <HAL_GPIO_Init+0x10>
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800
 8002718:	48000c00 	.word	0x48000c00
 800271c:	48001000 	.word	0x48001000
 8002720:	48001400 	.word	0x48001400
 8002724:	48001800 	.word	0x48001800
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002748:	e002      	b.n	8002750 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fa1e 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e08d      	b.n	80028ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fb2c 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	e006      	b.n	8002814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d108      	bne.n	800282e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	e007      	b.n	800283e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800284c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69d9      	ldr	r1, [r3, #28]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	460b      	mov	r3, r1
 80028d8:	813b      	strh	r3, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 80f9 	bne.w	8002ade <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x34>
 80028f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0ed      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Mem_Write+0x4e>
 800290e:	2302      	movs	r3, #2
 8002910:	e0e6      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800291a:	f7ff fc3f 	bl	800219c <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fac3 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d1      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2221      	movs	r2, #33	; 0x21
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002964:	88f8      	ldrh	r0, [r7, #6]
 8002966:	893a      	ldrh	r2, [r7, #8]
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4603      	mov	r3, r0
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f9d3 	bl	8002d20 <I2C_RequestMemoryWrite>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0a9      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d90e      	bls.n	80029b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fc3d 	bl	800322c <I2C_TransferConfig>
 80029b2:	e00f      	b.n	80029d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fc2c 	bl	800322c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fabc 	bl	8002f56 <I2C_WaitOnTXISFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e07b      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d034      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d130      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa3f 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e04d      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2bff      	cmp	r3, #255	; 0xff
 8002a4c:	d90e      	bls.n	8002a6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	; 0xff
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fbe1 	bl	800322c <I2C_TransferConfig>
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fbd0 	bl	800322c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d19e      	bne.n	80029d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 faa2 	bl	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01a      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_I2C_Mem_Write+0x224>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
  }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	fe00e800 	.word	0xfe00e800

08002aec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	f040 80fd 	bne.w	8002d0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x34>
 8002b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0f1      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x4e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0ea      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b42:	f7ff fb2b 	bl	800219c <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f9af 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d5      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2222      	movs	r2, #34	; 0x22
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b8c:	88f8      	ldrh	r0, [r7, #6]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f913 	bl	8002dc8 <I2C_RequestMemoryRead>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ad      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2bff      	cmp	r3, #255	; 0xff
 8002bbc:	d90e      	bls.n	8002bdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	22ff      	movs	r2, #255	; 0xff
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	8979      	ldrh	r1, [r7, #10]
 8002bcc:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <HAL_I2C_Mem_Read+0x22c>)
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fb29 	bl	800322c <I2C_TransferConfig>
 8002bda:	e00f      	b.n	8002bfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_I2C_Mem_Read+0x22c>)
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fb18 	bl	800322c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	2200      	movs	r2, #0
 8002c04:	2104      	movs	r1, #4
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f956 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07c      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d034      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d130      	bne.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f927 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e04d      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d90e      	bls.n	8002c9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fac9 	bl	800322c <I2C_TransferConfig>
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fab8 	bl	800322c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d19a      	bne.n	8002bfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f98a 	bl	8002fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01a      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_I2C_Mem_Read+0x230>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	80002400 	.word	0x80002400
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	817b      	strh	r3, [r7, #10]
 8002d32:	460b      	mov	r3, r1
 8002d34:	813b      	strh	r3, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <I2C_RequestMemoryWrite+0xa4>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fa6f 	bl	800322c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	69b9      	ldr	r1, [r7, #24]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f8ff 	bl	8002f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02c      	b.n	8002dbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
 8002d72:	e015      	b.n	8002da0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8e5 	bl	8002f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e012      	b.n	8002dbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f884 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	80002000 	.word	0x80002000

08002dc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <I2C_RequestMemoryRead+0xa4>)
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2300      	movs	r3, #0
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fa1c 	bl	800322c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f8ac 	bl	8002f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e02c      	b.n	8002e62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
 8002e18:	e015      	b.n	8002e46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e1a:	893b      	ldrh	r3, [r7, #8]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f892 	bl	8002f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e012      	b.n	8002e62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f831 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	80002000 	.word	0x80002000

08002e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	619a      	str	r2, [r3, #24]
  }
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e031      	b.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d02d      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7ff f963 	bl	800219c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d122      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d113      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d0be      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f62:	e033      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f87f 	bl	800306c <I2C_IsErrorOccurred>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e031      	b.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d025      	beq.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7ff f90c 	bl	800219c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11a      	bne.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d013      	beq.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d1c4      	bne.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff0:	e02f      	b.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f838 	bl	800306c <I2C_IsErrorOccurred>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e02d      	b.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7ff f8c9 	bl	800219c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11a      	bne.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d013      	beq.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0220 	orr.w	r2, r3, #32
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e007      	b.n	8003062 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d1c8      	bne.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d068      	beq.n	800316a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2210      	movs	r2, #16
 800309e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030a0:	e049      	b.n	8003136 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d045      	beq.n	8003136 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7ff f877 	bl	800219c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_IsErrorOccurred+0x54>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d13a      	bne.n	8003136 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d121      	bne.n	8003128 <I2C_IsErrorOccurred+0xbc>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ea:	d01d      	beq.n	8003128 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d01a      	beq.n	8003128 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003100:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003102:	f7ff f84b 	bl	800219c <HAL_GetTick>
 8003106:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003108:	e00e      	b.n	8003128 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800310a:	f7ff f847 	bl	800219c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b19      	cmp	r3, #25
 8003116:	d907      	bls.n	8003128 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f043 0320 	orr.w	r3, r3, #32
 800311e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003126:	e006      	b.n	8003136 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d1e9      	bne.n	800310a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d003      	beq.n	800314c <I2C_IsErrorOccurred+0xe0>
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0aa      	beq.n	80030a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800314c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800318c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01c      	beq.n	800321a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fe45 	bl	8002e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <I2C_IsErrorOccurred+0x1bc>)
 80031f2:	400b      	ands	r3, r1
 80031f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800321a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	fe00e800 	.word	0xfe00e800

0800322c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	4613      	mov	r3, r2
 800323c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003244:	7a7b      	ldrb	r3, [r7, #9]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800324c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	4313      	orrs	r3, r2
 8003256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	0d5b      	lsrs	r3, r3, #21
 8003266:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <I2C_TransferConfig+0x60>)
 800326c:	430b      	orrs	r3, r1
 800326e:	43db      	mvns	r3, r3
 8003270:	ea02 0103 	and.w	r1, r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	03ff63ff 	.word	0x03ff63ff

08003290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d138      	bne.n	8003318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e032      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	d139      	bne.n	80033b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003346:	2302      	movs	r3, #2
 8003348:	e033      	b.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2224      	movs	r2, #36	; 0x24
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003378:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000

080033dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d130      	bne.n	800344e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d038      	beq.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2232      	movs	r2, #50	; 0x32
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9b      	lsrs	r3, r3, #18
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003420:	e002      	b.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b01      	subs	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d102      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f2      	bne.n	8003422 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003448:	d110      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e00f      	b.n	800346e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d007      	beq.n	800346c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800346a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40007000 	.word	0x40007000
 8003480:	20000000 	.word	0x20000000
 8003484:	431bde83 	.word	0x431bde83

08003488 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e3ca      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349a:	4b97      	ldr	r3, [pc, #604]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a4:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80e4 	beq.w	8003684 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4a>
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f040 808b 	bne.w	80035e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 8087 	bne.w	80035e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e3a2      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1a      	ldr	r2, [r3, #32]
 80034ee:	4b82      	ldr	r3, [pc, #520]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_RCC_OscConfig+0x7c>
 80034fa:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003502:	e005      	b.n	8003510 <HAL_RCC_OscConfig+0x88>
 8003504:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003510:	4293      	cmp	r3, r2
 8003512:	d223      	bcs.n	800355c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fd55 	bl	8003fc8 <RCC_SetFlashLatencyFromMSIRange>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e383      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a72      	ldr	r2, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	496d      	ldr	r1, [pc, #436]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	4968      	ldr	r1, [pc, #416]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
 800355a:	e025      	b.n	80035a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a65      	ldr	r2, [pc, #404]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4960      	ldr	r1, [pc, #384]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357a:	4b5f      	ldr	r3, [pc, #380]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	495b      	ldr	r1, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fd15 	bl	8003fc8 <RCC_SetFlashLatencyFromMSIRange>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e343      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035a8:	f000 fc4a 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b52      	ldr	r3, [pc, #328]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4950      	ldr	r1, [pc, #320]	; (80036fc <HAL_RCC_OscConfig+0x274>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	4a4e      	ldr	r2, [pc, #312]	; (8003700 <HAL_RCC_OscConfig+0x278>)
 80035c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fd95 	bl	80020fc <HAL_InitTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d052      	beq.n	8003682 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	e327      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d032      	beq.n	800364e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fdd2 	bl	800219c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fc:	f7fe fdce 	bl	800219c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e310      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a36      	ldr	r2, [pc, #216]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4931      	ldr	r1, [pc, #196]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	492c      	ldr	r1, [pc, #176]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
 800364c:	e01a      	b.n	8003684 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800365a:	f7fe fd9f 	bl	800219c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003662:	f7fe fd9b 	bl	800219c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e2dd      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x1da>
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003682:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d074      	beq.n	800377a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x21a>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d10e      	bne.n	80036ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d10b      	bne.n	80036ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d064      	beq.n	8003778 <HAL_RCC_OscConfig+0x2f0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d160      	bne.n	8003778 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e2ba      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x24a>
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e026      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x280>
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08005fcc 	.word	0x08005fcc
 8003700:	20000000 	.word	0x20000000
 8003704:	20000004 	.word	0x20000004
 8003708:	4ba0      	ldr	r3, [pc, #640]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a9f      	ldr	r2, [pc, #636]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b9d      	ldr	r3, [pc, #628]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a9c      	ldr	r2, [pc, #624]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fd38 	bl	800219c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fd34 	bl	800219c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e276      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003742:	4b92      	ldr	r3, [pc, #584]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x2a8>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fd24 	bl	800219c <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fd20 	bl	800219c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e262      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x2d0>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d060      	beq.n	8003848 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x310>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d116      	bne.n	80037c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003798:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x328>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e23f      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	4973      	ldr	r1, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c4:	e040      	b.n	8003848 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d023      	beq.n	8003816 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ce:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fcdf 	bl	800219c <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe fcdb 	bl	800219c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e21d      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	495f      	ldr	r1, [pc, #380]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	e018      	b.n	8003848 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a5c      	ldr	r2, [pc, #368]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800381c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe fcbb 	bl	800219c <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382a:	f7fe fcb7 	bl	800219c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1f9      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f0      	bne.n	800382a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03c      	beq.n	80038ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385c:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386c:	f7fe fc96 	bl	800219c <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003874:	f7fe fc92 	bl	800219c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1d4      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ef      	beq.n	8003874 <HAL_RCC_OscConfig+0x3ec>
 8003894:	e01b      	b.n	80038ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003896:	4b3d      	ldr	r3, [pc, #244]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a6:	f7fe fc79 	bl	800219c <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ae:	f7fe fc75 	bl	800219c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e1b7      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c0:	4b32      	ldr	r3, [pc, #200]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ef      	bne.n	80038ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a6 	beq.w	8003a28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038e0:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10d      	bne.n	8003908 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_OscConfig+0x504>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003904:	2301      	movs	r3, #1
 8003906:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d118      	bne.n	8003946 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003920:	f7fe fc3c 	bl	800219c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe fc38 	bl	800219c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e17a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_RCC_OscConfig+0x508>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <HAL_RCC_OscConfig+0x4d8>
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800395e:	e029      	b.n	80039b4 <HAL_RCC_OscConfig+0x52c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b05      	cmp	r3, #5
 8003966:	d115      	bne.n	8003994 <HAL_RCC_OscConfig+0x50c>
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_RCC_OscConfig+0x504>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a03      	ldr	r2, [pc, #12]	; (800398c <HAL_RCC_OscConfig+0x504>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x52c>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	40007000 	.word	0x40007000
 8003994:	4b9c      	ldr	r3, [pc, #624]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a9b      	ldr	r2, [pc, #620]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a4:	4b98      	ldr	r3, [pc, #608]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a97      	ldr	r2, [pc, #604]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d016      	beq.n	80039ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe fbee 	bl	800219c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fbea 	bl	800219c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e12a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039da:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ed      	beq.n	80039c4 <HAL_RCC_OscConfig+0x53c>
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fe fbd7 	bl	800219c <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fbd3 	bl	800219c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e113      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a08:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ed      	bne.n	80039f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	7ffb      	ldrb	r3, [r7, #31]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b7a      	ldr	r3, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	4a79      	ldr	r2, [pc, #484]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80fe 	beq.w	8003c2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 80d0 	bne.w	8003bdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a3c:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d130      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d127      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11f      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a7c:	2a07      	cmp	r2, #7
 8003a7e:	bf14      	ite	ne
 8003a80:	2201      	movne	r2, #1
 8003a82:	2200      	moveq	r2, #0
 8003a84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d06e      	beq.n	8003b90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d069      	beq.n	8003b8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0ad      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ae0:	f7fe fb5c 	bl	800219c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fb58 	bl	800219c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e09a      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afa:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b06:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_RCC_OscConfig+0x784>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b16:	3a01      	subs	r2, #1
 8003b18:	0112      	lsls	r2, r2, #4
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b20:	0212      	lsls	r2, r2, #8
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0552      	lsls	r2, r2, #21
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b34:	0852      	lsrs	r2, r2, #1
 8003b36:	3a01      	subs	r2, #1
 8003b38:	0652      	lsls	r2, r2, #25
 8003b3a:	4311      	orrs	r1, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b40:	0912      	lsrs	r2, r2, #4
 8003b42:	0452      	lsls	r2, r2, #17
 8003b44:	430a      	orrs	r2, r1
 8003b46:	4930      	ldr	r1, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b58:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b64:	f7fe fb1a 	bl	800219c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fb16 	bl	800219c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e058      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b8a:	e050      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04f      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d148      	bne.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bb4:	f7fe faf2 	bl	800219c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe faee 	bl	800219c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e030      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x734>
 8003bda:	e028      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d023      	beq.n	8003c2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_RCC_OscConfig+0x780>)
 8003be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe fad5 	bl	800219c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	e00c      	b.n	8003c10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fe fad1 	bl	800219c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d905      	bls.n	8003c10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e013      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ec      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	4905      	ldr	r1, [pc, #20]	; (8003c38 <HAL_RCC_OscConfig+0x7b0>)
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x7b4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
 8003c28:	e001      	b.n	8003c2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	feeefffc 	.word	0xfeeefffc

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0e7      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d910      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4970      	ldr	r1, [pc, #448]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b6e      	ldr	r3, [pc, #440]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cf      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d908      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4960      	ldr	r1, [pc, #384]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04c      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0a6      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d115      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e09a      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e08e      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d06:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e086      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4943      	ldr	r1, [pc, #268]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d28:	f7fe fa38 	bl	800219c <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe fa34 	bl	800219c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e06e      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1eb      	bne.n	8003d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d208      	bcs.n	8003d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	492b      	ldr	r1, [pc, #172]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d210      	bcs.n	8003db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 0207 	bic.w	r2, r3, #7
 8003d9c:	4923      	ldr	r1, [pc, #140]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <HAL_RCC_ClockConfig+0x1ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e036      	b.n	8003e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4918      	ldr	r1, [pc, #96]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4910      	ldr	r1, [pc, #64]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df4:	f000 f824 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	490b      	ldr	r1, [pc, #44]	; (8003e34 <HAL_RCC_ClockConfig+0x1f4>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1f8>)
 8003e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1fc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe f96f 	bl	80020fc <HAL_InitTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e22:	7afb      	ldrb	r3, [r7, #11]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08005fcc 	.word	0x08005fcc
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	20000004 	.word	0x20000004

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e58:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x34>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d121      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d11e      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e005      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e9c:	4a2b      	ldr	r2, [pc, #172]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb8:	4b25      	ldr	r3, [pc, #148]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d134      	bne.n	8003f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ece:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d003      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0xac>
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee8:	617b      	str	r3, [r7, #20]
      break;
 8003eea:	e005      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eec:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eee:	617b      	str	r3, [r7, #20]
      break;
 8003ef0:	e002      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	617b      	str	r3, [r7, #20]
      break;
 8003ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	3301      	adds	r3, #1
 8003f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	fb03 f202 	mul.w	r2, r3, r2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	0e5b      	lsrs	r3, r3, #25
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f38:	69bb      	ldr	r3, [r7, #24]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08005fe4 	.word	0x08005fe4
 8003f50:	00f42400 	.word	0x00f42400
 8003f54:	007a1200 	.word	0x007a1200

08003f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000000 	.word	0x20000000

08003f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f74:	f7ff fff0 	bl	8003f58 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08005fdc 	.word	0x08005fdc

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fa0:	f7ff ffda 	bl	8003f58 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0adb      	lsrs	r3, r3, #11
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08005fdc 	.word	0x08005fdc

08003fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fe0:	f7ff f9ee 	bl	80033c0 <HAL_PWREx_GetVoltageRange>
 8003fe4:	6178      	str	r0, [r7, #20]
 8003fe6:	e014      	b.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004000:	f7ff f9de 	bl	80033c0 <HAL_PWREx_GetVoltageRange>
 8004004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d10b      	bne.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d919      	bls.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2ba0      	cmp	r3, #160	; 0xa0
 8004024:	d902      	bls.n	800402c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004026:	2302      	movs	r3, #2
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	e013      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800402c:	2301      	movs	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e010      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d902      	bls.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004038:	2303      	movs	r3, #3
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e00a      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d102      	bne.n	800404a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004044:	2302      	movs	r3, #2
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e004      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b70      	cmp	r3, #112	; 0x70
 800404e:	d101      	bne.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004050:	2301      	movs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 0207 	bic.w	r2, r3, #7
 800405c:	4909      	ldr	r1, [pc, #36]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	d001      	beq.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	40022000 	.word	0x40022000

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004090:	2300      	movs	r3, #0
 8004092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004094:	2300      	movs	r3, #0
 8004096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d041      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040ac:	d02a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b2:	d824      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040be:	d81e      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c8:	d010      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040ca:	e018      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040cc:	4b86      	ldr	r3, [pc, #536]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a85      	ldr	r2, [pc, #532]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d8:	e015      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fabb 	bl	800465c <RCCEx_PLLSAI1_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ea:	e00c      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3320      	adds	r3, #32
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fba6 	bl	8004844 <RCCEx_PLLSAI2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	74fb      	strb	r3, [r7, #19]
      break;
 8004102:	e000      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800410c:	4b76      	ldr	r3, [pc, #472]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411a:	4973      	ldr	r1, [pc, #460]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d041      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800413c:	d02a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800413e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004142:	d824      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004148:	d008      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800414a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800414e:	d81e      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004158:	d010      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800415a:	e018      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800415c:	4b62      	ldr	r3, [pc, #392]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a61      	ldr	r2, [pc, #388]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004168:	e015      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa73 	bl	800465c <RCCEx_PLLSAI1_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800417a:	e00c      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3320      	adds	r3, #32
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fb5e 	bl	8004844 <RCCEx_PLLSAI2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	74fb      	strb	r3, [r7, #19]
      break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800419c:	4b52      	ldr	r3, [pc, #328]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041aa:	494f      	ldr	r1, [pc, #316]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a0 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6593      	str	r3, [r2, #88]	; 0x58
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3a      	ldr	r2, [pc, #232]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004208:	f7fd ffc8 	bl	800219c <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420e:	e009      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004210:	f7fd ffc4 	bl	800219c <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	74fb      	strb	r3, [r7, #19]
        break;
 8004222:	e005      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004224:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ef      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d15c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d019      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd ff83 	bl	800219c <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004298:	e00b      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd ff7f 	bl	800219c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d902      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	74fb      	strb	r3, [r7, #19]
            break;
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ec      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	4904      	ldr	r1, [pc, #16]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7c7b      	ldrb	r3, [r7, #17]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b9e      	ldr	r3, [pc, #632]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	4a9d      	ldr	r2, [pc, #628]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004312:	4b98      	ldr	r3, [pc, #608]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 0203 	bic.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	4994      	ldr	r1, [pc, #592]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004334:	4b8f      	ldr	r3, [pc, #572]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 020c 	bic.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	498c      	ldr	r1, [pc, #560]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004356:	4b87      	ldr	r3, [pc, #540]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	4983      	ldr	r1, [pc, #524]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	497b      	ldr	r1, [pc, #492]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	4972      	ldr	r1, [pc, #456]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043bc:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ca:	496a      	ldr	r1, [pc, #424]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	4961      	ldr	r1, [pc, #388]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004400:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	4959      	ldr	r1, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	4950      	ldr	r1, [pc, #320]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004444:	4b4b      	ldr	r3, [pc, #300]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	4948      	ldr	r1, [pc, #288]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004466:	4b43      	ldr	r3, [pc, #268]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	493f      	ldr	r1, [pc, #252]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d028      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004496:	4937      	ldr	r1, [pc, #220]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a31      	ldr	r2, [pc, #196]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
 80044b4:	e011      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d10c      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8c8 	bl	800465c <RCCEx_PLLSAI1_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	491f      	ldr	r1, [pc, #124]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004504:	d106      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004510:	60d3      	str	r3, [r2, #12]
 8004512:	e011      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f899 	bl	800465c <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	e014      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f867 	bl	800465c <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b6:	4928      	ldr	r1, [pc, #160]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f844 	bl	800465c <RCCEx_PLLSAI1_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d014      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	74bb      	strb	r3, [r7, #18]
 80045e2:	e011      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3320      	adds	r3, #32
 80045f2:	2102      	movs	r1, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f925 	bl	8004844 <RCCEx_PLLSAI2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004622:	490d      	ldr	r1, [pc, #52]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004646:	4904      	ldr	r1, [pc, #16]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800464e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000

0800465c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800466a:	4b75      	ldr	r3, [pc, #468]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004676:	4b72      	ldr	r3, [pc, #456]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0203 	and.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d10d      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
       ||
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800468e:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
       ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d047      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e044      	b.n	8004732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d018      	beq.n	80046e2 <RCCEx_PLLSAI1_Config+0x86>
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d825      	bhi.n	8004700 <RCCEx_PLLSAI1_Config+0xa4>
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d002      	beq.n	80046be <RCCEx_PLLSAI1_Config+0x62>
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d009      	beq.n	80046d0 <RCCEx_PLLSAI1_Config+0x74>
 80046bc:	e020      	b.n	8004700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046be:	4b60      	ldr	r3, [pc, #384]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11d      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ce:	e01a      	b.n	8004706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046d0:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e0:	e013      	b.n	800470a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046e2:	4b57      	ldr	r3, [pc, #348]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ee:	4b54      	ldr	r3, [pc, #336]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046fe:	e006      	b.n	800470e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e004      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004706:	bf00      	nop
 8004708:	e002      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800470a:	bf00      	nop
 800470c:	e000      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800470e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	430b      	orrs	r3, r1
 800472c:	4944      	ldr	r1, [pc, #272]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d17d      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a40      	ldr	r2, [pc, #256]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004744:	f7fd fd2a 	bl	800219c <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800474a:	e009      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800474c:	f7fd fd26 	bl	800219c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d902      	bls.n	8004760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	73fb      	strb	r3, [r7, #15]
        break;
 800475e:	e005      	b.n	800476c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004760:	4b37      	ldr	r3, [pc, #220]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ef      	bne.n	800474c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d160      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d111      	bne.n	800479c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6892      	ldr	r2, [r2, #8]
 8004788:	0211      	lsls	r1, r2, #8
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68d2      	ldr	r2, [r2, #12]
 800478e:	0912      	lsrs	r2, r2, #4
 8004790:	0452      	lsls	r2, r2, #17
 8004792:	430a      	orrs	r2, r1
 8004794:	492a      	ldr	r1, [pc, #168]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]
 800479a:	e027      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d112      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a2:	4b27      	ldr	r3, [pc, #156]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	0211      	lsls	r1, r2, #8
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6912      	ldr	r2, [r2, #16]
 80047b8:	0852      	lsrs	r2, r2, #1
 80047ba:	3a01      	subs	r2, #1
 80047bc:	0552      	lsls	r2, r2, #21
 80047be:	430a      	orrs	r2, r1
 80047c0:	491f      	ldr	r1, [pc, #124]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
 80047c6:	e011      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	0211      	lsls	r1, r2, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6952      	ldr	r2, [r2, #20]
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	3a01      	subs	r2, #1
 80047e2:	0652      	lsls	r2, r2, #25
 80047e4:	430a      	orrs	r2, r1
 80047e6:	4916      	ldr	r1, [pc, #88]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd fcd0 	bl	800219c <HAL_GetTick>
 80047fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fe:	e009      	b.n	8004814 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004800:	f7fd fccc 	bl	800219c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d902      	bls.n	8004814 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	73fb      	strb	r3, [r7, #15]
          break;
 8004812:	e005      	b.n	8004820 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004852:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d018      	beq.n	8004890 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800485e:	4b67      	ldr	r3, [pc, #412]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0203 	and.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d10d      	bne.n	800488a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
       ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004876:	4b61      	ldr	r3, [pc, #388]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
       ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d047      	beq.n	800491a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e044      	b.n	800491a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d018      	beq.n	80048ca <RCCEx_PLLSAI2_Config+0x86>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d825      	bhi.n	80048e8 <RCCEx_PLLSAI2_Config+0xa4>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0x62>
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d009      	beq.n	80048b8 <RCCEx_PLLSAI2_Config+0x74>
 80048a4:	e020      	b.n	80048e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048a6:	4b55      	ldr	r3, [pc, #340]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b6:	e01a      	b.n	80048ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b50      	ldr	r3, [pc, #320]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c8:	e013      	b.n	80048f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ca:	4b4c      	ldr	r3, [pc, #304]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10f      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048d6:	4b49      	ldr	r3, [pc, #292]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048e6:	e006      	b.n	80048f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e004      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048fe:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	430b      	orrs	r3, r1
 8004914:	4939      	ldr	r1, [pc, #228]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d167      	bne.n	80049f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004920:	4b36      	ldr	r3, [pc, #216]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a35      	ldr	r2, [pc, #212]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd fc36 	bl	800219c <HAL_GetTick>
 8004930:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004932:	e009      	b.n	8004948 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004934:	f7fd fc32 	bl	800219c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d902      	bls.n	8004948 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	73fb      	strb	r3, [r7, #15]
        break;
 8004946:	e005      	b.n	8004954 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004948:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ef      	bne.n	8004934 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d14a      	bne.n	80049f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004960:	4b26      	ldr	r3, [pc, #152]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6892      	ldr	r2, [r2, #8]
 8004970:	0211      	lsls	r1, r2, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	0912      	lsrs	r2, r2, #4
 8004978:	0452      	lsls	r2, r2, #17
 800497a:	430a      	orrs	r2, r1
 800497c:	491f      	ldr	r1, [pc, #124]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	614b      	str	r3, [r1, #20]
 8004982:	e011      	b.n	80049a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800498c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6892      	ldr	r2, [r2, #8]
 8004994:	0211      	lsls	r1, r2, #8
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6912      	ldr	r2, [r2, #16]
 800499a:	0852      	lsrs	r2, r2, #1
 800499c:	3a01      	subs	r2, #1
 800499e:	0652      	lsls	r2, r2, #25
 80049a0:	430a      	orrs	r2, r1
 80049a2:	4916      	ldr	r1, [pc, #88]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fd fbf2 	bl	800219c <HAL_GetTick>
 80049b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ba:	e009      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049bc:	f7fd fbee 	bl	800219c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d902      	bls.n	80049d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	73fb      	strb	r3, [r7, #15]
          break;
 80049ce:	e005      	b.n	80049dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ef      	beq.n	80049bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	4904      	ldr	r1, [pc, #16]	; (80049fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e040      	b.n	8004a94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fa52 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	; 0x24
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fb6a 	bl	8005120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8af 	bl	8004bb0 <UART_SetConfig>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e01b      	b.n	8004a94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fbe9 	bl	8005264 <UART_CheckIdleState>
 8004a92:	4603      	mov	r3, r0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d178      	bne.n	8004ba6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_UART_Transmit+0x24>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e071      	b.n	8004ba8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fd fb63 	bl	800219c <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x68>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e030      	b.n	8004b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fc4b 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e03c      	b.n	8004ba8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b40:	b292      	uxth	r2, r2
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3302      	adds	r3, #2
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	e008      	b.n	8004b5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	781a      	ldrb	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b292      	uxth	r2, r2
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1c8      	bne.n	8004b0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2200      	movs	r2, #0
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fc14 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e005      	b.n	8004ba8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb4:	b08a      	sub	sp, #40	; 0x28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4ba4      	ldr	r3, [pc, #656]	; (8004e70 <UART_SetConfig+0x2c0>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a99      	ldr	r2, [pc, #612]	; (8004e74 <UART_SetConfig+0x2c4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a90      	ldr	r2, [pc, #576]	; (8004e78 <UART_SetConfig+0x2c8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d126      	bne.n	8004c88 <UART_SetConfig+0xd8>
 8004c3a:	4b90      	ldr	r3, [pc, #576]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d81b      	bhi.n	8004c80 <UART_SetConfig+0xd0>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0xa0>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e116      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e112      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e10e      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e10a      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e106      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a7c      	ldr	r2, [pc, #496]	; (8004e80 <UART_SetConfig+0x2d0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d138      	bne.n	8004d04 <UART_SetConfig+0x154>
 8004c92:	4b7a      	ldr	r3, [pc, #488]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d82d      	bhi.n	8004cfc <UART_SetConfig+0x14c>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0xf8>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004cfd 	.word	0x08004cfd
 8004cb0:	08004cfd 	.word	0x08004cfd
 8004cb4:	08004cfd 	.word	0x08004cfd
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004cfd 	.word	0x08004cfd
 8004cc0:	08004cfd 	.word	0x08004cfd
 8004cc4:	08004cfd 	.word	0x08004cfd
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	08004cfd 	.word	0x08004cfd
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004cf5 	.word	0x08004cf5
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e0d8      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e0d4      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e0d0      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e0cc      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e0c8      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5e      	ldr	r2, [pc, #376]	; (8004e84 <UART_SetConfig+0x2d4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d125      	bne.n	8004d5a <UART_SetConfig+0x1aa>
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d18:	2b30      	cmp	r3, #48	; 0x30
 8004d1a:	d016      	beq.n	8004d4a <UART_SetConfig+0x19a>
 8004d1c:	2b30      	cmp	r3, #48	; 0x30
 8004d1e:	d818      	bhi.n	8004d52 <UART_SetConfig+0x1a2>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d00a      	beq.n	8004d3a <UART_SetConfig+0x18a>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d814      	bhi.n	8004d52 <UART_SetConfig+0x1a2>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <UART_SetConfig+0x182>
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d008      	beq.n	8004d42 <UART_SetConfig+0x192>
 8004d30:	e00f      	b.n	8004d52 <UART_SetConfig+0x1a2>
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d38:	e0ad      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d40:	e0a9      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d42:	2304      	movs	r3, #4
 8004d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d48:	e0a5      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d50:	e0a1      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d52:	2310      	movs	r3, #16
 8004d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d58:	e09d      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <UART_SetConfig+0x2d8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d125      	bne.n	8004db0 <UART_SetConfig+0x200>
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d70:	d016      	beq.n	8004da0 <UART_SetConfig+0x1f0>
 8004d72:	2bc0      	cmp	r3, #192	; 0xc0
 8004d74:	d818      	bhi.n	8004da8 <UART_SetConfig+0x1f8>
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d00a      	beq.n	8004d90 <UART_SetConfig+0x1e0>
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d814      	bhi.n	8004da8 <UART_SetConfig+0x1f8>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <UART_SetConfig+0x1d8>
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d008      	beq.n	8004d98 <UART_SetConfig+0x1e8>
 8004d86:	e00f      	b.n	8004da8 <UART_SetConfig+0x1f8>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e082      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e07e      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004d98:	2304      	movs	r3, #4
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e07a      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004da0:	2308      	movs	r3, #8
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e076      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004da8:	2310      	movs	r3, #16
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e072      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <UART_SetConfig+0x2dc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d12a      	bne.n	8004e10 <UART_SetConfig+0x260>
 8004dba:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc8:	d01a      	beq.n	8004e00 <UART_SetConfig+0x250>
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dce:	d81b      	bhi.n	8004e08 <UART_SetConfig+0x258>
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d00c      	beq.n	8004df0 <UART_SetConfig+0x240>
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dda:	d815      	bhi.n	8004e08 <UART_SetConfig+0x258>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <UART_SetConfig+0x238>
 8004de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de4:	d008      	beq.n	8004df8 <UART_SetConfig+0x248>
 8004de6:	e00f      	b.n	8004e08 <UART_SetConfig+0x258>
 8004de8:	2300      	movs	r3, #0
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dee:	e052      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e04e      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e04a      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e00:	2308      	movs	r3, #8
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e046      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e042      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <UART_SetConfig+0x2c4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d13a      	bne.n	8004e90 <UART_SetConfig+0x2e0>
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <UART_SetConfig+0x2cc>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e28:	d01a      	beq.n	8004e60 <UART_SetConfig+0x2b0>
 8004e2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e2e:	d81b      	bhi.n	8004e68 <UART_SetConfig+0x2b8>
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e34:	d00c      	beq.n	8004e50 <UART_SetConfig+0x2a0>
 8004e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3a:	d815      	bhi.n	8004e68 <UART_SetConfig+0x2b8>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <UART_SetConfig+0x298>
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e44:	d008      	beq.n	8004e58 <UART_SetConfig+0x2a8>
 8004e46:	e00f      	b.n	8004e68 <UART_SetConfig+0x2b8>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e022      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e50:	2302      	movs	r3, #2
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e01e      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e01a      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e60:	2308      	movs	r3, #8
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e016      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e012      	b.n	8004e96 <UART_SetConfig+0x2e6>
 8004e70:	efff69f3 	.word	0xefff69f3
 8004e74:	40008000 	.word	0x40008000
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40004400 	.word	0x40004400
 8004e84:	40004800 	.word	0x40004800
 8004e88:	40004c00 	.word	0x40004c00
 8004e8c:	40005000 	.word	0x40005000
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a9f      	ldr	r2, [pc, #636]	; (8005118 <UART_SetConfig+0x568>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d17a      	bne.n	8004f96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d824      	bhi.n	8004ef2 <UART_SetConfig+0x342>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x300>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ee3 	.word	0x08004ee3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004ef3 	.word	0x08004ef3
 8004ed0:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7ff f84c 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61f8      	str	r0, [r7, #28]
        break;
 8004eda:	e010      	b.n	8004efe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b8f      	ldr	r3, [pc, #572]	; (800511c <UART_SetConfig+0x56c>)
 8004ede:	61fb      	str	r3, [r7, #28]
        break;
 8004ee0:	e00d      	b.n	8004efe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fe ffad 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8004ee6:	61f8      	str	r0, [r7, #28]
        break;
 8004ee8:	e009      	b.n	8004efe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eee:	61fb      	str	r3, [r7, #28]
        break;
 8004ef0:	e005      	b.n	8004efe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004efc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80fb 	beq.w	80050fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	4413      	add	r3, r2
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d305      	bcc.n	8004f22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d903      	bls.n	8004f2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f28:	e0e8      	b.n	80050fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	461c      	mov	r4, r3
 8004f30:	4615      	mov	r5, r2
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	022b      	lsls	r3, r5, #8
 8004f3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f40:	0222      	lsls	r2, r4, #8
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6849      	ldr	r1, [r1, #4]
 8004f46:	0849      	lsrs	r1, r1, #1
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4688      	mov	r8, r1
 8004f4c:	4681      	mov	r9, r0
 8004f4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f52:	eb43 0b09 	adc.w	fp, r3, r9
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f64:	4650      	mov	r0, sl
 8004f66:	4659      	mov	r1, fp
 8004f68:	f7fb f98a 	bl	8000280 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7a:	d308      	bcc.n	8004f8e <UART_SetConfig+0x3de>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d204      	bcs.n	8004f8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e0b6      	b.n	80050fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f94:	e0b2      	b.n	80050fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d15e      	bne.n	800505e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d828      	bhi.n	8004ffa <UART_SetConfig+0x44a>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x400>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004fdd 	.word	0x08004fdd
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004ffb 	.word	0x08004ffb
 8004fc0:	08004feb 	.word	0x08004feb
 8004fc4:	08004ffb 	.word	0x08004ffb
 8004fc8:	08004ffb 	.word	0x08004ffb
 8004fcc:	08004ffb 	.word	0x08004ffb
 8004fd0:	08004ff3 	.word	0x08004ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe ffcc 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e014      	b.n	8005006 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe ffde 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8004fe0:	61f8      	str	r0, [r7, #28]
        break;
 8004fe2:	e010      	b.n	8005006 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <UART_SetConfig+0x56c>)
 8004fe6:	61fb      	str	r3, [r7, #28]
        break;
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fea:	f7fe ff29 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8004fee:	61f8      	str	r0, [r7, #28]
        break;
 8004ff0:	e009      	b.n	8005006 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff6:	61fb      	str	r3, [r7, #28]
        break;
 8004ff8:	e005      	b.n	8005006 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d077      	beq.n	80050fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005a      	lsls	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d916      	bls.n	8005056 <UART_SetConfig+0x4a6>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502e:	d212      	bcs.n	8005056 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f023 030f 	bic.w	r3, r3, #15
 8005038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	b29a      	uxth	r2, r3
 8005046:	8afb      	ldrh	r3, [r7, #22]
 8005048:	4313      	orrs	r3, r2
 800504a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	8afa      	ldrh	r2, [r7, #22]
 8005052:	60da      	str	r2, [r3, #12]
 8005054:	e052      	b.n	80050fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800505c:	e04e      	b.n	80050fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005062:	2b08      	cmp	r3, #8
 8005064:	d827      	bhi.n	80050b6 <UART_SetConfig+0x506>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0x4bc>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	08005091 	.word	0x08005091
 8005070:	08005099 	.word	0x08005099
 8005074:	080050a1 	.word	0x080050a1
 8005078:	080050b7 	.word	0x080050b7
 800507c:	080050a7 	.word	0x080050a7
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050b7 	.word	0x080050b7
 8005088:	080050b7 	.word	0x080050b7
 800508c:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe ff6e 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8005094:	61f8      	str	r0, [r7, #28]
        break;
 8005096:	e014      	b.n	80050c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7fe ff80 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 800509c:	61f8      	str	r0, [r7, #28]
        break;
 800509e:	e010      	b.n	80050c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b1e      	ldr	r3, [pc, #120]	; (800511c <UART_SetConfig+0x56c>)
 80050a2:	61fb      	str	r3, [r7, #28]
        break;
 80050a4:	e00d      	b.n	80050c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7fe fecb 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 80050aa:	61f8      	str	r0, [r7, #28]
        break;
 80050ac:	e009      	b.n	80050c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	61fb      	str	r3, [r7, #28]
        break;
 80050b4:	e005      	b.n	80050c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050c0:	bf00      	nop
    }

    if (pclk != 0U)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d019      	beq.n	80050fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	085a      	lsrs	r2, r3, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b0f      	cmp	r3, #15
 80050e0:	d909      	bls.n	80050f6 <UART_SetConfig+0x546>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d205      	bcs.n	80050f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e002      	b.n	80050fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005108:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005116:	bf00      	nop
 8005118:	40008000 	.word	0x40008000
 800511c:	00f42400 	.word	0x00f42400

08005120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01a      	beq.n	8005236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d10a      	bne.n	8005236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b098      	sub	sp, #96	; 0x60
 8005268:	af02      	add	r7, sp, #8
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005274:	f7fc ff92 	bl	800219c <HAL_GetTick>
 8005278:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b08      	cmp	r3, #8
 8005286:	d12e      	bne.n	80052e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005290:	2200      	movs	r2, #0
 8005292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f88c 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d021      	beq.n	80052e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b6:	653b      	str	r3, [r7, #80]	; 0x50
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
 80052c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e062      	b.n	80053ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d149      	bne.n	8005388 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f856 	bl	80053b4 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03c      	beq.n	8005388 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	623b      	str	r3, [r7, #32]
   return(result);
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
 800532e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	61fa      	str	r2, [r7, #28]
 8005362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	69b9      	ldr	r1, [r7, #24]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	617b      	str	r3, [r7, #20]
   return(result);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e011      	b.n	80053ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3758      	adds	r7, #88	; 0x58
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	4613      	mov	r3, r2
 80053c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c4:	e049      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d045      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fc fee5 	bl	800219c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e048      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d031      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d110      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f838 	bl	8005482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2208      	movs	r2, #8
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e029      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005434:	d111      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f81e 	bl	8005482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e00f      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0a6      	beq.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005482:	b480      	push	{r7}
 8005484:	b095      	sub	sp, #84	; 0x54
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a8:	643b      	str	r3, [r7, #64]	; 0x40
 80054aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e6      	bne.n	800548a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3308      	adds	r3, #8
 80054c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e5      	bne.n	80054bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d118      	bne.n	800552a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	60bb      	str	r3, [r7, #8]
   return(result);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800553e:	bf00      	nop
 8005540:	3754      	adds	r7, #84	; 0x54
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <siprintf>:
 800554c:	b40e      	push	{r1, r2, r3}
 800554e:	b500      	push	{lr}
 8005550:	b09c      	sub	sp, #112	; 0x70
 8005552:	ab1d      	add	r3, sp, #116	; 0x74
 8005554:	9002      	str	r0, [sp, #8]
 8005556:	9006      	str	r0, [sp, #24]
 8005558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800555c:	4809      	ldr	r0, [pc, #36]	; (8005584 <siprintf+0x38>)
 800555e:	9107      	str	r1, [sp, #28]
 8005560:	9104      	str	r1, [sp, #16]
 8005562:	4909      	ldr	r1, [pc, #36]	; (8005588 <siprintf+0x3c>)
 8005564:	f853 2b04 	ldr.w	r2, [r3], #4
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	a902      	add	r1, sp, #8
 8005570:	f000 f992 	bl	8005898 <_svfiprintf_r>
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	b01c      	add	sp, #112	; 0x70
 800557c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005580:	b003      	add	sp, #12
 8005582:	4770      	bx	lr
 8005584:	20000058 	.word	0x20000058
 8005588:	ffff0208 	.word	0xffff0208

0800558c <memset>:
 800558c:	4402      	add	r2, r0
 800558e:	4603      	mov	r3, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000058 	.word	0x20000058

080055a8 <__libc_init_array>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4d0d      	ldr	r5, [pc, #52]	; (80055e0 <__libc_init_array+0x38>)
 80055ac:	4c0d      	ldr	r4, [pc, #52]	; (80055e4 <__libc_init_array+0x3c>)
 80055ae:	1b64      	subs	r4, r4, r5
 80055b0:	10a4      	asrs	r4, r4, #2
 80055b2:	2600      	movs	r6, #0
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	d109      	bne.n	80055cc <__libc_init_array+0x24>
 80055b8:	4d0b      	ldr	r5, [pc, #44]	; (80055e8 <__libc_init_array+0x40>)
 80055ba:	4c0c      	ldr	r4, [pc, #48]	; (80055ec <__libc_init_array+0x44>)
 80055bc:	f000 fc6a 	bl	8005e94 <_init>
 80055c0:	1b64      	subs	r4, r4, r5
 80055c2:	10a4      	asrs	r4, r4, #2
 80055c4:	2600      	movs	r6, #0
 80055c6:	42a6      	cmp	r6, r4
 80055c8:	d105      	bne.n	80055d6 <__libc_init_array+0x2e>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d0:	4798      	blx	r3
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7ee      	b.n	80055b4 <__libc_init_array+0xc>
 80055d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055da:	4798      	blx	r3
 80055dc:	3601      	adds	r6, #1
 80055de:	e7f2      	b.n	80055c6 <__libc_init_array+0x1e>
 80055e0:	08006050 	.word	0x08006050
 80055e4:	08006050 	.word	0x08006050
 80055e8:	08006050 	.word	0x08006050
 80055ec:	08006054 	.word	0x08006054

080055f0 <__retarget_lock_acquire_recursive>:
 80055f0:	4770      	bx	lr

080055f2 <__retarget_lock_release_recursive>:
 80055f2:	4770      	bx	lr

080055f4 <_free_r>:
 80055f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d044      	beq.n	8005684 <_free_r+0x90>
 80055fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fe:	9001      	str	r0, [sp, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f1a1 0404 	sub.w	r4, r1, #4
 8005606:	bfb8      	it	lt
 8005608:	18e4      	addlt	r4, r4, r3
 800560a:	f000 f8df 	bl	80057cc <__malloc_lock>
 800560e:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <_free_r+0x94>)
 8005610:	9801      	ldr	r0, [sp, #4]
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x30>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	b003      	add	sp, #12
 800561c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005620:	f000 b8da 	b.w	80057d8 <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x46>
 8005628:	6825      	ldr	r5, [r4, #0]
 800562a:	1961      	adds	r1, r4, r5
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1949      	addeq	r1, r1, r5
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x22>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x50>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x46>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1855      	adds	r5, r2, r1
 8005648:	42a5      	cmp	r5, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x70>
 800564c:	6824      	ldr	r4, [r4, #0]
 800564e:	4421      	add	r1, r4
 8005650:	1854      	adds	r4, r2, r1
 8005652:	42a3      	cmp	r3, r4
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x26>
 8005658:	681c      	ldr	r4, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6053      	str	r3, [r2, #4]
 800565e:	440c      	add	r4, r1
 8005660:	6014      	str	r4, [r2, #0]
 8005662:	e7da      	b.n	800561a <_free_r+0x26>
 8005664:	d902      	bls.n	800566c <_free_r+0x78>
 8005666:	230c      	movs	r3, #12
 8005668:	6003      	str	r3, [r0, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x26>
 800566c:	6825      	ldr	r5, [r4, #0]
 800566e:	1961      	adds	r1, r4, r5
 8005670:	428b      	cmp	r3, r1
 8005672:	bf04      	itt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1949      	addeq	r1, r1, r5
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	6054      	str	r4, [r2, #4]
 8005682:	e7ca      	b.n	800561a <_free_r+0x26>
 8005684:	b003      	add	sp, #12
 8005686:	bd30      	pop	{r4, r5, pc}
 8005688:	200017e8 	.word	0x200017e8

0800568c <sbrk_aligned>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4e0e      	ldr	r6, [pc, #56]	; (80056c8 <sbrk_aligned+0x3c>)
 8005690:	460c      	mov	r4, r1
 8005692:	6831      	ldr	r1, [r6, #0]
 8005694:	4605      	mov	r5, r0
 8005696:	b911      	cbnz	r1, 800569e <sbrk_aligned+0x12>
 8005698:	f000 fba6 	bl	8005de8 <_sbrk_r>
 800569c:	6030      	str	r0, [r6, #0]
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 fba1 	bl	8005de8 <_sbrk_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	d00a      	beq.n	80056c0 <sbrk_aligned+0x34>
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d007      	beq.n	80056c4 <sbrk_aligned+0x38>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fb96 	bl	8005de8 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d101      	bne.n	80056c4 <sbrk_aligned+0x38>
 80056c0:	f04f 34ff 	mov.w	r4, #4294967295
 80056c4:	4620      	mov	r0, r4
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	200017ec 	.word	0x200017ec

080056cc <_malloc_r>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	1ccd      	adds	r5, r1, #3
 80056d2:	f025 0503 	bic.w	r5, r5, #3
 80056d6:	3508      	adds	r5, #8
 80056d8:	2d0c      	cmp	r5, #12
 80056da:	bf38      	it	cc
 80056dc:	250c      	movcc	r5, #12
 80056de:	2d00      	cmp	r5, #0
 80056e0:	4607      	mov	r7, r0
 80056e2:	db01      	blt.n	80056e8 <_malloc_r+0x1c>
 80056e4:	42a9      	cmp	r1, r5
 80056e6:	d905      	bls.n	80056f4 <_malloc_r+0x28>
 80056e8:	230c      	movs	r3, #12
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	2600      	movs	r6, #0
 80056ee:	4630      	mov	r0, r6
 80056f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057c8 <_malloc_r+0xfc>
 80056f8:	f000 f868 	bl	80057cc <__malloc_lock>
 80056fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005700:	461c      	mov	r4, r3
 8005702:	bb5c      	cbnz	r4, 800575c <_malloc_r+0x90>
 8005704:	4629      	mov	r1, r5
 8005706:	4638      	mov	r0, r7
 8005708:	f7ff ffc0 	bl	800568c <sbrk_aligned>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	4604      	mov	r4, r0
 8005710:	d155      	bne.n	80057be <_malloc_r+0xf2>
 8005712:	f8d8 4000 	ldr.w	r4, [r8]
 8005716:	4626      	mov	r6, r4
 8005718:	2e00      	cmp	r6, #0
 800571a:	d145      	bne.n	80057a8 <_malloc_r+0xdc>
 800571c:	2c00      	cmp	r4, #0
 800571e:	d048      	beq.n	80057b2 <_malloc_r+0xe6>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	4631      	mov	r1, r6
 8005724:	4638      	mov	r0, r7
 8005726:	eb04 0903 	add.w	r9, r4, r3
 800572a:	f000 fb5d 	bl	8005de8 <_sbrk_r>
 800572e:	4581      	cmp	r9, r0
 8005730:	d13f      	bne.n	80057b2 <_malloc_r+0xe6>
 8005732:	6821      	ldr	r1, [r4, #0]
 8005734:	1a6d      	subs	r5, r5, r1
 8005736:	4629      	mov	r1, r5
 8005738:	4638      	mov	r0, r7
 800573a:	f7ff ffa7 	bl	800568c <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d037      	beq.n	80057b2 <_malloc_r+0xe6>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	f8d8 3000 	ldr.w	r3, [r8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d038      	beq.n	80057c2 <_malloc_r+0xf6>
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	42a2      	cmp	r2, r4
 8005754:	d12b      	bne.n	80057ae <_malloc_r+0xe2>
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e00f      	b.n	800577c <_malloc_r+0xb0>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	1b52      	subs	r2, r2, r5
 8005760:	d41f      	bmi.n	80057a2 <_malloc_r+0xd6>
 8005762:	2a0b      	cmp	r2, #11
 8005764:	d917      	bls.n	8005796 <_malloc_r+0xca>
 8005766:	1961      	adds	r1, r4, r5
 8005768:	42a3      	cmp	r3, r4
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	6059      	strne	r1, [r3, #4]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	bf08      	it	eq
 8005774:	f8c8 1000 	streq.w	r1, [r8]
 8005778:	5162      	str	r2, [r4, r5]
 800577a:	604b      	str	r3, [r1, #4]
 800577c:	4638      	mov	r0, r7
 800577e:	f104 060b 	add.w	r6, r4, #11
 8005782:	f000 f829 	bl	80057d8 <__malloc_unlock>
 8005786:	f026 0607 	bic.w	r6, r6, #7
 800578a:	1d23      	adds	r3, r4, #4
 800578c:	1af2      	subs	r2, r6, r3
 800578e:	d0ae      	beq.n	80056ee <_malloc_r+0x22>
 8005790:	1b9b      	subs	r3, r3, r6
 8005792:	50a3      	str	r3, [r4, r2]
 8005794:	e7ab      	b.n	80056ee <_malloc_r+0x22>
 8005796:	42a3      	cmp	r3, r4
 8005798:	6862      	ldr	r2, [r4, #4]
 800579a:	d1dd      	bne.n	8005758 <_malloc_r+0x8c>
 800579c:	f8c8 2000 	str.w	r2, [r8]
 80057a0:	e7ec      	b.n	800577c <_malloc_r+0xb0>
 80057a2:	4623      	mov	r3, r4
 80057a4:	6864      	ldr	r4, [r4, #4]
 80057a6:	e7ac      	b.n	8005702 <_malloc_r+0x36>
 80057a8:	4634      	mov	r4, r6
 80057aa:	6876      	ldr	r6, [r6, #4]
 80057ac:	e7b4      	b.n	8005718 <_malloc_r+0x4c>
 80057ae:	4613      	mov	r3, r2
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x80>
 80057b2:	230c      	movs	r3, #12
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4638      	mov	r0, r7
 80057b8:	f000 f80e 	bl	80057d8 <__malloc_unlock>
 80057bc:	e797      	b.n	80056ee <_malloc_r+0x22>
 80057be:	6025      	str	r5, [r4, #0]
 80057c0:	e7dc      	b.n	800577c <_malloc_r+0xb0>
 80057c2:	605b      	str	r3, [r3, #4]
 80057c4:	deff      	udf	#255	; 0xff
 80057c6:	bf00      	nop
 80057c8:	200017e8 	.word	0x200017e8

080057cc <__malloc_lock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_lock+0x8>)
 80057ce:	f7ff bf0f 	b.w	80055f0 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	200017e4 	.word	0x200017e4

080057d8 <__malloc_unlock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_unlock+0x8>)
 80057da:	f7ff bf0a 	b.w	80055f2 <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	200017e4 	.word	0x200017e4

080057e4 <__ssputs_r>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	688e      	ldr	r6, [r1, #8]
 80057ea:	461f      	mov	r7, r3
 80057ec:	42be      	cmp	r6, r7
 80057ee:	680b      	ldr	r3, [r1, #0]
 80057f0:	4682      	mov	sl, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	4690      	mov	r8, r2
 80057f6:	d82c      	bhi.n	8005852 <__ssputs_r+0x6e>
 80057f8:	898a      	ldrh	r2, [r1, #12]
 80057fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057fe:	d026      	beq.n	800584e <__ssputs_r+0x6a>
 8005800:	6965      	ldr	r5, [r4, #20]
 8005802:	6909      	ldr	r1, [r1, #16]
 8005804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005808:	eba3 0901 	sub.w	r9, r3, r1
 800580c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005810:	1c7b      	adds	r3, r7, #1
 8005812:	444b      	add	r3, r9
 8005814:	106d      	asrs	r5, r5, #1
 8005816:	429d      	cmp	r5, r3
 8005818:	bf38      	it	cc
 800581a:	461d      	movcc	r5, r3
 800581c:	0553      	lsls	r3, r2, #21
 800581e:	d527      	bpl.n	8005870 <__ssputs_r+0x8c>
 8005820:	4629      	mov	r1, r5
 8005822:	f7ff ff53 	bl	80056cc <_malloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	b360      	cbz	r0, 8005884 <__ssputs_r+0xa0>
 800582a:	6921      	ldr	r1, [r4, #16]
 800582c:	464a      	mov	r2, r9
 800582e:	f000 faeb 	bl	8005e08 <memcpy>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	6126      	str	r6, [r4, #16]
 8005840:	6165      	str	r5, [r4, #20]
 8005842:	444e      	add	r6, r9
 8005844:	eba5 0509 	sub.w	r5, r5, r9
 8005848:	6026      	str	r6, [r4, #0]
 800584a:	60a5      	str	r5, [r4, #8]
 800584c:	463e      	mov	r6, r7
 800584e:	42be      	cmp	r6, r7
 8005850:	d900      	bls.n	8005854 <__ssputs_r+0x70>
 8005852:	463e      	mov	r6, r7
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	4632      	mov	r2, r6
 8005858:	4641      	mov	r1, r8
 800585a:	f000 faab 	bl	8005db4 <memmove>
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	1b9b      	subs	r3, r3, r6
 8005862:	60a3      	str	r3, [r4, #8]
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	4433      	add	r3, r6
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	2000      	movs	r0, #0
 800586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005870:	462a      	mov	r2, r5
 8005872:	f000 fad7 	bl	8005e24 <_realloc_r>
 8005876:	4606      	mov	r6, r0
 8005878:	2800      	cmp	r0, #0
 800587a:	d1e0      	bne.n	800583e <__ssputs_r+0x5a>
 800587c:	6921      	ldr	r1, [r4, #16]
 800587e:	4650      	mov	r0, sl
 8005880:	f7ff feb8 	bl	80055f4 <_free_r>
 8005884:	230c      	movs	r3, #12
 8005886:	f8ca 3000 	str.w	r3, [sl]
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	e7e9      	b.n	800586c <__ssputs_r+0x88>

08005898 <_svfiprintf_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4698      	mov	r8, r3
 800589e:	898b      	ldrh	r3, [r1, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	b09d      	sub	sp, #116	; 0x74
 80058a4:	4607      	mov	r7, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	d50e      	bpl.n	80058ca <_svfiprintf_r+0x32>
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	b963      	cbnz	r3, 80058ca <_svfiprintf_r+0x32>
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	f7ff ff0b 	bl	80056cc <_malloc_r>
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	6128      	str	r0, [r5, #16]
 80058ba:	b920      	cbnz	r0, 80058c6 <_svfiprintf_r+0x2e>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e0d0      	b.n	8005a68 <_svfiprintf_r+0x1d0>
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	616b      	str	r3, [r5, #20]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9309      	str	r3, [sp, #36]	; 0x24
 80058ce:	2320      	movs	r3, #32
 80058d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a80 <_svfiprintf_r+0x1e8>
 80058de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e2:	f04f 0901 	mov.w	r9, #1
 80058e6:	4623      	mov	r3, r4
 80058e8:	469a      	mov	sl, r3
 80058ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ee:	b10a      	cbz	r2, 80058f4 <_svfiprintf_r+0x5c>
 80058f0:	2a25      	cmp	r2, #37	; 0x25
 80058f2:	d1f9      	bne.n	80058e8 <_svfiprintf_r+0x50>
 80058f4:	ebba 0b04 	subs.w	fp, sl, r4
 80058f8:	d00b      	beq.n	8005912 <_svfiprintf_r+0x7a>
 80058fa:	465b      	mov	r3, fp
 80058fc:	4622      	mov	r2, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff ff6f 	bl	80057e4 <__ssputs_r>
 8005906:	3001      	adds	r0, #1
 8005908:	f000 80a9 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 800590c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800590e:	445a      	add	r2, fp
 8005910:	9209      	str	r2, [sp, #36]	; 0x24
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a1 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 800591c:	2300      	movs	r3, #0
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005926:	f10a 0a01 	add.w	sl, sl, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005932:	931a      	str	r3, [sp, #104]	; 0x68
 8005934:	4654      	mov	r4, sl
 8005936:	2205      	movs	r2, #5
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	4850      	ldr	r0, [pc, #320]	; (8005a80 <_svfiprintf_r+0x1e8>)
 800593e:	f7fa fc4f 	bl	80001e0 <memchr>
 8005942:	9a04      	ldr	r2, [sp, #16]
 8005944:	b9d8      	cbnz	r0, 800597e <_svfiprintf_r+0xe6>
 8005946:	06d0      	lsls	r0, r2, #27
 8005948:	bf44      	itt	mi
 800594a:	2320      	movmi	r3, #32
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005950:	0711      	lsls	r1, r2, #28
 8005952:	bf44      	itt	mi
 8005954:	232b      	movmi	r3, #43	; 0x2b
 8005956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595a:	f89a 3000 	ldrb.w	r3, [sl]
 800595e:	2b2a      	cmp	r3, #42	; 0x2a
 8005960:	d015      	beq.n	800598e <_svfiprintf_r+0xf6>
 8005962:	9a07      	ldr	r2, [sp, #28]
 8005964:	4654      	mov	r4, sl
 8005966:	2000      	movs	r0, #0
 8005968:	f04f 0c0a 	mov.w	ip, #10
 800596c:	4621      	mov	r1, r4
 800596e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005972:	3b30      	subs	r3, #48	; 0x30
 8005974:	2b09      	cmp	r3, #9
 8005976:	d94d      	bls.n	8005a14 <_svfiprintf_r+0x17c>
 8005978:	b1b0      	cbz	r0, 80059a8 <_svfiprintf_r+0x110>
 800597a:	9207      	str	r2, [sp, #28]
 800597c:	e014      	b.n	80059a8 <_svfiprintf_r+0x110>
 800597e:	eba0 0308 	sub.w	r3, r0, r8
 8005982:	fa09 f303 	lsl.w	r3, r9, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	46a2      	mov	sl, r4
 800598c:	e7d2      	b.n	8005934 <_svfiprintf_r+0x9c>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfbb      	ittet	lt
 800599a:	425b      	neglt	r3, r3
 800599c:	f042 0202 	orrlt.w	r2, r2, #2
 80059a0:	9307      	strge	r3, [sp, #28]
 80059a2:	9307      	strlt	r3, [sp, #28]
 80059a4:	bfb8      	it	lt
 80059a6:	9204      	strlt	r2, [sp, #16]
 80059a8:	7823      	ldrb	r3, [r4, #0]
 80059aa:	2b2e      	cmp	r3, #46	; 0x2e
 80059ac:	d10c      	bne.n	80059c8 <_svfiprintf_r+0x130>
 80059ae:	7863      	ldrb	r3, [r4, #1]
 80059b0:	2b2a      	cmp	r3, #42	; 0x2a
 80059b2:	d134      	bne.n	8005a1e <_svfiprintf_r+0x186>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	9203      	str	r2, [sp, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfb8      	it	lt
 80059c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c4:	3402      	adds	r4, #2
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a90 <_svfiprintf_r+0x1f8>
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7fa fc05 	bl	80001e0 <memchr>
 80059d6:	b138      	cbz	r0, 80059e8 <_svfiprintf_r+0x150>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	eba0 000a 	sub.w	r0, r0, sl
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	4082      	lsls	r2, r0
 80059e2:	4313      	orrs	r3, r2
 80059e4:	3401      	adds	r4, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ec:	4825      	ldr	r0, [pc, #148]	; (8005a84 <_svfiprintf_r+0x1ec>)
 80059ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f2:	2206      	movs	r2, #6
 80059f4:	f7fa fbf4 	bl	80001e0 <memchr>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d038      	beq.n	8005a6e <_svfiprintf_r+0x1d6>
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <_svfiprintf_r+0x1f0>)
 80059fe:	bb1b      	cbnz	r3, 8005a48 <_svfiprintf_r+0x1b0>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	3307      	adds	r3, #7
 8005a04:	f023 0307 	bic.w	r3, r3, #7
 8005a08:	3308      	adds	r3, #8
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	4433      	add	r3, r6
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
 8005a12:	e768      	b.n	80058e6 <_svfiprintf_r+0x4e>
 8005a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	e7a6      	b.n	800596c <_svfiprintf_r+0xd4>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	3401      	adds	r4, #1
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	4619      	mov	r1, r3
 8005a26:	f04f 0c0a 	mov.w	ip, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a30:	3a30      	subs	r2, #48	; 0x30
 8005a32:	2a09      	cmp	r2, #9
 8005a34:	d903      	bls.n	8005a3e <_svfiprintf_r+0x1a6>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0c6      	beq.n	80059c8 <_svfiprintf_r+0x130>
 8005a3a:	9105      	str	r1, [sp, #20]
 8005a3c:	e7c4      	b.n	80059c8 <_svfiprintf_r+0x130>
 8005a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7f0      	b.n	8005a2a <_svfiprintf_r+0x192>
 8005a48:	ab03      	add	r3, sp, #12
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <_svfiprintf_r+0x1f4>)
 8005a50:	a904      	add	r1, sp, #16
 8005a52:	4638      	mov	r0, r7
 8005a54:	f3af 8000 	nop.w
 8005a58:	1c42      	adds	r2, r0, #1
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	d1d6      	bne.n	8005a0c <_svfiprintf_r+0x174>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	065b      	lsls	r3, r3, #25
 8005a62:	f53f af2d 	bmi.w	80058c0 <_svfiprintf_r+0x28>
 8005a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a68:	b01d      	add	sp, #116	; 0x74
 8005a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6e:	ab03      	add	r3, sp, #12
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <_svfiprintf_r+0x1f4>)
 8005a76:	a904      	add	r1, sp, #16
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f000 f879 	bl	8005b70 <_printf_i>
 8005a7e:	e7eb      	b.n	8005a58 <_svfiprintf_r+0x1c0>
 8005a80:	08006014 	.word	0x08006014
 8005a84:	0800601e 	.word	0x0800601e
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	080057e5 	.word	0x080057e5
 8005a90:	0800601a 	.word	0x0800601a

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bfb8      	it	lt
 8005aa8:	4613      	movlt	r3, r2
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc26      	bgt.n	8005b2a <_printf_common+0x96>
 8005adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae0:	1e13      	subs	r3, r2, #0
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d42b      	bmi.n	8005b44 <_printf_common+0xb0>
 8005aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af0:	4649      	mov	r1, r9
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d01e      	beq.n	8005b38 <_printf_common+0xa4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	f003 0306 	and.w	r3, r3, #6
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf02      	ittt	eq
 8005b06:	68e5      	ldreq	r5, [r4, #12]
 8005b08:	6833      	ldreq	r3, [r6, #0]
 8005b0a:	1aed      	subeq	r5, r5, r3
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	bf0c      	ite	eq
 8005b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b14:	2500      	movne	r5, #0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bfc4      	itt	gt
 8005b1a:	1a9b      	subgt	r3, r3, r2
 8005b1c:	18ed      	addgt	r5, r5, r3
 8005b1e:	2600      	movs	r6, #0
 8005b20:	341a      	adds	r4, #26
 8005b22:	42b5      	cmp	r5, r6
 8005b24:	d11a      	bne.n	8005b5c <_printf_common+0xc8>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e008      	b.n	8005b3c <_printf_common+0xa8>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4638      	mov	r0, r7
 8005b32:	47c0      	blx	r8
 8005b34:	3001      	adds	r0, #1
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0xac>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7c6      	b.n	8005ad2 <_printf_common+0x3e>
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	2030      	movs	r0, #48	; 0x30
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b4e:	4422      	add	r2, r4
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b58:	3302      	adds	r3, #2
 8005b5a:	e7c7      	b.n	8005aec <_printf_common+0x58>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4622      	mov	r2, r4
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0e6      	beq.n	8005b38 <_printf_common+0xa4>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7d9      	b.n	8005b22 <_printf_common+0x8e>
	...

08005b70 <_printf_i>:
 8005b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	7e0f      	ldrb	r7, [r1, #24]
 8005b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b78:	2f78      	cmp	r7, #120	; 0x78
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	469a      	mov	sl, r3
 8005b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b86:	d807      	bhi.n	8005b98 <_printf_i+0x28>
 8005b88:	2f62      	cmp	r7, #98	; 0x62
 8005b8a:	d80a      	bhi.n	8005ba2 <_printf_i+0x32>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	f000 80d4 	beq.w	8005d3a <_printf_i+0x1ca>
 8005b92:	2f58      	cmp	r7, #88	; 0x58
 8005b94:	f000 80c0 	beq.w	8005d18 <_printf_i+0x1a8>
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba0:	e03a      	b.n	8005c18 <_printf_i+0xa8>
 8005ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ba6:	2b15      	cmp	r3, #21
 8005ba8:	d8f6      	bhi.n	8005b98 <_printf_i+0x28>
 8005baa:	a101      	add	r1, pc, #4	; (adr r1, 8005bb0 <_printf_i+0x40>)
 8005bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005b99 	.word	0x08005b99
 8005bbc:	08005b99 	.word	0x08005b99
 8005bc0:	08005b99 	.word	0x08005b99
 8005bc4:	08005b99 	.word	0x08005b99
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b99 	.word	0x08005b99
 8005bd0:	08005b99 	.word	0x08005b99
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005d21 	.word	0x08005d21
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005cdb 	.word	0x08005cdb
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d43 	.word	0x08005d43
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005ce3 	.word	0x08005ce3
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	602a      	str	r2, [r5, #0]
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e09f      	b.n	8005d5c <_printf_i+0x1ec>
 8005c1c:	6820      	ldr	r0, [r4, #0]
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	0607      	lsls	r7, r0, #24
 8005c22:	f103 0104 	add.w	r1, r3, #4
 8005c26:	6029      	str	r1, [r5, #0]
 8005c28:	d501      	bpl.n	8005c2e <_printf_i+0xbe>
 8005c2a:	681e      	ldr	r6, [r3, #0]
 8005c2c:	e003      	b.n	8005c36 <_printf_i+0xc6>
 8005c2e:	0646      	lsls	r6, r0, #25
 8005c30:	d5fb      	bpl.n	8005c2a <_printf_i+0xba>
 8005c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	da03      	bge.n	8005c42 <_printf_i+0xd2>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	4276      	negs	r6, r6
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	485a      	ldr	r0, [pc, #360]	; (8005dac <_printf_i+0x23c>)
 8005c44:	230a      	movs	r3, #10
 8005c46:	e012      	b.n	8005c6e <_printf_i+0xfe>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	1d19      	adds	r1, r3, #4
 8005c4e:	6029      	str	r1, [r5, #0]
 8005c50:	0605      	lsls	r5, r0, #24
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0xe8>
 8005c54:	681e      	ldr	r6, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0xee>
 8005c58:	0641      	lsls	r1, r0, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0xe4>
 8005c5c:	881e      	ldrh	r6, [r3, #0]
 8005c5e:	4853      	ldr	r0, [pc, #332]	; (8005dac <_printf_i+0x23c>)
 8005c60:	2f6f      	cmp	r7, #111	; 0x6f
 8005c62:	bf0c      	ite	eq
 8005c64:	2308      	moveq	r3, #8
 8005c66:	230a      	movne	r3, #10
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c6e:	6865      	ldr	r5, [r4, #4]
 8005c70:	60a5      	str	r5, [r4, #8]
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	bfa2      	ittt	ge
 8005c76:	6821      	ldrge	r1, [r4, #0]
 8005c78:	f021 0104 	bicge.w	r1, r1, #4
 8005c7c:	6021      	strge	r1, [r4, #0]
 8005c7e:	b90e      	cbnz	r6, 8005c84 <_printf_i+0x114>
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	d04b      	beq.n	8005d1c <_printf_i+0x1ac>
 8005c84:	4615      	mov	r5, r2
 8005c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c8e:	5dc7      	ldrb	r7, [r0, r7]
 8005c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c94:	4637      	mov	r7, r6
 8005c96:	42bb      	cmp	r3, r7
 8005c98:	460e      	mov	r6, r1
 8005c9a:	d9f4      	bls.n	8005c86 <_printf_i+0x116>
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10b      	bne.n	8005cb8 <_printf_i+0x148>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	07de      	lsls	r6, r3, #31
 8005ca4:	d508      	bpl.n	8005cb8 <_printf_i+0x148>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	6861      	ldr	r1, [r4, #4]
 8005caa:	4299      	cmp	r1, r3
 8005cac:	bfde      	ittt	le
 8005cae:	2330      	movle	r3, #48	; 0x30
 8005cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb8:	1b52      	subs	r2, r2, r5
 8005cba:	6122      	str	r2, [r4, #16]
 8005cbc:	f8cd a000 	str.w	sl, [sp]
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	aa03      	add	r2, sp, #12
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7ff fee4 	bl	8005a94 <_printf_common>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d14a      	bne.n	8005d66 <_printf_i+0x1f6>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	b004      	add	sp, #16
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	4833      	ldr	r0, [pc, #204]	; (8005db0 <_printf_i+0x240>)
 8005ce4:	2778      	movs	r7, #120	; 0x78
 8005ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	061f      	lsls	r7, r3, #24
 8005cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf4:	d402      	bmi.n	8005cfc <_printf_i+0x18c>
 8005cf6:	065f      	lsls	r7, r3, #25
 8005cf8:	bf48      	it	mi
 8005cfa:	b2b6      	uxthmi	r6, r6
 8005cfc:	07df      	lsls	r7, r3, #31
 8005cfe:	bf48      	it	mi
 8005d00:	f043 0320 	orrmi.w	r3, r3, #32
 8005d04:	6029      	str	r1, [r5, #0]
 8005d06:	bf48      	it	mi
 8005d08:	6023      	strmi	r3, [r4, #0]
 8005d0a:	b91e      	cbnz	r6, 8005d14 <_printf_i+0x1a4>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	2310      	movs	r3, #16
 8005d16:	e7a7      	b.n	8005c68 <_printf_i+0xf8>
 8005d18:	4824      	ldr	r0, [pc, #144]	; (8005dac <_printf_i+0x23c>)
 8005d1a:	e7e4      	b.n	8005ce6 <_printf_i+0x176>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	e7bd      	b.n	8005c9c <_printf_i+0x12c>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	6826      	ldr	r6, [r4, #0]
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6028      	str	r0, [r5, #0]
 8005d2a:	0635      	lsls	r5, r6, #24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0x1c4>
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0x1ca>
 8005d34:	0670      	lsls	r0, r6, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0x1c0>
 8005d38:	8019      	strh	r1, [r3, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	4615      	mov	r5, r2
 8005d40:	e7bc      	b.n	8005cbc <_printf_i+0x14c>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	602a      	str	r2, [r5, #0]
 8005d48:	681d      	ldr	r5, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7fa fa46 	bl	80001e0 <memchr>
 8005d54:	b108      	cbz	r0, 8005d5a <_printf_i+0x1ea>
 8005d56:	1b40      	subs	r0, r0, r5
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	e7aa      	b.n	8005cbc <_printf_i+0x14c>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0ad      	beq.n	8005cd0 <_printf_i+0x160>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	d413      	bmi.n	8005da2 <_printf_i+0x232>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e7a6      	b.n	8005cd4 <_printf_i+0x164>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d09d      	beq.n	8005cd0 <_printf_i+0x160>
 8005d94:	3501      	adds	r5, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dcf2      	bgt.n	8005d86 <_printf_i+0x216>
 8005da0:	e7eb      	b.n	8005d7a <_printf_i+0x20a>
 8005da2:	2500      	movs	r5, #0
 8005da4:	f104 0619 	add.w	r6, r4, #25
 8005da8:	e7f5      	b.n	8005d96 <_printf_i+0x226>
 8005daa:	bf00      	nop
 8005dac:	08006025 	.word	0x08006025
 8005db0:	08006036 	.word	0x08006036

08005db4 <memmove>:
 8005db4:	4288      	cmp	r0, r1
 8005db6:	b510      	push	{r4, lr}
 8005db8:	eb01 0402 	add.w	r4, r1, r2
 8005dbc:	d902      	bls.n	8005dc4 <memmove+0x10>
 8005dbe:	4284      	cmp	r4, r0
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	d807      	bhi.n	8005dd4 <memmove+0x20>
 8005dc4:	1e43      	subs	r3, r0, #1
 8005dc6:	42a1      	cmp	r1, r4
 8005dc8:	d008      	beq.n	8005ddc <memmove+0x28>
 8005dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd2:	e7f8      	b.n	8005dc6 <memmove+0x12>
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	d100      	bne.n	8005dde <memmove+0x2a>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de6:	e7f7      	b.n	8005dd8 <memmove+0x24>

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	; (8005e04 <_sbrk_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fc f8f8 	bl	8001fe8 <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200017e0 	.word	0x200017e0

08005e08 <memcpy>:
 8005e08:	440a      	add	r2, r1
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e10:	d100      	bne.n	8005e14 <memcpy+0xc>
 8005e12:	4770      	bx	lr
 8005e14:	b510      	push	{r4, lr}
 8005e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	d1f9      	bne.n	8005e16 <memcpy+0xe>
 8005e22:	bd10      	pop	{r4, pc}

08005e24 <_realloc_r>:
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	4680      	mov	r8, r0
 8005e2a:	4614      	mov	r4, r2
 8005e2c:	460e      	mov	r6, r1
 8005e2e:	b921      	cbnz	r1, 8005e3a <_realloc_r+0x16>
 8005e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4611      	mov	r1, r2
 8005e36:	f7ff bc49 	b.w	80056cc <_malloc_r>
 8005e3a:	b92a      	cbnz	r2, 8005e48 <_realloc_r+0x24>
 8005e3c:	f7ff fbda 	bl	80055f4 <_free_r>
 8005e40:	4625      	mov	r5, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e48:	f000 f81b 	bl	8005e82 <_malloc_usable_size_r>
 8005e4c:	4284      	cmp	r4, r0
 8005e4e:	4607      	mov	r7, r0
 8005e50:	d802      	bhi.n	8005e58 <_realloc_r+0x34>
 8005e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e56:	d812      	bhi.n	8005e7e <_realloc_r+0x5a>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	f7ff fc36 	bl	80056cc <_malloc_r>
 8005e60:	4605      	mov	r5, r0
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d0ed      	beq.n	8005e42 <_realloc_r+0x1e>
 8005e66:	42bc      	cmp	r4, r7
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	bf28      	it	cs
 8005e6e:	463a      	movcs	r2, r7
 8005e70:	f7ff ffca 	bl	8005e08 <memcpy>
 8005e74:	4631      	mov	r1, r6
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fbbc 	bl	80055f4 <_free_r>
 8005e7c:	e7e1      	b.n	8005e42 <_realloc_r+0x1e>
 8005e7e:	4635      	mov	r5, r6
 8005e80:	e7df      	b.n	8005e42 <_realloc_r+0x1e>

08005e82 <_malloc_usable_size_r>:
 8005e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e86:	1f18      	subs	r0, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfbc      	itt	lt
 8005e8c:	580b      	ldrlt	r3, [r1, r0]
 8005e8e:	18c0      	addlt	r0, r0, r3
 8005e90:	4770      	bx	lr
	...

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
