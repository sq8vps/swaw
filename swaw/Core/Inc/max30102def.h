#ifndef INC_MAX30102DEF_H_
#define INC_MAX30102DEF_H_

enum Max30102Register
{
	INTERRUPT_STATUS_1 = 0x00,
	INTERRUPT_STATUS_2 = 0x01,
	INTERRUPT_ENABLE_1 = 0x02,
	INTERRUPT_ENABLE_2 = 0x03,
	FIFO_WRITE_POINTER = 0x04,
	FIFO_OVERFLOW_COUNTER = 0x05,
	FIFO_READ_POINTER = 0x06,
	FIFO_DATA_REGISTER = 0x07,
	FIFO_CONFIGURATION = 0x08,
	MODE_CONFIGURATION = 0x09,
	SPO2_CONFIGURATION = 0x0A,
	LED1_PULSE_AMPLITUDE = 0x0C,
	LED2_PULSE_AMPLITUDE = 0x0D,
	MULTI_LED_MODE_CONTROL_1 = 0x11,
	MULTI_LED_MODE_CONTROL_2 = 0x12,
};

#define MAX30102_INTERRUPT_STATUS_1_A_FULL 0x80
#define MAX30102_INTERRUPT_STATUS_1_PPG_RDY 0x40

#define MAX30102_INTERRUPT_ENABLE_1_A_FULL_EN 0x80
#define MAX30102_INTERRUPT_ENABLE_1_PPG_RDY_EN 0x80

#define MAX30102_FIFO_CONFIGURATION_ROLLOVER_EN 0x10
#define MAX30102_FIFO_CONFIGURATION_FIFO_A_FULL_MASK 0xF
#define MAX30102_FIFO_CONFIGURATION_FIFO_A_FULL_SHIFT 0
#define MAX30102_FIFO_CONFIGURATION_SMP_AVE_MASK 0x7
#define MAX30102_FIFO_CONFIGURATION_SMP_AVE_SHIFT 5

#define MAX30102_FIFO_WRITE_POINTER_MASK 0x1F
#define MAX30102_FIFO_OVERFLOW_COUNTER_MASK 0x1F
#define MAX30102_FIFO_READ_POINTER_MASK 0x1F

#define MAX30102_MODE_CONFIGURATION_RESET 0x40

#define MAX30102_MODE_CONFIGURATION_MODE_MASK 0x7
#define MAX30102_MODE_CONFIGURATION_MODE_SHIFT 0

#define MAX30102_SPO2_CONFIGURATION_ADC_RGE_MASK 0x3
#define MAX30102_SPO2_CONFIGURATION_ADC_RGE_SHIFT 5

#define MAX30102_SPO2_CONFIGURATION_SR_MASK 0x7
#define MAX30102_SPO2_CONFIGURATION_SR_SHIFT 2

#define MAX30102_SPO2_CONFIGURATION_LED_PW_MASK 0x3
#define MAX30102_SPO2_CONFIGURATION_LED_PW_SHIFT 0

enum Max30102SampleAveraging
{
	FIFO_SMP_AVE_1 = 0x0,
	FIFO_SMP_AVE_2 = 0x1,
	FIFO_SMP_AVE_4 = 0x2,
	FIFO_SMP_AVE_8 = 0x3,
	FIFO_SMP_AVE_16	= 0x4,
	FIFO_SMP_AVE_32	= 0x5
};

enum Max30102Mode
{
	MODE_HEART_RATE = 0x2,
	MODE_SPO2 = 0x3,
	MODE_MULTI_LED = 0x7
};

enum Max30102Spo2Range
{
	SPO2_RANGE_2048 = 0x0,
	SPO2_RANGE_4096 = 0x1,
	SPO2_RANGE_8192 = 0x2,
	SPO2_RANGE_16384 = 0x3,
};

enum Max30102Spo2SampleRate
{
	SPO2_SAMPLE_RATE_50 = 0x0,
	SPO2_SAMPLE_RATE_100 = 0x1,
	SPO2_SAMPLE_RATE_200 = 0x2,
	SPO2_SAMPLE_RATE_400 = 0x3,
	SPO2_SAMPLE_RATE_800 = 0x4,
	SPO2_SAMPLE_RATE_1000 = 0x5,
	SPO2_SAMPLE_RATE_1600 = 0x6,
	SPO2_SAMPLE_RATE_3200 = 0x7
};

enum Max30102Spo2LedPulseWidth
{
	SPO2_PULSE_WIDTH_69 = 0x0,
	SPO2_PULSE_WIDTH_118 = 0x1,
	SPO2_PULSE_WIDTH_215 = 0x2,
	SPO2_PULSE_WIDTH_411 = 0x3
};


#define MAX30102_IR_LED_CURRENT_LOW				0x01 //low current for finger presence detection
#define MAX30102_RED_LED_CURRENT_LOW			0x00 //no current in finger presence detection mode
#define MAX30102_IR_LED_CURRENT_HIGH			0x24 //high current in measurement mode
#define MAX30102_RED_LED_CURRENT_HIGH			0x24 //high current in measurement mode
#define MAX30102_IR_VALUE_FINGER_ON_SENSOR 		1600 //thresholds for finger detection
#define MAX30102_IR_VALUE_FINGER_OUT_SENSOR 	50000



#if(MAX30102_SAMPLES_PER_SECOND == 50)
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_50
#elif((MAX30102_SAMPLES_PER_SECOND == 100))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_100
#elif((MAX30102_SAMPLES_PER_SECOND == 200))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_200
#elif((MAX30102_SAMPLES_PER_SECOND == 400))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_400
#elif((MAX30102_SAMPLES_PER_SECOND == 800))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_800
#elif((MAX30102_SAMPLES_PER_SECOND == 1000))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_1000
#elif((MAX30102_SAMPLES_PER_SECOND == 1600))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_1600
#elif((MAX30102_SAMPLES_PER_SECOND == 3200))
#define SPO2_SAMPLE_RATE SPO2_SAMPLE_RATE_3200
#else
#error "Wrong Sample Rate value. Use 50, 100, 200, 400, 800, 1000, 1600 or 3200."
#endif

#endif
